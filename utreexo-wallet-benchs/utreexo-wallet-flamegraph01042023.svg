<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2406" onload="init(evt)" viewBox="0 0 1200 2406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="2406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="2389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="2389.00"> </text><svg id="frames" x="10" width="1180" total_samples="220960"><g><title>CSHA256::Write (104 samples, 0.05%)</title><rect x="0.0009%" y="2325" width="0.0471%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="104"/><text x="0.2509%" y="2335.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, COutPoint&gt; (29 samples, 0.01%)</title><rect x="0.0489%" y="2069" width="0.0131%" height="15" fill="rgb(217,0,24)" fg:x="108" fg:w="29"/><text x="0.2989%" y="2079.50"></text></g><g><title>SerializeMany&lt;CHashWriter, COutPoint&gt; (29 samples, 0.01%)</title><rect x="0.0489%" y="2053" width="0.0131%" height="15" fill="rgb(221,193,54)" fg:x="108" fg:w="29"/><text x="0.2989%" y="2063.50"></text></g><g><title>Serialize&lt;CHashWriter, COutPoint&gt; (29 samples, 0.01%)</title><rect x="0.0489%" y="2037" width="0.0131%" height="15" fill="rgb(248,212,6)" fg:x="108" fg:w="29"/><text x="0.2989%" y="2047.50"></text></g><g><title>COutPoint::Serialize&lt;CHashWriter&gt; (29 samples, 0.01%)</title><rect x="0.0489%" y="2021" width="0.0131%" height="15" fill="rgb(208,68,35)" fg:x="108" fg:w="29"/><text x="0.2989%" y="2031.50"></text></g><g><title>COutPoint::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (29 samples, 0.01%)</title><rect x="0.0489%" y="2005" width="0.0131%" height="15" fill="rgb(232,128,0)" fg:x="108" fg:w="29"/><text x="0.2989%" y="2015.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, uint256&gt; (29 samples, 0.01%)</title><rect x="0.0489%" y="1989" width="0.0131%" height="15" fill="rgb(207,160,47)" fg:x="108" fg:w="29"/><text x="0.2989%" y="1999.50"></text></g><g><title>SerializeMany&lt;CHashWriter, uint256&gt; (29 samples, 0.01%)</title><rect x="0.0489%" y="1973" width="0.0131%" height="15" fill="rgb(228,23,34)" fg:x="108" fg:w="29"/><text x="0.2989%" y="1983.50"></text></g><g><title>Serialize&lt;CHashWriter, uint256&gt; (29 samples, 0.01%)</title><rect x="0.0489%" y="1957" width="0.0131%" height="15" fill="rgb(218,30,26)" fg:x="108" fg:w="29"/><text x="0.2989%" y="1967.50"></text></g><g><title>base_blob&lt;256u&gt;::Serialize&lt;CHashWriter&gt; (29 samples, 0.01%)</title><rect x="0.0489%" y="1941" width="0.0131%" height="15" fill="rgb(220,122,19)" fg:x="108" fg:w="29"/><text x="0.2989%" y="1951.50"></text></g><g><title>CHashWriter::write (29 samples, 0.01%)</title><rect x="0.0489%" y="1925" width="0.0131%" height="15" fill="rgb(250,228,42)" fg:x="108" fg:w="29"/><text x="0.2989%" y="1935.50"></text></g><g><title>CHash256::Write (29 samples, 0.01%)</title><rect x="0.0489%" y="1909" width="0.0131%" height="15" fill="rgb(240,193,28)" fg:x="108" fg:w="29"/><text x="0.2989%" y="1919.50"></text></g><g><title>CSHA256::Write (29 samples, 0.01%)</title><rect x="0.0489%" y="1893" width="0.0131%" height="15" fill="rgb(216,20,37)" fg:x="108" fg:w="29"/><text x="0.2989%" y="1903.50"></text></g><g><title>CTransaction::ComputeHash (31 samples, 0.01%)</title><rect x="0.0484%" y="2325" width="0.0140%" height="15" fill="rgb(206,188,39)" fg:x="107" fg:w="31"/><text x="0.2984%" y="2335.50"></text></g><g><title>SerializeHash&lt;CTransaction&gt; (31 samples, 0.01%)</title><rect x="0.0484%" y="2309" width="0.0140%" height="15" fill="rgb(217,207,13)" fg:x="107" fg:w="31"/><text x="0.2984%" y="2319.50"></text></g><g><title>CHashWriter::operator&lt;&lt; &lt;CTransaction&gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2293" width="0.0136%" height="15" fill="rgb(231,73,38)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2303.50"></text></g><g><title>Serialize&lt;CHashWriter, CTransaction&gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2277" width="0.0136%" height="15" fill="rgb(225,20,46)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2287.50"></text></g><g><title>CTransaction::Serialize&lt;CHashWriter&gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2261" width="0.0136%" height="15" fill="rgb(210,31,41)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2271.50"></text></g><g><title>SerializeTransaction&lt;CHashWriter, CTransaction&gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2245" width="0.0136%" height="15" fill="rgb(221,200,47)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2255.50"></text></g><g><title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2229" width="0.0136%" height="15" fill="rgb(226,26,5)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2239.50"></text></g><g><title>Serialize&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2213" width="0.0136%" height="15" fill="rgb(249,33,26)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2223.50"></text></g><g><title>Serialize_impl&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt;, CTxIn&gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2197" width="0.0136%" height="15" fill="rgb(235,183,28)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2207.50"></text></g><g><title>Serialize&lt;CHashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2181" width="0.0136%" height="15" fill="rgb(221,5,38)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2191.50"></text></g><g><title>Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;CHashWriter&gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2165" width="0.0136%" height="15" fill="rgb(247,18,42)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2175.50"></text></g><g><title>VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;CHashWriter, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2149" width="0.0136%" height="15" fill="rgb(241,131,45)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2159.50"></text></g><g><title>DefaultFormatter::Ser&lt;CHashWriter, CTxIn&gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2133" width="0.0136%" height="15" fill="rgb(249,31,29)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2143.50"></text></g><g><title>Serialize&lt;CHashWriter, CTxIn&gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2117" width="0.0136%" height="15" fill="rgb(225,111,53)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2127.50"></text></g><g><title>CTxIn::Serialize&lt;CHashWriter&gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2101" width="0.0136%" height="15" fill="rgb(238,160,17)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2111.50"></text></g><g><title>CTxIn::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (30 samples, 0.01%)</title><rect x="0.0489%" y="2085" width="0.0136%" height="15" fill="rgb(214,148,48)" fg:x="108" fg:w="30"/><text x="0.2989%" y="2095.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, COutPoint&gt; (43 samples, 0.02%)</title><rect x="0.0634%" y="2069" width="0.0195%" height="15" fill="rgb(232,36,49)" fg:x="140" fg:w="43"/><text x="0.3134%" y="2079.50"></text></g><g><title>SerializeMany&lt;CHashWriter, COutPoint&gt; (43 samples, 0.02%)</title><rect x="0.0634%" y="2053" width="0.0195%" height="15" fill="rgb(209,103,24)" fg:x="140" fg:w="43"/><text x="0.3134%" y="2063.50"></text></g><g><title>Serialize&lt;CHashWriter, COutPoint&gt; (43 samples, 0.02%)</title><rect x="0.0634%" y="2037" width="0.0195%" height="15" fill="rgb(229,88,8)" fg:x="140" fg:w="43"/><text x="0.3134%" y="2047.50"></text></g><g><title>COutPoint::Serialize&lt;CHashWriter&gt; (43 samples, 0.02%)</title><rect x="0.0634%" y="2021" width="0.0195%" height="15" fill="rgb(213,181,19)" fg:x="140" fg:w="43"/><text x="0.3134%" y="2031.50"></text></g><g><title>COutPoint::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (43 samples, 0.02%)</title><rect x="0.0634%" y="2005" width="0.0195%" height="15" fill="rgb(254,191,54)" fg:x="140" fg:w="43"/><text x="0.3134%" y="2015.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, uint256&gt; (43 samples, 0.02%)</title><rect x="0.0634%" y="1989" width="0.0195%" height="15" fill="rgb(241,83,37)" fg:x="140" fg:w="43"/><text x="0.3134%" y="1999.50"></text></g><g><title>SerializeMany&lt;CHashWriter, uint256&gt; (43 samples, 0.02%)</title><rect x="0.0634%" y="1973" width="0.0195%" height="15" fill="rgb(233,36,39)" fg:x="140" fg:w="43"/><text x="0.3134%" y="1983.50"></text></g><g><title>Serialize&lt;CHashWriter, uint256&gt; (43 samples, 0.02%)</title><rect x="0.0634%" y="1957" width="0.0195%" height="15" fill="rgb(226,3,54)" fg:x="140" fg:w="43"/><text x="0.3134%" y="1967.50"></text></g><g><title>base_blob&lt;256u&gt;::Serialize&lt;CHashWriter&gt; (43 samples, 0.02%)</title><rect x="0.0634%" y="1941" width="0.0195%" height="15" fill="rgb(245,192,40)" fg:x="140" fg:w="43"/><text x="0.3134%" y="1951.50"></text></g><g><title>CHashWriter::write (43 samples, 0.02%)</title><rect x="0.0634%" y="1925" width="0.0195%" height="15" fill="rgb(238,167,29)" fg:x="140" fg:w="43"/><text x="0.3134%" y="1935.50"></text></g><g><title>CHash256::Write (43 samples, 0.02%)</title><rect x="0.0634%" y="1909" width="0.0195%" height="15" fill="rgb(232,182,51)" fg:x="140" fg:w="43"/><text x="0.3134%" y="1919.50"></text></g><g><title>CSHA256::Write (43 samples, 0.02%)</title><rect x="0.0634%" y="1893" width="0.0195%" height="15" fill="rgb(231,60,39)" fg:x="140" fg:w="43"/><text x="0.3134%" y="1903.50"></text></g><g><title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (45 samples, 0.02%)</title><rect x="0.0634%" y="2229" width="0.0204%" height="15" fill="rgb(208,69,12)" fg:x="140" fg:w="45"/><text x="0.3134%" y="2239.50"></text></g><g><title>Serialize&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (45 samples, 0.02%)</title><rect x="0.0634%" y="2213" width="0.0204%" height="15" fill="rgb(235,93,37)" fg:x="140" fg:w="45"/><text x="0.3134%" y="2223.50"></text></g><g><title>Serialize_impl&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt;, CTxIn&gt; (45 samples, 0.02%)</title><rect x="0.0634%" y="2197" width="0.0204%" height="15" fill="rgb(213,116,39)" fg:x="140" fg:w="45"/><text x="0.3134%" y="2207.50"></text></g><g><title>Serialize&lt;CHashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (45 samples, 0.02%)</title><rect x="0.0634%" y="2181" width="0.0204%" height="15" fill="rgb(222,207,29)" fg:x="140" fg:w="45"/><text x="0.3134%" y="2191.50"></text></g><g><title>Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;CHashWriter&gt; (45 samples, 0.02%)</title><rect x="0.0634%" y="2165" width="0.0204%" height="15" fill="rgb(206,96,30)" fg:x="140" fg:w="45"/><text x="0.3134%" y="2175.50"></text></g><g><title>VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;CHashWriter, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (45 samples, 0.02%)</title><rect x="0.0634%" y="2149" width="0.0204%" height="15" fill="rgb(218,138,4)" fg:x="140" fg:w="45"/><text x="0.3134%" y="2159.50"></text></g><g><title>DefaultFormatter::Ser&lt;CHashWriter, CTxIn&gt; (45 samples, 0.02%)</title><rect x="0.0634%" y="2133" width="0.0204%" height="15" fill="rgb(250,191,14)" fg:x="140" fg:w="45"/><text x="0.3134%" y="2143.50"></text></g><g><title>Serialize&lt;CHashWriter, CTxIn&gt; (45 samples, 0.02%)</title><rect x="0.0634%" y="2117" width="0.0204%" height="15" fill="rgb(239,60,40)" fg:x="140" fg:w="45"/><text x="0.3134%" y="2127.50"></text></g><g><title>CTxIn::Serialize&lt;CHashWriter&gt; (45 samples, 0.02%)</title><rect x="0.0634%" y="2101" width="0.0204%" height="15" fill="rgb(206,27,48)" fg:x="140" fg:w="45"/><text x="0.3134%" y="2111.50"></text></g><g><title>CTxIn::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (45 samples, 0.02%)</title><rect x="0.0634%" y="2085" width="0.0204%" height="15" fill="rgb(225,35,8)" fg:x="140" fg:w="45"/><text x="0.3134%" y="2095.50"></text></g><g><title>SerializeHash&lt;CTransaction&gt; (62 samples, 0.03%)</title><rect x="0.0629%" y="2309" width="0.0281%" height="15" fill="rgb(250,213,24)" fg:x="139" fg:w="62"/><text x="0.3129%" y="2319.50"></text></g><g><title>CHashWriter::operator&lt;&lt; &lt;CTransaction&gt; (62 samples, 0.03%)</title><rect x="0.0629%" y="2293" width="0.0281%" height="15" fill="rgb(247,123,22)" fg:x="139" fg:w="62"/><text x="0.3129%" y="2303.50"></text></g><g><title>Serialize&lt;CHashWriter, CTransaction&gt; (62 samples, 0.03%)</title><rect x="0.0629%" y="2277" width="0.0281%" height="15" fill="rgb(231,138,38)" fg:x="139" fg:w="62"/><text x="0.3129%" y="2287.50"></text></g><g><title>CTransaction::Serialize&lt;CHashWriter&gt; (62 samples, 0.03%)</title><rect x="0.0629%" y="2261" width="0.0281%" height="15" fill="rgb(231,145,46)" fg:x="139" fg:w="62"/><text x="0.3129%" y="2271.50"></text></g><g><title>SerializeTransaction&lt;CHashWriter, CTransaction&gt; (62 samples, 0.03%)</title><rect x="0.0629%" y="2245" width="0.0281%" height="15" fill="rgb(251,118,11)" fg:x="139" fg:w="62"/><text x="0.3129%" y="2255.50"></text></g><g><title>CTransaction::ComputeWitnessHash (64 samples, 0.03%)</title><rect x="0.0625%" y="2325" width="0.0290%" height="15" fill="rgb(217,147,25)" fg:x="138" fg:w="64"/><text x="0.3125%" y="2335.50"></text></g><g><title>WriteCompactSize&lt;CHashWriter&gt; (34 samples, 0.02%)</title><rect x="0.0946%" y="2325" width="0.0154%" height="15" fill="rgb(247,81,37)" fg:x="209" fg:w="34"/><text x="0.3446%" y="2335.50"></text></g><g><title>ser_writedata8&lt;CHashWriter&gt; (34 samples, 0.02%)</title><rect x="0.0946%" y="2309" width="0.0154%" height="15" fill="rgb(209,12,38)" fg:x="209" fg:w="34"/><text x="0.3446%" y="2319.50"></text></g><g><title>CHashWriter::write (34 samples, 0.02%)</title><rect x="0.0946%" y="2293" width="0.0154%" height="15" fill="rgb(227,1,9)" fg:x="209" fg:w="34"/><text x="0.3446%" y="2303.50"></text></g><g><title>CHash256::Write (34 samples, 0.02%)</title><rect x="0.0946%" y="2277" width="0.0154%" height="15" fill="rgb(248,47,43)" fg:x="209" fg:w="34"/><text x="0.3446%" y="2287.50"></text></g><g><title>CSHA256::Write (34 samples, 0.02%)</title><rect x="0.0946%" y="2261" width="0.0154%" height="15" fill="rgb(221,10,30)" fg:x="209" fg:w="34"/><text x="0.3446%" y="2271.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxOut as core::clone::Clone&gt;::clone (68 samples, 0.03%)</title><rect x="0.1204%" y="1621" width="0.0308%" height="15" fill="rgb(210,229,1)" fg:x="266" fg:w="68"/><text x="0.3704%" y="1631.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as core::clone::Clone&gt;::clone (68 samples, 0.03%)</title><rect x="0.1204%" y="1605" width="0.0308%" height="15" fill="rgb(222,148,37)" fg:x="266" fg:w="68"/><text x="0.3704%" y="1615.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (68 samples, 0.03%)</title><rect x="0.1204%" y="1589" width="0.0308%" height="15" fill="rgb(234,67,33)" fg:x="266" fg:w="68"/><text x="0.3704%" y="1599.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (68 samples, 0.03%)</title><rect x="0.1204%" y="1573" width="0.0308%" height="15" fill="rgb(247,98,35)" fg:x="266" fg:w="68"/><text x="0.3704%" y="1583.50"></text></g><g><title>alloc::slice::hack::to_vec (68 samples, 0.03%)</title><rect x="0.1204%" y="1557" width="0.0308%" height="15" fill="rgb(247,138,52)" fg:x="266" fg:w="68"/><text x="0.3704%" y="1567.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (68 samples, 0.03%)</title><rect x="0.1204%" y="1541" width="0.0308%" height="15" fill="rgb(213,79,30)" fg:x="266" fg:w="68"/><text x="0.3704%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (68 samples, 0.03%)</title><rect x="0.1204%" y="1525" width="0.0308%" height="15" fill="rgb(246,177,23)" fg:x="266" fg:w="68"/><text x="0.3704%" y="1535.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (68 samples, 0.03%)</title><rect x="0.1204%" y="1509" width="0.0308%" height="15" fill="rgb(230,62,27)" fg:x="266" fg:w="68"/><text x="0.3704%" y="1519.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (68 samples, 0.03%)</title><rect x="0.1204%" y="1493" width="0.0308%" height="15" fill="rgb(216,154,8)" fg:x="266" fg:w="68"/><text x="0.3704%" y="1503.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (68 samples, 0.03%)</title><rect x="0.1204%" y="1477" width="0.0308%" height="15" fill="rgb(244,35,45)" fg:x="266" fg:w="68"/><text x="0.3704%" y="1487.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (68 samples, 0.03%)</title><rect x="0.1204%" y="1461" width="0.0308%" height="15" fill="rgb(251,115,12)" fg:x="266" fg:w="68"/><text x="0.3704%" y="1471.50"></text></g><g><title>alloc::alloc::alloc (68 samples, 0.03%)</title><rect x="0.1204%" y="1445" width="0.0308%" height="15" fill="rgb(240,54,50)" fg:x="266" fg:w="68"/><text x="0.3704%" y="1455.50"></text></g><g><title>malloc (66 samples, 0.03%)</title><rect x="0.1213%" y="1429" width="0.0299%" height="15" fill="rgb(233,84,52)" fg:x="268" fg:w="66"/><text x="0.3713%" y="1439.50"></text></g><g><title>[libc.so.6] (54 samples, 0.02%)</title><rect x="0.1267%" y="1413" width="0.0244%" height="15" fill="rgb(207,117,47)" fg:x="280" fg:w="54"/><text x="0.3767%" y="1423.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (38 samples, 0.02%)</title><rect x="0.1598%" y="1333" width="0.0172%" height="15" fill="rgb(249,43,39)" fg:x="353" fg:w="38"/><text x="0.4098%" y="1343.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.02%)</title><rect x="0.1598%" y="1317" width="0.0172%" height="15" fill="rgb(209,38,44)" fg:x="353" fg:w="38"/><text x="0.4098%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (38 samples, 0.02%)</title><rect x="0.1598%" y="1301" width="0.0172%" height="15" fill="rgb(236,212,23)" fg:x="353" fg:w="38"/><text x="0.4098%" y="1311.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.02%)</title><rect x="0.1602%" y="1285" width="0.0167%" height="15" fill="rgb(242,79,21)" fg:x="354" fg:w="37"/><text x="0.4102%" y="1295.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.02%)</title><rect x="0.1602%" y="1269" width="0.0167%" height="15" fill="rgb(211,96,35)" fg:x="354" fg:w="37"/><text x="0.4102%" y="1279.50"></text></g><g><title>alloc::alloc::alloc (37 samples, 0.02%)</title><rect x="0.1602%" y="1253" width="0.0167%" height="15" fill="rgb(253,215,40)" fg:x="354" fg:w="37"/><text x="0.4102%" y="1263.50"></text></g><g><title>malloc (34 samples, 0.02%)</title><rect x="0.1616%" y="1237" width="0.0154%" height="15" fill="rgb(211,81,21)" fg:x="357" fg:w="34"/><text x="0.4116%" y="1247.50"></text></g><g><title>[libc.so.6] (24 samples, 0.01%)</title><rect x="0.1661%" y="1221" width="0.0109%" height="15" fill="rgb(208,190,38)" fg:x="367" fg:w="24"/><text x="0.4161%" y="1231.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxIn as core::clone::Clone&gt;::clone (56 samples, 0.03%)</title><rect x="0.1575%" y="1429" width="0.0253%" height="15" fill="rgb(235,213,38)" fg:x="348" fg:w="56"/><text x="0.4075%" y="1439.50"></text></g><g><title>&lt;bitcoin::blockdata::witness::Witness as core::clone::Clone&gt;::clone (51 samples, 0.02%)</title><rect x="0.1598%" y="1413" width="0.0231%" height="15" fill="rgb(237,122,38)" fg:x="353" fg:w="51"/><text x="0.4098%" y="1423.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (51 samples, 0.02%)</title><rect x="0.1598%" y="1397" width="0.0231%" height="15" fill="rgb(244,218,35)" fg:x="353" fg:w="51"/><text x="0.4098%" y="1407.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (51 samples, 0.02%)</title><rect x="0.1598%" y="1381" width="0.0231%" height="15" fill="rgb(240,68,47)" fg:x="353" fg:w="51"/><text x="0.4098%" y="1391.50"></text></g><g><title>alloc::slice::hack::to_vec (51 samples, 0.02%)</title><rect x="0.1598%" y="1365" width="0.0231%" height="15" fill="rgb(210,16,53)" fg:x="353" fg:w="51"/><text x="0.4098%" y="1375.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (51 samples, 0.02%)</title><rect x="0.1598%" y="1349" width="0.0231%" height="15" fill="rgb(235,124,12)" fg:x="353" fg:w="51"/><text x="0.4098%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (62 samples, 0.03%)</title><rect x="0.1837%" y="1333" width="0.0281%" height="15" fill="rgb(224,169,11)" fg:x="406" fg:w="62"/><text x="0.4337%" y="1343.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (62 samples, 0.03%)</title><rect x="0.1837%" y="1317" width="0.0281%" height="15" fill="rgb(250,166,2)" fg:x="406" fg:w="62"/><text x="0.4337%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (62 samples, 0.03%)</title><rect x="0.1837%" y="1301" width="0.0281%" height="15" fill="rgb(242,216,29)" fg:x="406" fg:w="62"/><text x="0.4337%" y="1311.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (62 samples, 0.03%)</title><rect x="0.1837%" y="1285" width="0.0281%" height="15" fill="rgb(230,116,27)" fg:x="406" fg:w="62"/><text x="0.4337%" y="1295.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (62 samples, 0.03%)</title><rect x="0.1837%" y="1269" width="0.0281%" height="15" fill="rgb(228,99,48)" fg:x="406" fg:w="62"/><text x="0.4337%" y="1279.50"></text></g><g><title>alloc::alloc::alloc (62 samples, 0.03%)</title><rect x="0.1837%" y="1253" width="0.0281%" height="15" fill="rgb(253,11,6)" fg:x="406" fg:w="62"/><text x="0.4337%" y="1263.50"></text></g><g><title>malloc (62 samples, 0.03%)</title><rect x="0.1837%" y="1237" width="0.0281%" height="15" fill="rgb(247,143,39)" fg:x="406" fg:w="62"/><text x="0.4337%" y="1247.50"></text></g><g><title>[libc.so.6] (48 samples, 0.02%)</title><rect x="0.1901%" y="1221" width="0.0217%" height="15" fill="rgb(236,97,10)" fg:x="420" fg:w="48"/><text x="0.4401%" y="1231.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxOut as core::clone::Clone&gt;::clone (76 samples, 0.03%)</title><rect x="0.1828%" y="1429" width="0.0344%" height="15" fill="rgb(233,208,19)" fg:x="404" fg:w="76"/><text x="0.4328%" y="1439.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as core::clone::Clone&gt;::clone (74 samples, 0.03%)</title><rect x="0.1837%" y="1413" width="0.0335%" height="15" fill="rgb(216,164,2)" fg:x="406" fg:w="74"/><text x="0.4337%" y="1423.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (74 samples, 0.03%)</title><rect x="0.1837%" y="1397" width="0.0335%" height="15" fill="rgb(220,129,5)" fg:x="406" fg:w="74"/><text x="0.4337%" y="1407.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (74 samples, 0.03%)</title><rect x="0.1837%" y="1381" width="0.0335%" height="15" fill="rgb(242,17,10)" fg:x="406" fg:w="74"/><text x="0.4337%" y="1391.50"></text></g><g><title>alloc::slice::hack::to_vec (74 samples, 0.03%)</title><rect x="0.1837%" y="1365" width="0.0335%" height="15" fill="rgb(242,107,0)" fg:x="406" fg:w="74"/><text x="0.4337%" y="1375.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (74 samples, 0.03%)</title><rect x="0.1837%" y="1349" width="0.0335%" height="15" fill="rgb(251,28,31)" fg:x="406" fg:w="74"/><text x="0.4337%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (65 samples, 0.03%)</title><rect x="0.2177%" y="1429" width="0.0294%" height="15" fill="rgb(233,223,10)" fg:x="481" fg:w="65"/><text x="0.4677%" y="1439.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (65 samples, 0.03%)</title><rect x="0.2177%" y="1413" width="0.0294%" height="15" fill="rgb(215,21,27)" fg:x="481" fg:w="65"/><text x="0.4677%" y="1423.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (65 samples, 0.03%)</title><rect x="0.2177%" y="1397" width="0.0294%" height="15" fill="rgb(232,23,21)" fg:x="481" fg:w="65"/><text x="0.4677%" y="1407.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (65 samples, 0.03%)</title><rect x="0.2177%" y="1381" width="0.0294%" height="15" fill="rgb(244,5,23)" fg:x="481" fg:w="65"/><text x="0.4677%" y="1391.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (65 samples, 0.03%)</title><rect x="0.2177%" y="1365" width="0.0294%" height="15" fill="rgb(226,81,46)" fg:x="481" fg:w="65"/><text x="0.4677%" y="1375.50"></text></g><g><title>alloc::alloc::alloc (65 samples, 0.03%)</title><rect x="0.2177%" y="1349" width="0.0294%" height="15" fill="rgb(247,70,30)" fg:x="481" fg:w="65"/><text x="0.4677%" y="1359.50"></text></g><g><title>malloc (62 samples, 0.03%)</title><rect x="0.2190%" y="1333" width="0.0281%" height="15" fill="rgb(212,68,19)" fg:x="484" fg:w="62"/><text x="0.4690%" y="1343.50"></text></g><g><title>[libc.so.6] (48 samples, 0.02%)</title><rect x="0.2254%" y="1317" width="0.0217%" height="15" fill="rgb(240,187,13)" fg:x="498" fg:w="48"/><text x="0.4754%" y="1327.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::Transaction as core::clone::Clone&gt;::clone (202 samples, 0.09%)</title><rect x="0.1566%" y="1509" width="0.0914%" height="15" fill="rgb(223,113,26)" fg:x="346" fg:w="202"/><text x="0.4066%" y="1519.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (202 samples, 0.09%)</title><rect x="0.1566%" y="1493" width="0.0914%" height="15" fill="rgb(206,192,2)" fg:x="346" fg:w="202"/><text x="0.4066%" y="1503.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (201 samples, 0.09%)</title><rect x="0.1570%" y="1477" width="0.0910%" height="15" fill="rgb(241,108,4)" fg:x="347" fg:w="201"/><text x="0.4070%" y="1487.50"></text></g><g><title>alloc::slice::hack::to_vec (201 samples, 0.09%)</title><rect x="0.1570%" y="1461" width="0.0910%" height="15" fill="rgb(247,173,49)" fg:x="347" fg:w="201"/><text x="0.4070%" y="1471.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (201 samples, 0.09%)</title><rect x="0.1570%" y="1445" width="0.0910%" height="15" fill="rgb(224,114,35)" fg:x="347" fg:w="201"/><text x="0.4070%" y="1455.50"></text></g><g><title>[libc.so.6] (29 samples, 0.01%)</title><rect x="0.2548%" y="1381" width="0.0131%" height="15" fill="rgb(245,159,27)" fg:x="563" fg:w="29"/><text x="0.5048%" y="1391.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (44 samples, 0.02%)</title><rect x="0.2485%" y="1509" width="0.0199%" height="15" fill="rgb(245,172,44)" fg:x="549" fg:w="44"/><text x="0.4985%" y="1519.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (44 samples, 0.02%)</title><rect x="0.2485%" y="1493" width="0.0199%" height="15" fill="rgb(236,23,11)" fg:x="549" fg:w="44"/><text x="0.4985%" y="1503.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (44 samples, 0.02%)</title><rect x="0.2485%" y="1477" width="0.0199%" height="15" fill="rgb(205,117,38)" fg:x="549" fg:w="44"/><text x="0.4985%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44 samples, 0.02%)</title><rect x="0.2485%" y="1461" width="0.0199%" height="15" fill="rgb(237,72,25)" fg:x="549" fg:w="44"/><text x="0.4985%" y="1471.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44 samples, 0.02%)</title><rect x="0.2485%" y="1445" width="0.0199%" height="15" fill="rgb(244,70,9)" fg:x="549" fg:w="44"/><text x="0.4985%" y="1455.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.02%)</title><rect x="0.2485%" y="1429" width="0.0199%" height="15" fill="rgb(217,125,39)" fg:x="549" fg:w="44"/><text x="0.4985%" y="1439.50"></text></g><g><title>malloc (43 samples, 0.02%)</title><rect x="0.2489%" y="1413" width="0.0195%" height="15" fill="rgb(235,36,10)" fg:x="550" fg:w="43"/><text x="0.4989%" y="1423.50"></text></g><g><title>[libc.so.6] (43 samples, 0.02%)</title><rect x="0.2489%" y="1397" width="0.0195%" height="15" fill="rgb(251,123,47)" fg:x="550" fg:w="43"/><text x="0.4989%" y="1407.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (250 samples, 0.11%)</title><rect x="0.1566%" y="1605" width="0.1131%" height="15" fill="rgb(221,13,13)" fg:x="346" fg:w="250"/><text x="0.4066%" y="1615.50"></text></g><g><title>&lt;bitcoin::blockdata::block::Block as core::clone::Clone&gt;::clone (250 samples, 0.11%)</title><rect x="0.1566%" y="1589" width="0.1131%" height="15" fill="rgb(238,131,9)" fg:x="346" fg:w="250"/><text x="0.4066%" y="1599.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (250 samples, 0.11%)</title><rect x="0.1566%" y="1573" width="0.1131%" height="15" fill="rgb(211,50,8)" fg:x="346" fg:w="250"/><text x="0.4066%" y="1583.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (250 samples, 0.11%)</title><rect x="0.1566%" y="1557" width="0.1131%" height="15" fill="rgb(245,182,24)" fg:x="346" fg:w="250"/><text x="0.4066%" y="1567.50"></text></g><g><title>alloc::slice::hack::to_vec (250 samples, 0.11%)</title><rect x="0.1566%" y="1541" width="0.1131%" height="15" fill="rgb(242,14,37)" fg:x="346" fg:w="250"/><text x="0.4066%" y="1551.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (250 samples, 0.11%)</title><rect x="0.1566%" y="1525" width="0.1131%" height="15" fill="rgb(246,228,12)" fg:x="346" fg:w="250"/><text x="0.4066%" y="1535.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (40 samples, 0.02%)</title><rect x="0.2706%" y="1573" width="0.0181%" height="15" fill="rgb(213,55,15)" fg:x="598" fg:w="40"/><text x="0.5206%" y="1583.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (40 samples, 0.02%)</title><rect x="0.2706%" y="1557" width="0.0181%" height="15" fill="rgb(209,9,3)" fg:x="598" fg:w="40"/><text x="0.5206%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;(bitcoin::blockdata::transaction::OutPoint,bitcoin::blockdata::transaction::TxOut)&gt; (40 samples, 0.02%)</title><rect x="0.2706%" y="1541" width="0.0181%" height="15" fill="rgb(230,59,30)" fg:x="598" fg:w="40"/><text x="0.5206%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::transaction::TxOut&gt; (40 samples, 0.02%)</title><rect x="0.2706%" y="1525" width="0.0181%" height="15" fill="rgb(209,121,21)" fg:x="598" fg:w="40"/><text x="0.5206%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::script::Script&gt; (40 samples, 0.02%)</title><rect x="0.2706%" y="1509" width="0.0181%" height="15" fill="rgb(220,109,13)" fg:x="598" fg:w="40"/><text x="0.5206%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u8]&gt;&gt; (40 samples, 0.02%)</title><rect x="0.2706%" y="1493" width="0.0181%" height="15" fill="rgb(232,18,1)" fg:x="598" fg:w="40"/><text x="0.5206%" y="1503.50"></text></g><g><title>alloc::alloc::box_free (40 samples, 0.02%)</title><rect x="0.2706%" y="1477" width="0.0181%" height="15" fill="rgb(215,41,42)" fg:x="598" fg:w="40"/><text x="0.5206%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (40 samples, 0.02%)</title><rect x="0.2706%" y="1461" width="0.0181%" height="15" fill="rgb(224,123,36)" fg:x="598" fg:w="40"/><text x="0.5206%" y="1471.50"></text></g><g><title>alloc::alloc::dealloc (40 samples, 0.02%)</title><rect x="0.2706%" y="1445" width="0.0181%" height="15" fill="rgb(240,125,3)" fg:x="598" fg:w="40"/><text x="0.5206%" y="1455.50"></text></g><g><title>cfree (39 samples, 0.02%)</title><rect x="0.2711%" y="1429" width="0.0177%" height="15" fill="rgb(205,98,50)" fg:x="599" fg:w="39"/><text x="0.5211%" y="1439.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (42 samples, 0.02%)</title><rect x="0.2706%" y="1589" width="0.0190%" height="15" fill="rgb(205,185,37)" fg:x="598" fg:w="42"/><text x="0.5206%" y="1599.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.02%)</title><rect x="0.2702%" y="1605" width="0.0199%" height="15" fill="rgb(238,207,15)" fg:x="597" fg:w="44"/><text x="0.5202%" y="1615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.02%)</title><rect x="0.3114%" y="1093" width="0.0181%" height="15" fill="rgb(213,199,42)" fg:x="688" fg:w="40"/><text x="0.5614%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;[sled::ivec::IVec]&gt; (40 samples, 0.02%)</title><rect x="0.3114%" y="1077" width="0.0181%" height="15" fill="rgb(235,201,11)" fg:x="688" fg:w="40"/><text x="0.5614%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::ivec::IVec&gt; (40 samples, 0.02%)</title><rect x="0.3114%" y="1061" width="0.0181%" height="15" fill="rgb(207,46,11)" fg:x="688" fg:w="40"/><text x="0.5614%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::ivec::IVecInner&gt; (40 samples, 0.02%)</title><rect x="0.3114%" y="1045" width="0.0181%" height="15" fill="rgb(241,35,35)" fg:x="688" fg:w="40"/><text x="0.5614%" y="1055.50"></text></g><g><title>&lt;sled::arc::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.02%)</title><rect x="0.3123%" y="1029" width="0.0172%" height="15" fill="rgb(243,32,47)" fg:x="690" fg:w="38"/><text x="0.5623%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::node::Data&gt; (42 samples, 0.02%)</title><rect x="0.3109%" y="1141" width="0.0190%" height="15" fill="rgb(247,202,23)" fg:x="687" fg:w="42"/><text x="0.5609%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::node::Leaf&gt; (41 samples, 0.02%)</title><rect x="0.3114%" y="1125" width="0.0186%" height="15" fill="rgb(219,102,11)" fg:x="688" fg:w="41"/><text x="0.5614%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;sled::ivec::IVec&gt;&gt; (41 samples, 0.02%)</title><rect x="0.3114%" y="1109" width="0.0186%" height="15" fill="rgb(243,110,44)" fg:x="688" fg:w="41"/><text x="0.5614%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::atomic::Owned&lt;sled::pagecache::Page&gt;&gt; (57 samples, 0.03%)</title><rect x="0.3050%" y="1269" width="0.0258%" height="15" fill="rgb(222,74,54)" fg:x="674" fg:w="57"/><text x="0.5550%" y="1279.50"></text></g><g><title>&lt;crossbeam_epoch::atomic::Owned&lt;T&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.03%)</title><rect x="0.3050%" y="1253" width="0.0258%" height="15" fill="rgb(216,99,12)" fg:x="674" fg:w="57"/><text x="0.5550%" y="1263.50"></text></g><g><title>&lt;T as crossbeam_epoch::atomic::Pointable&gt;::drop (57 samples, 0.03%)</title><rect x="0.3050%" y="1237" width="0.0258%" height="15" fill="rgb(226,22,26)" fg:x="674" fg:w="57"/><text x="0.5550%" y="1247.50"></text></g><g><title>core::mem::drop (57 samples, 0.03%)</title><rect x="0.3050%" y="1221" width="0.0258%" height="15" fill="rgb(217,163,10)" fg:x="674" fg:w="57"/><text x="0.5550%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Page&gt;&gt; (57 samples, 0.03%)</title><rect x="0.3050%" y="1205" width="0.0258%" height="15" fill="rgb(213,25,53)" fg:x="674" fg:w="57"/><text x="0.5550%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::pagecache::Page&gt; (51 samples, 0.02%)</title><rect x="0.3077%" y="1189" width="0.0231%" height="15" fill="rgb(252,105,26)" fg:x="680" fg:w="51"/><text x="0.5577%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt;&gt; (51 samples, 0.02%)</title><rect x="0.3077%" y="1173" width="0.0231%" height="15" fill="rgb(220,39,43)" fg:x="680" fg:w="51"/><text x="0.5577%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt; (46 samples, 0.02%)</title><rect x="0.3100%" y="1157" width="0.0208%" height="15" fill="rgb(229,68,48)" fg:x="685" fg:w="46"/><text x="0.5600%" y="1167.50"></text></g><g><title>core::mem::drop (59 samples, 0.03%)</title><rect x="0.3050%" y="1397" width="0.0267%" height="15" fill="rgb(252,8,32)" fg:x="674" fg:w="59"/><text x="0.5550%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::SealedBag&gt; (59 samples, 0.03%)</title><rect x="0.3050%" y="1381" width="0.0267%" height="15" fill="rgb(223,20,43)" fg:x="674" fg:w="59"/><text x="0.5550%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::Bag&gt; (59 samples, 0.03%)</title><rect x="0.3050%" y="1365" width="0.0267%" height="15" fill="rgb(229,81,49)" fg:x="674" fg:w="59"/><text x="0.5550%" y="1375.50"></text></g><g><title>&lt;crossbeam_epoch::internal::Bag as core::ops::drop::Drop&gt;::drop (59 samples, 0.03%)</title><rect x="0.3050%" y="1349" width="0.0267%" height="15" fill="rgb(236,28,36)" fg:x="674" fg:w="59"/><text x="0.5550%" y="1359.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::call (59 samples, 0.03%)</title><rect x="0.3050%" y="1333" width="0.0267%" height="15" fill="rgb(249,185,26)" fg:x="674" fg:w="59"/><text x="0.5550%" y="1343.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::new::call (59 samples, 0.03%)</title><rect x="0.3050%" y="1317" width="0.0267%" height="15" fill="rgb(249,174,33)" fg:x="674" fg:w="59"/><text x="0.5550%" y="1327.50"></text></g><g><title>crossbeam_epoch::guard::Guard::defer_unchecked::{{closure}} (59 samples, 0.03%)</title><rect x="0.3050%" y="1301" width="0.0267%" height="15" fill="rgb(233,201,37)" fg:x="674" fg:w="59"/><text x="0.5550%" y="1311.50"></text></g><g><title>core::mem::drop (59 samples, 0.03%)</title><rect x="0.3050%" y="1285" width="0.0267%" height="15" fill="rgb(221,78,26)" fg:x="674" fg:w="59"/><text x="0.5550%" y="1295.50"></text></g><g><title>sled::pin (64 samples, 0.03%)</title><rect x="0.3037%" y="1541" width="0.0290%" height="15" fill="rgb(250,127,30)" fg:x="671" fg:w="64"/><text x="0.5537%" y="1551.50"></text></g><g><title>crossbeam_epoch::default::pin (64 samples, 0.03%)</title><rect x="0.3037%" y="1525" width="0.0290%" height="15" fill="rgb(230,49,44)" fg:x="671" fg:w="64"/><text x="0.5537%" y="1535.50"></text></g><g><title>crossbeam_epoch::default::with_handle (64 samples, 0.03%)</title><rect x="0.3037%" y="1509" width="0.0290%" height="15" fill="rgb(229,67,23)" fg:x="671" fg:w="64"/><text x="0.5537%" y="1519.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (64 samples, 0.03%)</title><rect x="0.3037%" y="1493" width="0.0290%" height="15" fill="rgb(249,83,47)" fg:x="671" fg:w="64"/><text x="0.5537%" y="1503.50"></text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (63 samples, 0.03%)</title><rect x="0.3041%" y="1477" width="0.0285%" height="15" fill="rgb(215,43,3)" fg:x="672" fg:w="63"/><text x="0.5541%" y="1487.50"></text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (63 samples, 0.03%)</title><rect x="0.3041%" y="1461" width="0.0285%" height="15" fill="rgb(238,154,13)" fg:x="672" fg:w="63"/><text x="0.5541%" y="1471.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (63 samples, 0.03%)</title><rect x="0.3041%" y="1445" width="0.0285%" height="15" fill="rgb(219,56,2)" fg:x="672" fg:w="63"/><text x="0.5541%" y="1455.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (63 samples, 0.03%)</title><rect x="0.3041%" y="1429" width="0.0285%" height="15" fill="rgb(233,0,4)" fg:x="672" fg:w="63"/><text x="0.5541%" y="1439.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (61 samples, 0.03%)</title><rect x="0.3050%" y="1413" width="0.0276%" height="15" fill="rgb(235,30,7)" fg:x="674" fg:w="61"/><text x="0.5550%" y="1423.50"></text></g><g><title>sled::node::Node::index_next_node (24 samples, 0.01%)</title><rect x="0.3426%" y="1509" width="0.0109%" height="15" fill="rgb(250,79,13)" fg:x="757" fg:w="24"/><text x="0.5926%" y="1519.50"></text></g><g><title>ZSTD_HcFindBestMatch_noDict_4 (48 samples, 0.02%)</title><rect x="0.3860%" y="1221" width="0.0217%" height="15" fill="rgb(211,146,34)" fg:x="853" fg:w="48"/><text x="0.6360%" y="1231.50"></text></g><g><title>ZSTD_HcFindBestMatch (41 samples, 0.02%)</title><rect x="0.3892%" y="1205" width="0.0186%" height="15" fill="rgb(228,22,38)" fg:x="860" fg:w="41"/><text x="0.6392%" y="1215.50"></text></g><g><title>ZSTD_buildSeqStore (67 samples, 0.03%)</title><rect x="0.3788%" y="1269" width="0.0303%" height="15" fill="rgb(235,168,5)" fg:x="837" fg:w="67"/><text x="0.6288%" y="1279.50"></text></g><g><title>ZSTD_compressBlock_lazy (67 samples, 0.03%)</title><rect x="0.3788%" y="1253" width="0.0303%" height="15" fill="rgb(221,155,16)" fg:x="837" fg:w="67"/><text x="0.6288%" y="1263.50"></text></g><g><title>ZSTD_compressBlock_lazy_generic (67 samples, 0.03%)</title><rect x="0.3788%" y="1237" width="0.0303%" height="15" fill="rgb(215,215,53)" fg:x="837" fg:w="67"/><text x="0.6288%" y="1247.50"></text></g><g><title>ZSTD_compressLiterals (34 samples, 0.02%)</title><rect x="0.4150%" y="1237" width="0.0154%" height="15" fill="rgb(223,4,10)" fg:x="917" fg:w="34"/><text x="0.6650%" y="1247.50"></text></g><g><title>HUF_compress4X_repeat (32 samples, 0.01%)</title><rect x="0.4159%" y="1221" width="0.0145%" height="15" fill="rgb(234,103,6)" fg:x="919" fg:w="32"/><text x="0.6659%" y="1231.50"></text></g><g><title>HUF_compress_internal (32 samples, 0.01%)</title><rect x="0.4159%" y="1205" width="0.0145%" height="15" fill="rgb(227,97,0)" fg:x="919" fg:w="32"/><text x="0.6659%" y="1215.50"></text></g><g><title>ZSTD_compressEnd (115 samples, 0.05%)</title><rect x="0.3788%" y="1333" width="0.0520%" height="15" fill="rgb(234,150,53)" fg:x="837" fg:w="115"/><text x="0.6288%" y="1343.50"></text></g><g><title>ZSTD_compressContinue_internal (115 samples, 0.05%)</title><rect x="0.3788%" y="1317" width="0.0520%" height="15" fill="rgb(228,201,54)" fg:x="837" fg:w="115"/><text x="0.6288%" y="1327.50"></text></g><g><title>ZSTD_compress_frameChunk (115 samples, 0.05%)</title><rect x="0.3788%" y="1301" width="0.0520%" height="15" fill="rgb(222,22,37)" fg:x="837" fg:w="115"/><text x="0.6288%" y="1311.50"></text></g><g><title>ZSTD_compressBlock_internal (115 samples, 0.05%)</title><rect x="0.3788%" y="1285" width="0.0520%" height="15" fill="rgb(237,53,32)" fg:x="837" fg:w="115"/><text x="0.6288%" y="1295.50"></text></g><g><title>ZSTD_entropyCompressSeqStore (48 samples, 0.02%)</title><rect x="0.4091%" y="1269" width="0.0217%" height="15" fill="rgb(233,25,53)" fg:x="904" fg:w="48"/><text x="0.6591%" y="1279.50"></text></g><g><title>ZSTD_entropyCompressSeqStore_internal (48 samples, 0.02%)</title><rect x="0.4091%" y="1253" width="0.0217%" height="15" fill="rgb(210,40,34)" fg:x="904" fg:w="48"/><text x="0.6591%" y="1263.50"></text></g><g><title>zstd::block::compressor::Compressor::compress (126 samples, 0.06%)</title><rect x="0.3783%" y="1413" width="0.0570%" height="15" fill="rgb(241,220,44)" fg:x="836" fg:w="126"/><text x="0.6283%" y="1423.50"></text></g><g><title>zstd::block::compressor::Compressor::compress_to_buffer (125 samples, 0.06%)</title><rect x="0.3788%" y="1397" width="0.0566%" height="15" fill="rgb(235,28,35)" fg:x="837" fg:w="125"/><text x="0.6288%" y="1407.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict (125 samples, 0.06%)</title><rect x="0.3788%" y="1381" width="0.0566%" height="15" fill="rgb(210,56,17)" fg:x="837" fg:w="125"/><text x="0.6288%" y="1391.50"></text></g><g><title>zstd_safe::WriteBuf::write_from (125 samples, 0.06%)</title><rect x="0.3788%" y="1365" width="0.0566%" height="15" fill="rgb(224,130,29)" fg:x="837" fg:w="125"/><text x="0.6288%" y="1375.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict::{{closure}} (125 samples, 0.06%)</title><rect x="0.3788%" y="1349" width="0.0566%" height="15" fill="rgb(235,212,8)" fg:x="837" fg:w="125"/><text x="0.6288%" y="1359.50"></text></g><g><title>sled::pagecache::logger::Log::reserve (141 samples, 0.06%)</title><rect x="0.3752%" y="1445" width="0.0638%" height="15" fill="rgb(223,33,50)" fg:x="829" fg:w="141"/><text x="0.6252%" y="1455.50"></text></g><g><title>zstd::block::compress (134 samples, 0.06%)</title><rect x="0.3783%" y="1429" width="0.0606%" height="15" fill="rgb(219,149,13)" fg:x="836" fg:w="134"/><text x="0.6283%" y="1439.50"></text></g><g><title>sled::pagecache::PageCache::cas_page (154 samples, 0.07%)</title><rect x="0.3702%" y="1461" width="0.0697%" height="15" fill="rgb(250,156,29)" fg:x="818" fg:w="154"/><text x="0.6202%" y="1471.50"></text></g><g><title>sled::pagecache::PageCache::allocate (157 samples, 0.07%)</title><rect x="0.3693%" y="1493" width="0.0711%" height="15" fill="rgb(216,193,19)" fg:x="816" fg:w="157"/><text x="0.6193%" y="1503.50"></text></g><g><title>sled::pagecache::PageCache::allocate_inner (157 samples, 0.07%)</title><rect x="0.3693%" y="1477" width="0.0711%" height="15" fill="rgb(216,135,14)" fg:x="816" fg:w="157"/><text x="0.6193%" y="1487.50"></text></g><g><title>sled::serialization::Serialize::serialize (33 samples, 0.01%)</title><rect x="0.4499%" y="1445" width="0.0149%" height="15" fill="rgb(241,47,5)" fg:x="994" fg:w="33"/><text x="0.6999%" y="1455.50"></text></g><g><title>ZSTD_HcFindBestMatch_noDict_4 (74 samples, 0.03%)</title><rect x="0.4729%" y="1237" width="0.0335%" height="15" fill="rgb(233,42,35)" fg:x="1045" fg:w="74"/><text x="0.7229%" y="1247.50"></text></g><g><title>ZSTD_HcFindBestMatch (59 samples, 0.03%)</title><rect x="0.4797%" y="1221" width="0.0267%" height="15" fill="rgb(231,13,6)" fg:x="1060" fg:w="59"/><text x="0.7297%" y="1231.50"></text></g><g><title>ZSTD_insertAndFindFirstIndex_internal (25 samples, 0.01%)</title><rect x="0.4951%" y="1205" width="0.0113%" height="15" fill="rgb(207,181,40)" fg:x="1094" fg:w="25"/><text x="0.7451%" y="1215.50"></text></g><g><title>ZSTD_buildSeqStore (90 samples, 0.04%)</title><rect x="0.4675%" y="1285" width="0.0407%" height="15" fill="rgb(254,173,49)" fg:x="1033" fg:w="90"/><text x="0.7175%" y="1295.50"></text></g><g><title>ZSTD_compressBlock_lazy (90 samples, 0.04%)</title><rect x="0.4675%" y="1269" width="0.0407%" height="15" fill="rgb(221,1,38)" fg:x="1033" fg:w="90"/><text x="0.7175%" y="1279.50"></text></g><g><title>ZSTD_compressBlock_lazy_generic (90 samples, 0.04%)</title><rect x="0.4675%" y="1253" width="0.0407%" height="15" fill="rgb(206,124,46)" fg:x="1033" fg:w="90"/><text x="0.7175%" y="1263.50"></text></g><g><title>HUF_buildCTable_wksp (37 samples, 0.02%)</title><rect x="0.5209%" y="1205" width="0.0167%" height="15" fill="rgb(249,21,11)" fg:x="1151" fg:w="37"/><text x="0.7709%" y="1215.50"></text></g><g><title>ZSTD_compressLiterals (65 samples, 0.03%)</title><rect x="0.5168%" y="1253" width="0.0294%" height="15" fill="rgb(222,201,40)" fg:x="1142" fg:w="65"/><text x="0.7668%" y="1263.50"></text></g><g><title>HUF_compress4X_repeat (62 samples, 0.03%)</title><rect x="0.5182%" y="1237" width="0.0281%" height="15" fill="rgb(235,61,29)" fg:x="1145" fg:w="62"/><text x="0.7682%" y="1247.50"></text></g><g><title>HUF_compress_internal (62 samples, 0.03%)</title><rect x="0.5182%" y="1221" width="0.0281%" height="15" fill="rgb(219,207,3)" fg:x="1145" fg:w="62"/><text x="0.7682%" y="1231.50"></text></g><g><title>ZSTD_compressEnd (177 samples, 0.08%)</title><rect x="0.4671%" y="1349" width="0.0801%" height="15" fill="rgb(222,56,46)" fg:x="1032" fg:w="177"/><text x="0.7171%" y="1359.50"></text></g><g><title>ZSTD_compressContinue_internal (177 samples, 0.08%)</title><rect x="0.4671%" y="1333" width="0.0801%" height="15" fill="rgb(239,76,54)" fg:x="1032" fg:w="177"/><text x="0.7171%" y="1343.50"></text></g><g><title>ZSTD_compress_frameChunk (177 samples, 0.08%)</title><rect x="0.4671%" y="1317" width="0.0801%" height="15" fill="rgb(231,124,27)" fg:x="1032" fg:w="177"/><text x="0.7171%" y="1327.50"></text></g><g><title>ZSTD_compressBlock_internal (177 samples, 0.08%)</title><rect x="0.4671%" y="1301" width="0.0801%" height="15" fill="rgb(249,195,6)" fg:x="1032" fg:w="177"/><text x="0.7171%" y="1311.50"></text></g><g><title>ZSTD_entropyCompressSeqStore (86 samples, 0.04%)</title><rect x="0.5082%" y="1285" width="0.0389%" height="15" fill="rgb(237,174,47)" fg:x="1123" fg:w="86"/><text x="0.7582%" y="1295.50"></text></g><g><title>ZSTD_entropyCompressSeqStore_internal (86 samples, 0.04%)</title><rect x="0.5082%" y="1269" width="0.0389%" height="15" fill="rgb(206,201,31)" fg:x="1123" fg:w="86"/><text x="0.7582%" y="1279.50"></text></g><g><title>zstd::block::compressor::Compressor::compress (191 samples, 0.09%)</title><rect x="0.4661%" y="1429" width="0.0864%" height="15" fill="rgb(231,57,52)" fg:x="1030" fg:w="191"/><text x="0.7161%" y="1439.50"></text></g><g><title>zstd::block::compressor::Compressor::compress_to_buffer (189 samples, 0.09%)</title><rect x="0.4671%" y="1413" width="0.0855%" height="15" fill="rgb(248,177,22)" fg:x="1032" fg:w="189"/><text x="0.7171%" y="1423.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict (189 samples, 0.09%)</title><rect x="0.4671%" y="1397" width="0.0855%" height="15" fill="rgb(215,211,37)" fg:x="1032" fg:w="189"/><text x="0.7171%" y="1407.50"></text></g><g><title>zstd_safe::WriteBuf::write_from (189 samples, 0.09%)</title><rect x="0.4671%" y="1381" width="0.0855%" height="15" fill="rgb(241,128,51)" fg:x="1032" fg:w="189"/><text x="0.7171%" y="1391.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict::{{closure}} (189 samples, 0.09%)</title><rect x="0.4671%" y="1365" width="0.0855%" height="15" fill="rgb(227,165,31)" fg:x="1032" fg:w="189"/><text x="0.7171%" y="1375.50"></text></g><g><title>sled::pagecache::logger::Log::reserve (238 samples, 0.11%)</title><rect x="0.4467%" y="1461" width="0.1077%" height="15" fill="rgb(228,167,24)" fg:x="987" fg:w="238"/><text x="0.6967%" y="1471.50"></text></g><g><title>zstd::block::compress (198 samples, 0.09%)</title><rect x="0.4648%" y="1445" width="0.0896%" height="15" fill="rgb(228,143,12)" fg:x="1027" fg:w="198"/><text x="0.7148%" y="1455.50"></text></g><g><title>sled::pagecache::PageCache::cas_page (255 samples, 0.12%)</title><rect x="0.4404%" y="1477" width="0.1154%" height="15" fill="rgb(249,149,8)" fg:x="973" fg:w="255"/><text x="0.6904%" y="1487.50"></text></g><g><title>ZSTD_HcFindBestMatch_noDict_4 (65 samples, 0.03%)</title><rect x="0.5797%" y="1221" width="0.0294%" height="15" fill="rgb(243,35,44)" fg:x="1281" fg:w="65"/><text x="0.8297%" y="1231.50"></text></g><g><title>ZSTD_HcFindBestMatch (61 samples, 0.03%)</title><rect x="0.5816%" y="1205" width="0.0276%" height="15" fill="rgb(246,89,9)" fg:x="1285" fg:w="61"/><text x="0.8316%" y="1215.50"></text></g><g><title>ZSTD_insertAndFindFirstIndex_internal (26 samples, 0.01%)</title><rect x="0.5974%" y="1189" width="0.0118%" height="15" fill="rgb(233,213,13)" fg:x="1320" fg:w="26"/><text x="0.8474%" y="1199.50"></text></g><g><title>ZSTD_buildSeqStore (88 samples, 0.04%)</title><rect x="0.5702%" y="1269" width="0.0398%" height="15" fill="rgb(233,141,41)" fg:x="1260" fg:w="88"/><text x="0.8202%" y="1279.50"></text></g><g><title>ZSTD_compressBlock_lazy (87 samples, 0.04%)</title><rect x="0.5707%" y="1253" width="0.0394%" height="15" fill="rgb(239,167,4)" fg:x="1261" fg:w="87"/><text x="0.8207%" y="1263.50"></text></g><g><title>ZSTD_compressBlock_lazy_generic (87 samples, 0.04%)</title><rect x="0.5707%" y="1237" width="0.0394%" height="15" fill="rgb(209,217,16)" fg:x="1261" fg:w="87"/><text x="0.8207%" y="1247.50"></text></g><g><title>HUF_buildCTable_wksp (28 samples, 0.01%)</title><rect x="0.6245%" y="1189" width="0.0127%" height="15" fill="rgb(219,88,35)" fg:x="1380" fg:w="28"/><text x="0.8745%" y="1199.50"></text></g><g><title>HUF_compress4X_repeat (47 samples, 0.02%)</title><rect x="0.6209%" y="1221" width="0.0213%" height="15" fill="rgb(220,193,23)" fg:x="1372" fg:w="47"/><text x="0.8709%" y="1231.50"></text></g><g><title>HUF_compress_internal (47 samples, 0.02%)</title><rect x="0.6209%" y="1205" width="0.0213%" height="15" fill="rgb(230,90,52)" fg:x="1372" fg:w="47"/><text x="0.8709%" y="1215.50"></text></g><g><title>ZSTD_compressEnd (163 samples, 0.07%)</title><rect x="0.5689%" y="1333" width="0.0738%" height="15" fill="rgb(252,106,19)" fg:x="1257" fg:w="163"/><text x="0.8189%" y="1343.50"></text></g><g><title>ZSTD_compressContinue_internal (162 samples, 0.07%)</title><rect x="0.5693%" y="1317" width="0.0733%" height="15" fill="rgb(206,74,20)" fg:x="1258" fg:w="162"/><text x="0.8193%" y="1327.50"></text></g><g><title>ZSTD_compress_frameChunk (162 samples, 0.07%)</title><rect x="0.5693%" y="1301" width="0.0733%" height="15" fill="rgb(230,138,44)" fg:x="1258" fg:w="162"/><text x="0.8193%" y="1311.50"></text></g><g><title>ZSTD_compressBlock_internal (161 samples, 0.07%)</title><rect x="0.5698%" y="1285" width="0.0729%" height="15" fill="rgb(235,182,43)" fg:x="1259" fg:w="161"/><text x="0.8198%" y="1295.50"></text></g><g><title>ZSTD_entropyCompressSeqStore (72 samples, 0.03%)</title><rect x="0.6101%" y="1269" width="0.0326%" height="15" fill="rgb(242,16,51)" fg:x="1348" fg:w="72"/><text x="0.8601%" y="1279.50"></text></g><g><title>ZSTD_entropyCompressSeqStore_internal (72 samples, 0.03%)</title><rect x="0.6101%" y="1253" width="0.0326%" height="15" fill="rgb(248,9,4)" fg:x="1348" fg:w="72"/><text x="0.8601%" y="1263.50"></text></g><g><title>ZSTD_compressLiterals (50 samples, 0.02%)</title><rect x="0.6200%" y="1237" width="0.0226%" height="15" fill="rgb(210,31,22)" fg:x="1370" fg:w="50"/><text x="0.8700%" y="1247.50"></text></g><g><title>zstd::block::compressor::Compressor::compress (168 samples, 0.08%)</title><rect x="0.5689%" y="1413" width="0.0760%" height="15" fill="rgb(239,54,39)" fg:x="1257" fg:w="168"/><text x="0.8189%" y="1423.50"></text></g><g><title>zstd::block::compressor::Compressor::compress_to_buffer (168 samples, 0.08%)</title><rect x="0.5689%" y="1397" width="0.0760%" height="15" fill="rgb(230,99,41)" fg:x="1257" fg:w="168"/><text x="0.8189%" y="1407.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict (168 samples, 0.08%)</title><rect x="0.5689%" y="1381" width="0.0760%" height="15" fill="rgb(253,106,12)" fg:x="1257" fg:w="168"/><text x="0.8189%" y="1391.50"></text></g><g><title>zstd_safe::WriteBuf::write_from (168 samples, 0.08%)</title><rect x="0.5689%" y="1365" width="0.0760%" height="15" fill="rgb(213,46,41)" fg:x="1257" fg:w="168"/><text x="0.8189%" y="1375.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict::{{closure}} (168 samples, 0.08%)</title><rect x="0.5689%" y="1349" width="0.0760%" height="15" fill="rgb(215,133,35)" fg:x="1257" fg:w="168"/><text x="0.8189%" y="1359.50"></text></g><g><title>sled::pagecache::logger::Log::reserve (190 samples, 0.09%)</title><rect x="0.5621%" y="1445" width="0.0860%" height="15" fill="rgb(213,28,5)" fg:x="1242" fg:w="190"/><text x="0.8121%" y="1455.50"></text></g><g><title>zstd::block::compress (176 samples, 0.08%)</title><rect x="0.5684%" y="1429" width="0.0797%" height="15" fill="rgb(215,77,49)" fg:x="1256" fg:w="176"/><text x="0.8184%" y="1439.50"></text></g><g><title>sled::pagecache::PageCache::cas_page (199 samples, 0.09%)</title><rect x="0.5589%" y="1461" width="0.0901%" height="15" fill="rgb(248,100,22)" fg:x="1235" fg:w="199"/><text x="0.8089%" y="1471.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (67 samples, 0.03%)</title><rect x="0.6490%" y="1445" width="0.0303%" height="15" fill="rgb(208,67,9)" fg:x="1434" fg:w="67"/><text x="0.8990%" y="1455.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (67 samples, 0.03%)</title><rect x="0.6490%" y="1429" width="0.0303%" height="15" fill="rgb(219,133,21)" fg:x="1434" fg:w="67"/><text x="0.8990%" y="1439.50"></text></g><g><title>core::iter::adapters::try_process (67 samples, 0.03%)</title><rect x="0.6490%" y="1413" width="0.0303%" height="15" fill="rgb(246,46,29)" fg:x="1434" fg:w="67"/><text x="0.8990%" y="1423.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (67 samples, 0.03%)</title><rect x="0.6490%" y="1397" width="0.0303%" height="15" fill="rgb(246,185,52)" fg:x="1434" fg:w="67"/><text x="0.8990%" y="1407.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (67 samples, 0.03%)</title><rect x="0.6490%" y="1381" width="0.0303%" height="15" fill="rgb(252,136,11)" fg:x="1434" fg:w="67"/><text x="0.8990%" y="1391.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (67 samples, 0.03%)</title><rect x="0.6490%" y="1365" width="0.0303%" height="15" fill="rgb(219,138,53)" fg:x="1434" fg:w="67"/><text x="0.8990%" y="1375.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (67 samples, 0.03%)</title><rect x="0.6490%" y="1349" width="0.0303%" height="15" fill="rgb(211,51,23)" fg:x="1434" fg:w="67"/><text x="0.8990%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (67 samples, 0.03%)</title><rect x="0.6490%" y="1333" width="0.0303%" height="15" fill="rgb(247,221,28)" fg:x="1434" fg:w="67"/><text x="0.8990%" y="1343.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.02%)</title><rect x="0.6589%" y="1317" width="0.0204%" height="15" fill="rgb(251,222,45)" fg:x="1456" fg:w="45"/><text x="0.9089%" y="1327.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (45 samples, 0.02%)</title><rect x="0.6589%" y="1301" width="0.0204%" height="15" fill="rgb(217,162,53)" fg:x="1456" fg:w="45"/><text x="0.9089%" y="1311.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (45 samples, 0.02%)</title><rect x="0.6589%" y="1285" width="0.0204%" height="15" fill="rgb(229,93,14)" fg:x="1456" fg:w="45"/><text x="0.9089%" y="1295.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (45 samples, 0.02%)</title><rect x="0.6589%" y="1269" width="0.0204%" height="15" fill="rgb(209,67,49)" fg:x="1456" fg:w="45"/><text x="0.9089%" y="1279.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (45 samples, 0.02%)</title><rect x="0.6589%" y="1253" width="0.0204%" height="15" fill="rgb(213,87,29)" fg:x="1456" fg:w="45"/><text x="0.9089%" y="1263.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (44 samples, 0.02%)</title><rect x="0.6594%" y="1237" width="0.0199%" height="15" fill="rgb(205,151,52)" fg:x="1457" fg:w="44"/><text x="0.9094%" y="1247.50"></text></g><g><title>sled::pagecache::PageCache::get::{{closure}} (44 samples, 0.02%)</title><rect x="0.6594%" y="1221" width="0.0199%" height="15" fill="rgb(253,215,39)" fg:x="1457" fg:w="44"/><text x="0.9094%" y="1231.50"></text></g><g><title>sled::pagecache::PageCache::pull (44 samples, 0.02%)</title><rect x="0.6594%" y="1205" width="0.0199%" height="15" fill="rgb(221,220,41)" fg:x="1457" fg:w="44"/><text x="0.9094%" y="1215.50"></text></g><g><title>sled::pagecache::logger::Log::read (29 samples, 0.01%)</title><rect x="0.6662%" y="1189" width="0.0131%" height="15" fill="rgb(218,133,21)" fg:x="1472" fg:w="29"/><text x="0.9162%" y="1199.50"></text></g><g><title>sled::pagecache::logger::read_message (28 samples, 0.01%)</title><rect x="0.6666%" y="1173" width="0.0127%" height="15" fill="rgb(221,193,43)" fg:x="1473" fg:w="28"/><text x="0.9166%" y="1183.50"></text></g><g><title>sled::pagecache::PageCache::get (71 samples, 0.03%)</title><rect x="0.6490%" y="1461" width="0.0321%" height="15" fill="rgb(240,128,52)" fg:x="1434" fg:w="71"/><text x="0.8990%" y="1471.50"></text></g><g><title>sled::pagecache::PageCache::rewrite_page (278 samples, 0.13%)</title><rect x="0.5558%" y="1477" width="0.1258%" height="15" fill="rgb(253,114,12)" fg:x="1228" fg:w="278"/><text x="0.8058%" y="1487.50"></text></g><g><title>sled::tree::Tree::split_node (726 samples, 0.33%)</title><rect x="0.3535%" y="1509" width="0.3286%" height="15" fill="rgb(215,223,47)" fg:x="781" fg:w="726"/><text x="0.6035%" y="1519.50"></text></g><g><title>sled::pagecache::PageCache::replace (534 samples, 0.24%)</title><rect x="0.4404%" y="1493" width="0.2417%" height="15" fill="rgb(248,225,23)" fg:x="973" fg:w="534"/><text x="0.6904%" y="1503.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (36 samples, 0.02%)</title><rect x="0.6834%" y="1349" width="0.0163%" height="15" fill="rgb(250,108,0)" fg:x="1510" fg:w="36"/><text x="0.9334%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (36 samples, 0.02%)</title><rect x="0.6834%" y="1333" width="0.0163%" height="15" fill="rgb(228,208,7)" fg:x="1510" fg:w="36"/><text x="0.9334%" y="1343.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.02%)</title><rect x="0.6834%" y="1317" width="0.0163%" height="15" fill="rgb(244,45,10)" fg:x="1510" fg:w="36"/><text x="0.9334%" y="1327.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (36 samples, 0.02%)</title><rect x="0.6834%" y="1301" width="0.0163%" height="15" fill="rgb(207,125,25)" fg:x="1510" fg:w="36"/><text x="0.9334%" y="1311.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (36 samples, 0.02%)</title><rect x="0.6834%" y="1285" width="0.0163%" height="15" fill="rgb(210,195,18)" fg:x="1510" fg:w="36"/><text x="0.9334%" y="1295.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (36 samples, 0.02%)</title><rect x="0.6834%" y="1269" width="0.0163%" height="15" fill="rgb(249,80,12)" fg:x="1510" fg:w="36"/><text x="0.9334%" y="1279.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (36 samples, 0.02%)</title><rect x="0.6834%" y="1253" width="0.0163%" height="15" fill="rgb(221,65,9)" fg:x="1510" fg:w="36"/><text x="0.9334%" y="1263.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (36 samples, 0.02%)</title><rect x="0.6834%" y="1237" width="0.0163%" height="15" fill="rgb(235,49,36)" fg:x="1510" fg:w="36"/><text x="0.9334%" y="1247.50"></text></g><g><title>sled::pagecache::PageCache::get::{{closure}} (36 samples, 0.02%)</title><rect x="0.6834%" y="1221" width="0.0163%" height="15" fill="rgb(225,32,20)" fg:x="1510" fg:w="36"/><text x="0.9334%" y="1231.50"></text></g><g><title>sled::pagecache::PageCache::pull (36 samples, 0.02%)</title><rect x="0.6834%" y="1205" width="0.0163%" height="15" fill="rgb(215,141,46)" fg:x="1510" fg:w="36"/><text x="0.9334%" y="1215.50"></text></g><g><title>sled::pagecache::logger::Log::read (36 samples, 0.02%)</title><rect x="0.6834%" y="1189" width="0.0163%" height="15" fill="rgb(250,160,47)" fg:x="1510" fg:w="36"/><text x="0.9334%" y="1199.50"></text></g><g><title>sled::pagecache::logger::read_message (24 samples, 0.01%)</title><rect x="0.6888%" y="1173" width="0.0109%" height="15" fill="rgb(216,222,40)" fg:x="1522" fg:w="24"/><text x="0.9388%" y="1183.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (62 samples, 0.03%)</title><rect x="0.6834%" y="1477" width="0.0281%" height="15" fill="rgb(234,217,39)" fg:x="1510" fg:w="62"/><text x="0.9334%" y="1487.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (62 samples, 0.03%)</title><rect x="0.6834%" y="1461" width="0.0281%" height="15" fill="rgb(207,178,40)" fg:x="1510" fg:w="62"/><text x="0.9334%" y="1471.50"></text></g><g><title>core::iter::adapters::try_process (62 samples, 0.03%)</title><rect x="0.6834%" y="1445" width="0.0281%" height="15" fill="rgb(221,136,13)" fg:x="1510" fg:w="62"/><text x="0.9334%" y="1455.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (62 samples, 0.03%)</title><rect x="0.6834%" y="1429" width="0.0281%" height="15" fill="rgb(249,199,10)" fg:x="1510" fg:w="62"/><text x="0.9334%" y="1439.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (62 samples, 0.03%)</title><rect x="0.6834%" y="1413" width="0.0281%" height="15" fill="rgb(249,222,13)" fg:x="1510" fg:w="62"/><text x="0.9334%" y="1423.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (62 samples, 0.03%)</title><rect x="0.6834%" y="1397" width="0.0281%" height="15" fill="rgb(244,185,38)" fg:x="1510" fg:w="62"/><text x="0.9334%" y="1407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (62 samples, 0.03%)</title><rect x="0.6834%" y="1381" width="0.0281%" height="15" fill="rgb(236,202,9)" fg:x="1510" fg:w="62"/><text x="0.9334%" y="1391.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (62 samples, 0.03%)</title><rect x="0.6834%" y="1365" width="0.0281%" height="15" fill="rgb(250,229,37)" fg:x="1510" fg:w="62"/><text x="0.9334%" y="1375.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.01%)</title><rect x="0.6997%" y="1349" width="0.0118%" height="15" fill="rgb(206,174,23)" fg:x="1546" fg:w="26"/><text x="0.9497%" y="1359.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (26 samples, 0.01%)</title><rect x="0.6997%" y="1333" width="0.0118%" height="15" fill="rgb(211,33,43)" fg:x="1546" fg:w="26"/><text x="0.9497%" y="1343.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26 samples, 0.01%)</title><rect x="0.6997%" y="1317" width="0.0118%" height="15" fill="rgb(245,58,50)" fg:x="1546" fg:w="26"/><text x="0.9497%" y="1327.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26 samples, 0.01%)</title><rect x="0.6997%" y="1301" width="0.0118%" height="15" fill="rgb(244,68,36)" fg:x="1546" fg:w="26"/><text x="0.9497%" y="1311.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (26 samples, 0.01%)</title><rect x="0.6997%" y="1285" width="0.0118%" height="15" fill="rgb(232,229,15)" fg:x="1546" fg:w="26"/><text x="0.9497%" y="1295.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (26 samples, 0.01%)</title><rect x="0.6997%" y="1269" width="0.0118%" height="15" fill="rgb(254,30,23)" fg:x="1546" fg:w="26"/><text x="0.9497%" y="1279.50"></text></g><g><title>sled::pagecache::PageCache::get::{{closure}} (26 samples, 0.01%)</title><rect x="0.6997%" y="1253" width="0.0118%" height="15" fill="rgb(235,160,14)" fg:x="1546" fg:w="26"/><text x="0.9497%" y="1263.50"></text></g><g><title>sled::pagecache::PageCache::pull (26 samples, 0.01%)</title><rect x="0.6997%" y="1237" width="0.0118%" height="15" fill="rgb(212,155,44)" fg:x="1546" fg:w="26"/><text x="0.9497%" y="1247.50"></text></g><g><title>kv::bucket::Bucket&lt;K,V&gt;::get (947 samples, 0.43%)</title><rect x="0.2960%" y="1573" width="0.4286%" height="15" fill="rgb(226,2,50)" fg:x="654" fg:w="947"/><text x="0.5460%" y="1583.50"></text></g><g><title>sled::tree::Tree::get (937 samples, 0.42%)</title><rect x="0.3005%" y="1557" width="0.4241%" height="15" fill="rgb(234,177,6)" fg:x="664" fg:w="937"/><text x="0.5505%" y="1567.50"></text></g><g><title>sled::tree::Tree::get_inner (866 samples, 0.39%)</title><rect x="0.3326%" y="1541" width="0.3919%" height="15" fill="rgb(217,24,9)" fg:x="735" fg:w="866"/><text x="0.5826%" y="1551.50"></text></g><g><title>sled::tree::Tree::view_for_key (856 samples, 0.39%)</title><rect x="0.3372%" y="1525" width="0.3874%" height="15" fill="rgb(220,13,46)" fg:x="745" fg:w="856"/><text x="0.5872%" y="1535.50"></text></g><g><title>sled::tree::Tree::view_for_pid (94 samples, 0.04%)</title><rect x="0.6820%" y="1509" width="0.0425%" height="15" fill="rgb(239,221,27)" fg:x="1507" fg:w="94"/><text x="0.9320%" y="1519.50"></text></g><g><title>sled::pagecache::PageCache::get (91 samples, 0.04%)</title><rect x="0.6834%" y="1493" width="0.0412%" height="15" fill="rgb(222,198,25)" fg:x="1510" fg:w="91"/><text x="0.9334%" y="1503.50"></text></g><g><title>&lt;utreexo_wallet::blockchain::chain_state::ChainState&lt;PersistedState&gt; as utreexo_wallet::blockchain::BlockchainInterface&gt;::get_block_header (970 samples, 0.44%)</title><rect x="0.2901%" y="1605" width="0.4390%" height="15" fill="rgb(211,99,13)" fg:x="641" fg:w="970"/><text x="0.5401%" y="1615.50"></text></g><g><title>&lt;utreexo_wallet::blockchain::chainstore::KvChainStore as utreexo_wallet::blockchain::chainstore::ChainStore&gt;::get_header (969 samples, 0.44%)</title><rect x="0.2906%" y="1589" width="0.4385%" height="15" fill="rgb(232,111,31)" fg:x="642" fg:w="969"/><text x="0.5406%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (30 samples, 0.01%)</title><rect x="0.7318%" y="1301" width="0.0136%" height="15" fill="rgb(245,82,37)" fg:x="1617" fg:w="30"/><text x="0.9818%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (30 samples, 0.01%)</title><rect x="0.7318%" y="1285" width="0.0136%" height="15" fill="rgb(227,149,46)" fg:x="1617" fg:w="30"/><text x="0.9818%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (30 samples, 0.01%)</title><rect x="0.7318%" y="1269" width="0.0136%" height="15" fill="rgb(218,36,50)" fg:x="1617" fg:w="30"/><text x="0.9818%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.01%)</title><rect x="0.7318%" y="1253" width="0.0136%" height="15" fill="rgb(226,80,48)" fg:x="1617" fg:w="30"/><text x="0.9818%" y="1263.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.01%)</title><rect x="0.7318%" y="1237" width="0.0136%" height="15" fill="rgb(238,224,15)" fg:x="1617" fg:w="30"/><text x="0.9818%" y="1247.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.01%)</title><rect x="0.7318%" y="1221" width="0.0136%" height="15" fill="rgb(241,136,10)" fg:x="1617" fg:w="30"/><text x="0.9818%" y="1231.50"></text></g><g><title>malloc (30 samples, 0.01%)</title><rect x="0.7318%" y="1205" width="0.0136%" height="15" fill="rgb(208,32,45)" fg:x="1617" fg:w="30"/><text x="0.9818%" y="1215.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxIn as core::clone::Clone&gt;::clone (38 samples, 0.02%)</title><rect x="0.7291%" y="1397" width="0.0172%" height="15" fill="rgb(207,135,9)" fg:x="1611" fg:w="38"/><text x="0.9791%" y="1407.50"></text></g><g><title>&lt;bitcoin::blockdata::witness::Witness as core::clone::Clone&gt;::clone (32 samples, 0.01%)</title><rect x="0.7318%" y="1381" width="0.0145%" height="15" fill="rgb(206,86,44)" fg:x="1617" fg:w="32"/><text x="0.9818%" y="1391.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (32 samples, 0.01%)</title><rect x="0.7318%" y="1365" width="0.0145%" height="15" fill="rgb(245,177,15)" fg:x="1617" fg:w="32"/><text x="0.9818%" y="1375.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (32 samples, 0.01%)</title><rect x="0.7318%" y="1349" width="0.0145%" height="15" fill="rgb(206,64,50)" fg:x="1617" fg:w="32"/><text x="0.9818%" y="1359.50"></text></g><g><title>alloc::slice::hack::to_vec (32 samples, 0.01%)</title><rect x="0.7318%" y="1333" width="0.0145%" height="15" fill="rgb(234,36,40)" fg:x="1617" fg:w="32"/><text x="0.9818%" y="1343.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (32 samples, 0.01%)</title><rect x="0.7318%" y="1317" width="0.0145%" height="15" fill="rgb(213,64,8)" fg:x="1617" fg:w="32"/><text x="0.9818%" y="1327.50"></text></g><g><title>[libc.so.6] (65 samples, 0.03%)</title><rect x="0.7567%" y="1189" width="0.0294%" height="15" fill="rgb(210,75,36)" fg:x="1672" fg:w="65"/><text x="1.0067%" y="1199.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (88 samples, 0.04%)</title><rect x="0.7467%" y="1301" width="0.0398%" height="15" fill="rgb(229,88,21)" fg:x="1650" fg:w="88"/><text x="0.9967%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (88 samples, 0.04%)</title><rect x="0.7467%" y="1285" width="0.0398%" height="15" fill="rgb(252,204,47)" fg:x="1650" fg:w="88"/><text x="0.9967%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (88 samples, 0.04%)</title><rect x="0.7467%" y="1269" width="0.0398%" height="15" fill="rgb(208,77,27)" fg:x="1650" fg:w="88"/><text x="0.9967%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (87 samples, 0.04%)</title><rect x="0.7472%" y="1253" width="0.0394%" height="15" fill="rgb(221,76,26)" fg:x="1651" fg:w="87"/><text x="0.9972%" y="1263.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (87 samples, 0.04%)</title><rect x="0.7472%" y="1237" width="0.0394%" height="15" fill="rgb(225,139,18)" fg:x="1651" fg:w="87"/><text x="0.9972%" y="1247.50"></text></g><g><title>alloc::alloc::alloc (87 samples, 0.04%)</title><rect x="0.7472%" y="1221" width="0.0394%" height="15" fill="rgb(230,137,11)" fg:x="1651" fg:w="87"/><text x="0.9972%" y="1231.50"></text></g><g><title>malloc (84 samples, 0.04%)</title><rect x="0.7486%" y="1205" width="0.0380%" height="15" fill="rgb(212,28,1)" fg:x="1654" fg:w="84"/><text x="0.9986%" y="1215.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxOut as core::clone::Clone&gt;::clone (94 samples, 0.04%)</title><rect x="0.7463%" y="1397" width="0.0425%" height="15" fill="rgb(248,164,17)" fg:x="1649" fg:w="94"/><text x="0.9963%" y="1407.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as core::clone::Clone&gt;::clone (93 samples, 0.04%)</title><rect x="0.7467%" y="1381" width="0.0421%" height="15" fill="rgb(222,171,42)" fg:x="1650" fg:w="93"/><text x="0.9967%" y="1391.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (93 samples, 0.04%)</title><rect x="0.7467%" y="1365" width="0.0421%" height="15" fill="rgb(243,84,45)" fg:x="1650" fg:w="93"/><text x="0.9967%" y="1375.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (93 samples, 0.04%)</title><rect x="0.7467%" y="1349" width="0.0421%" height="15" fill="rgb(252,49,23)" fg:x="1650" fg:w="93"/><text x="0.9967%" y="1359.50"></text></g><g><title>alloc::slice::hack::to_vec (93 samples, 0.04%)</title><rect x="0.7467%" y="1333" width="0.0421%" height="15" fill="rgb(215,19,7)" fg:x="1650" fg:w="93"/><text x="0.9967%" y="1343.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (93 samples, 0.04%)</title><rect x="0.7467%" y="1317" width="0.0421%" height="15" fill="rgb(238,81,41)" fg:x="1650" fg:w="93"/><text x="0.9967%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (59 samples, 0.03%)</title><rect x="0.7888%" y="1397" width="0.0267%" height="15" fill="rgb(210,199,37)" fg:x="1743" fg:w="59"/><text x="1.0388%" y="1407.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (59 samples, 0.03%)</title><rect x="0.7888%" y="1381" width="0.0267%" height="15" fill="rgb(244,192,49)" fg:x="1743" fg:w="59"/><text x="1.0388%" y="1391.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (59 samples, 0.03%)</title><rect x="0.7888%" y="1365" width="0.0267%" height="15" fill="rgb(226,211,11)" fg:x="1743" fg:w="59"/><text x="1.0388%" y="1375.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (58 samples, 0.03%)</title><rect x="0.7893%" y="1349" width="0.0262%" height="15" fill="rgb(236,162,54)" fg:x="1744" fg:w="58"/><text x="1.0393%" y="1359.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (58 samples, 0.03%)</title><rect x="0.7893%" y="1333" width="0.0262%" height="15" fill="rgb(220,229,9)" fg:x="1744" fg:w="58"/><text x="1.0393%" y="1343.50"></text></g><g><title>alloc::alloc::alloc (58 samples, 0.03%)</title><rect x="0.7893%" y="1317" width="0.0262%" height="15" fill="rgb(250,87,22)" fg:x="1744" fg:w="58"/><text x="1.0393%" y="1327.50"></text></g><g><title>malloc (56 samples, 0.03%)</title><rect x="0.7902%" y="1301" width="0.0253%" height="15" fill="rgb(239,43,17)" fg:x="1746" fg:w="56"/><text x="1.0402%" y="1311.50"></text></g><g><title>[libc.so.6] (48 samples, 0.02%)</title><rect x="0.7938%" y="1285" width="0.0217%" height="15" fill="rgb(231,177,25)" fg:x="1754" fg:w="48"/><text x="1.0438%" y="1295.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::Transaction as core::clone::Clone&gt;::clone (192 samples, 0.09%)</title><rect x="0.7291%" y="1477" width="0.0869%" height="15" fill="rgb(219,179,1)" fg:x="1611" fg:w="192"/><text x="0.9791%" y="1487.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (192 samples, 0.09%)</title><rect x="0.7291%" y="1461" width="0.0869%" height="15" fill="rgb(238,219,53)" fg:x="1611" fg:w="192"/><text x="0.9791%" y="1471.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (192 samples, 0.09%)</title><rect x="0.7291%" y="1445" width="0.0869%" height="15" fill="rgb(232,167,36)" fg:x="1611" fg:w="192"/><text x="0.9791%" y="1455.50"></text></g><g><title>alloc::slice::hack::to_vec (192 samples, 0.09%)</title><rect x="0.7291%" y="1429" width="0.0869%" height="15" fill="rgb(244,19,51)" fg:x="1611" fg:w="192"/><text x="0.9791%" y="1439.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (192 samples, 0.09%)</title><rect x="0.7291%" y="1413" width="0.0869%" height="15" fill="rgb(224,6,22)" fg:x="1611" fg:w="192"/><text x="0.9791%" y="1423.50"></text></g><g><title>&lt;utreexo_wallet::blockchain::Notification as core::clone::Clone&gt;::clone (201 samples, 0.09%)</title><rect x="0.7291%" y="1589" width="0.0910%" height="15" fill="rgb(224,145,5)" fg:x="1611" fg:w="201"/><text x="0.9791%" y="1599.50"></text></g><g><title>core::clone::Clone::clone (201 samples, 0.09%)</title><rect x="0.7291%" y="1573" width="0.0910%" height="15" fill="rgb(234,130,49)" fg:x="1611" fg:w="201"/><text x="0.9791%" y="1583.50"></text></g><g><title>&lt;bitcoin::blockdata::block::Block as core::clone::Clone&gt;::clone (201 samples, 0.09%)</title><rect x="0.7291%" y="1557" width="0.0910%" height="15" fill="rgb(254,6,2)" fg:x="1611" fg:w="201"/><text x="0.9791%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (201 samples, 0.09%)</title><rect x="0.7291%" y="1541" width="0.0910%" height="15" fill="rgb(208,96,46)" fg:x="1611" fg:w="201"/><text x="0.9791%" y="1551.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (201 samples, 0.09%)</title><rect x="0.7291%" y="1525" width="0.0910%" height="15" fill="rgb(239,3,39)" fg:x="1611" fg:w="201"/><text x="0.9791%" y="1535.50"></text></g><g><title>alloc::slice::hack::to_vec (201 samples, 0.09%)</title><rect x="0.7291%" y="1509" width="0.0910%" height="15" fill="rgb(233,210,1)" fg:x="1611" fg:w="201"/><text x="0.9791%" y="1519.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (201 samples, 0.09%)</title><rect x="0.7291%" y="1493" width="0.0910%" height="15" fill="rgb(244,137,37)" fg:x="1611" fg:w="201"/><text x="0.9791%" y="1503.50"></text></g><g><title>event_listener::Event::notify (114 samples, 0.05%)</title><rect x="0.8368%" y="1093" width="0.0516%" height="15" fill="rgb(240,136,2)" fg:x="1849" fg:w="114"/><text x="1.0868%" y="1103.50"></text></g><g><title>event_listener::List::notify (108 samples, 0.05%)</title><rect x="0.8395%" y="1077" width="0.0489%" height="15" fill="rgb(239,18,37)" fg:x="1855" fg:w="108"/><text x="1.0895%" y="1087.50"></text></g><g><title>core::task::wake::Waker::wake (105 samples, 0.05%)</title><rect x="0.8409%" y="1061" width="0.0475%" height="15" fill="rgb(218,185,22)" fg:x="1858" fg:w="105"/><text x="1.0909%" y="1071.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (105 samples, 0.05%)</title><rect x="0.8409%" y="1045" width="0.0475%" height="15" fill="rgb(225,218,4)" fg:x="1858" fg:w="105"/><text x="1.0909%" y="1055.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (103 samples, 0.05%)</title><rect x="0.8418%" y="1029" width="0.0466%" height="15" fill="rgb(230,182,32)" fg:x="1860" fg:w="103"/><text x="1.0918%" y="1039.50"></text></g><g><title>parking::Unparker::unpark (99 samples, 0.04%)</title><rect x="0.8436%" y="1013" width="0.0448%" height="15" fill="rgb(242,56,43)" fg:x="1864" fg:w="99"/><text x="1.0936%" y="1023.50"></text></g><g><title>parking::Inner::unpark (96 samples, 0.04%)</title><rect x="0.8449%" y="997" width="0.0434%" height="15" fill="rgb(233,99,24)" fg:x="1867" fg:w="96"/><text x="1.0949%" y="1007.50"></text></g><g><title>syscall (88 samples, 0.04%)</title><rect x="0.8486%" y="981" width="0.0398%" height="15" fill="rgb(234,209,42)" fg:x="1875" fg:w="88"/><text x="1.0986%" y="991.50"></text></g><g><title>[unknown] (84 samples, 0.04%)</title><rect x="0.8504%" y="965" width="0.0380%" height="15" fill="rgb(227,7,12)" fg:x="1879" fg:w="84"/><text x="1.1004%" y="975.50"></text></g><g><title>[unknown] (71 samples, 0.03%)</title><rect x="0.8563%" y="949" width="0.0321%" height="15" fill="rgb(245,203,43)" fg:x="1892" fg:w="71"/><text x="1.1063%" y="959.50"></text></g><g><title>[unknown] (62 samples, 0.03%)</title><rect x="0.8603%" y="933" width="0.0281%" height="15" fill="rgb(238,205,33)" fg:x="1901" fg:w="62"/><text x="1.1103%" y="943.50"></text></g><g><title>[unknown] (59 samples, 0.03%)</title><rect x="0.8617%" y="917" width="0.0267%" height="15" fill="rgb(231,56,7)" fg:x="1904" fg:w="59"/><text x="1.1117%" y="927.50"></text></g><g><title>[unknown] (50 samples, 0.02%)</title><rect x="0.8658%" y="901" width="0.0226%" height="15" fill="rgb(244,186,29)" fg:x="1913" fg:w="50"/><text x="1.1158%" y="911.50"></text></g><g><title>[unknown] (45 samples, 0.02%)</title><rect x="0.8680%" y="885" width="0.0204%" height="15" fill="rgb(234,111,31)" fg:x="1918" fg:w="45"/><text x="1.1180%" y="895.50"></text></g><g><title>[unknown] (30 samples, 0.01%)</title><rect x="0.8748%" y="869" width="0.0136%" height="15" fill="rgb(241,149,10)" fg:x="1933" fg:w="30"/><text x="1.1248%" y="879.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="0.8766%" y="853" width="0.0118%" height="15" fill="rgb(249,206,44)" fg:x="1937" fg:w="26"/><text x="1.1266%" y="863.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (123 samples, 0.06%)</title><rect x="0.8332%" y="1109" width="0.0557%" height="15" fill="rgb(251,153,30)" fg:x="1841" fg:w="123"/><text x="1.0832%" y="1119.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (126 samples, 0.06%)</title><rect x="0.8323%" y="1157" width="0.0570%" height="15" fill="rgb(239,152,38)" fg:x="1839" fg:w="126"/><text x="1.0823%" y="1167.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (126 samples, 0.06%)</title><rect x="0.8323%" y="1141" width="0.0570%" height="15" fill="rgb(249,139,47)" fg:x="1839" fg:w="126"/><text x="1.0823%" y="1151.50"></text></g><g><title>async_channel::Send&lt;T&gt;::run_with_strategy (125 samples, 0.06%)</title><rect x="0.8327%" y="1125" width="0.0566%" height="15" fill="rgb(244,64,35)" fg:x="1840" fg:w="125"/><text x="1.0827%" y="1135.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (131 samples, 0.06%)</title><rect x="0.8305%" y="1253" width="0.0593%" height="15" fill="rgb(216,46,15)" fg:x="1835" fg:w="131"/><text x="1.0805%" y="1263.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (129 samples, 0.06%)</title><rect x="0.8314%" y="1237" width="0.0584%" height="15" fill="rgb(250,74,19)" fg:x="1837" fg:w="129"/><text x="1.0814%" y="1247.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (129 samples, 0.06%)</title><rect x="0.8314%" y="1221" width="0.0584%" height="15" fill="rgb(249,42,33)" fg:x="1837" fg:w="129"/><text x="1.0814%" y="1231.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (129 samples, 0.06%)</title><rect x="0.8314%" y="1205" width="0.0584%" height="15" fill="rgb(242,149,17)" fg:x="1837" fg:w="129"/><text x="1.0814%" y="1215.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (128 samples, 0.06%)</title><rect x="0.8318%" y="1189" width="0.0579%" height="15" fill="rgb(244,29,21)" fg:x="1838" fg:w="128"/><text x="1.0818%" y="1199.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (127 samples, 0.06%)</title><rect x="0.8323%" y="1173" width="0.0575%" height="15" fill="rgb(220,130,37)" fg:x="1839" fg:w="127"/><text x="1.0823%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (54 samples, 0.02%)</title><rect x="0.9024%" y="1205" width="0.0244%" height="15" fill="rgb(211,67,2)" fg:x="1994" fg:w="54"/><text x="1.1524%" y="1215.50"></text></g><g><title>[libc.so.6] (45 samples, 0.02%)</title><rect x="0.9278%" y="1077" width="0.0204%" height="15" fill="rgb(235,68,52)" fg:x="2050" fg:w="45"/><text x="1.1778%" y="1087.50"></text></g><g><title>[libc.so.6] (29 samples, 0.01%)</title><rect x="0.9350%" y="1061" width="0.0131%" height="15" fill="rgb(246,142,3)" fg:x="2066" fg:w="29"/><text x="1.1850%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (49 samples, 0.02%)</title><rect x="0.9269%" y="1205" width="0.0222%" height="15" fill="rgb(241,25,7)" fg:x="2048" fg:w="49"/><text x="1.1769%" y="1215.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (49 samples, 0.02%)</title><rect x="0.9269%" y="1189" width="0.0222%" height="15" fill="rgb(242,119,39)" fg:x="2048" fg:w="49"/><text x="1.1769%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (49 samples, 0.02%)</title><rect x="0.9269%" y="1173" width="0.0222%" height="15" fill="rgb(241,98,45)" fg:x="2048" fg:w="49"/><text x="1.1769%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (49 samples, 0.02%)</title><rect x="0.9269%" y="1157" width="0.0222%" height="15" fill="rgb(254,28,30)" fg:x="2048" fg:w="49"/><text x="1.1769%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49 samples, 0.02%)</title><rect x="0.9269%" y="1141" width="0.0222%" height="15" fill="rgb(241,142,54)" fg:x="2048" fg:w="49"/><text x="1.1769%" y="1151.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (49 samples, 0.02%)</title><rect x="0.9269%" y="1125" width="0.0222%" height="15" fill="rgb(222,85,15)" fg:x="2048" fg:w="49"/><text x="1.1769%" y="1135.50"></text></g><g><title>alloc::alloc::alloc (49 samples, 0.02%)</title><rect x="0.9269%" y="1109" width="0.0222%" height="15" fill="rgb(210,85,47)" fg:x="2048" fg:w="49"/><text x="1.1769%" y="1119.50"></text></g><g><title>malloc (47 samples, 0.02%)</title><rect x="0.9278%" y="1093" width="0.0213%" height="15" fill="rgb(224,206,25)" fg:x="2050" fg:w="47"/><text x="1.1778%" y="1103.50"></text></g><g><title>async_executor::Runner::new (132 samples, 0.06%)</title><rect x="0.8907%" y="1253" width="0.0597%" height="15" fill="rgb(243,201,19)" fg:x="1968" fg:w="132"/><text x="1.1407%" y="1263.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::bounded (120 samples, 0.05%)</title><rect x="0.8961%" y="1237" width="0.0543%" height="15" fill="rgb(236,59,4)" fg:x="1980" fg:w="120"/><text x="1.1461%" y="1247.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::new (109 samples, 0.05%)</title><rect x="0.9011%" y="1221" width="0.0493%" height="15" fill="rgb(254,179,45)" fg:x="1991" fg:w="109"/><text x="1.1511%" y="1231.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (298 samples, 0.13%)</title><rect x="0.8305%" y="1285" width="0.1349%" height="15" fill="rgb(226,14,10)" fg:x="1835" fg:w="298"/><text x="1.0805%" y="1295.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (298 samples, 0.13%)</title><rect x="0.8305%" y="1269" width="0.1349%" height="15" fill="rgb(244,27,41)" fg:x="1835" fg:w="298"/><text x="1.0805%" y="1279.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (304 samples, 0.14%)</title><rect x="0.8287%" y="1317" width="0.1376%" height="15" fill="rgb(235,35,32)" fg:x="1831" fg:w="304"/><text x="1.0787%" y="1327.50"></text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (302 samples, 0.14%)</title><rect x="0.8296%" y="1301" width="0.1367%" height="15" fill="rgb(218,68,31)" fg:x="1833" fg:w="302"/><text x="1.0796%" y="1311.50"></text></g><g><title>async_std::task::block_on::block_on (358 samples, 0.16%)</title><rect x="0.8201%" y="1589" width="0.1620%" height="15" fill="rgb(207,120,37)" fg:x="1812" fg:w="358"/><text x="1.0701%" y="1599.50"></text></g><g><title>async_std::task::builder::Builder::blocking (358 samples, 0.16%)</title><rect x="0.8201%" y="1573" width="0.1620%" height="15" fill="rgb(227,98,0)" fg:x="1812" fg:w="358"/><text x="1.0701%" y="1583.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (353 samples, 0.16%)</title><rect x="0.8223%" y="1557" width="0.1598%" height="15" fill="rgb(207,7,3)" fg:x="1817" fg:w="353"/><text x="1.0723%" y="1567.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (352 samples, 0.16%)</title><rect x="0.8228%" y="1541" width="0.1593%" height="15" fill="rgb(206,98,19)" fg:x="1818" fg:w="352"/><text x="1.0728%" y="1551.50"></text></g><g><title>async_std::task::builder::Builder::blocking::{{closure}} (349 samples, 0.16%)</title><rect x="0.8241%" y="1525" width="0.1579%" height="15" fill="rgb(217,5,26)" fg:x="1821" fg:w="349"/><text x="1.0741%" y="1535.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (349 samples, 0.16%)</title><rect x="0.8241%" y="1509" width="0.1579%" height="15" fill="rgb(235,190,38)" fg:x="1821" fg:w="349"/><text x="1.0741%" y="1519.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (349 samples, 0.16%)</title><rect x="0.8241%" y="1493" width="0.1579%" height="15" fill="rgb(247,86,24)" fg:x="1821" fg:w="349"/><text x="1.0741%" y="1503.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (348 samples, 0.16%)</title><rect x="0.8246%" y="1477" width="0.1575%" height="15" fill="rgb(205,101,16)" fg:x="1822" fg:w="348"/><text x="1.0746%" y="1487.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (345 samples, 0.16%)</title><rect x="0.8259%" y="1461" width="0.1561%" height="15" fill="rgb(246,168,33)" fg:x="1825" fg:w="345"/><text x="1.0759%" y="1471.50"></text></g><g><title>async_std::task::builder::Builder::blocking::{{closure}}::{{closure}} (345 samples, 0.16%)</title><rect x="0.8259%" y="1445" width="0.1561%" height="15" fill="rgb(231,114,1)" fg:x="1825" fg:w="345"/><text x="1.0759%" y="1455.50"></text></g><g><title>async_global_executor::executor::block_on (345 samples, 0.16%)</title><rect x="0.8259%" y="1429" width="0.1561%" height="15" fill="rgb(207,184,53)" fg:x="1825" fg:w="345"/><text x="1.0759%" y="1439.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (345 samples, 0.16%)</title><rect x="0.8259%" y="1413" width="0.1561%" height="15" fill="rgb(224,95,51)" fg:x="1825" fg:w="345"/><text x="1.0759%" y="1423.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (345 samples, 0.16%)</title><rect x="0.8259%" y="1397" width="0.1561%" height="15" fill="rgb(212,188,45)" fg:x="1825" fg:w="345"/><text x="1.0759%" y="1407.50"></text></g><g><title>async_global_executor::executor::block_on::{{closure}} (344 samples, 0.16%)</title><rect x="0.8264%" y="1381" width="0.1557%" height="15" fill="rgb(223,154,38)" fg:x="1826" fg:w="344"/><text x="1.0764%" y="1391.50"></text></g><g><title>async_global_executor::reactor::block_on (344 samples, 0.16%)</title><rect x="0.8264%" y="1365" width="0.1557%" height="15" fill="rgb(251,22,52)" fg:x="1826" fg:w="344"/><text x="1.0764%" y="1375.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (344 samples, 0.16%)</title><rect x="0.8264%" y="1349" width="0.1557%" height="15" fill="rgb(229,209,22)" fg:x="1826" fg:w="344"/><text x="1.0764%" y="1359.50"></text></g><g><title>async_io::driver::block_on (344 samples, 0.16%)</title><rect x="0.8264%" y="1333" width="0.1557%" height="15" fill="rgb(234,138,34)" fg:x="1826" fg:w="344"/><text x="1.0764%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.01%)</title><rect x="0.9825%" y="1461" width="0.0113%" height="15" fill="rgb(212,95,11)" fg:x="2171" fg:w="25"/><text x="1.2325%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;[bitcoin::blockdata::transaction::TxIn]&gt; (25 samples, 0.01%)</title><rect x="0.9825%" y="1445" width="0.0113%" height="15" fill="rgb(240,179,47)" fg:x="2171" fg:w="25"/><text x="1.2325%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::transaction::TxIn&gt; (25 samples, 0.01%)</title><rect x="0.9825%" y="1429" width="0.0113%" height="15" fill="rgb(240,163,11)" fg:x="2171" fg:w="25"/><text x="1.2325%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxIn&gt;&gt; (30 samples, 0.01%)</title><rect x="0.9825%" y="1477" width="0.0136%" height="15" fill="rgb(236,37,12)" fg:x="2171" fg:w="30"/><text x="1.2325%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;utreexo_wallet::blockchain::Notification&gt; (46 samples, 0.02%)</title><rect x="0.9825%" y="1589" width="0.0208%" height="15" fill="rgb(232,164,16)" fg:x="2171" fg:w="46"/><text x="1.2325%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;(bitcoin::blockdata::block::Block,u32)&gt; (46 samples, 0.02%)</title><rect x="0.9825%" y="1573" width="0.0208%" height="15" fill="rgb(244,205,15)" fg:x="2171" fg:w="46"/><text x="1.2325%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::block::Block&gt; (46 samples, 0.02%)</title><rect x="0.9825%" y="1557" width="0.0208%" height="15" fill="rgb(223,117,47)" fg:x="2171" fg:w="46"/><text x="1.2325%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::Transaction&gt;&gt; (46 samples, 0.02%)</title><rect x="0.9825%" y="1541" width="0.0208%" height="15" fill="rgb(244,107,35)" fg:x="2171" fg:w="46"/><text x="1.2325%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.02%)</title><rect x="0.9825%" y="1525" width="0.0208%" height="15" fill="rgb(205,140,8)" fg:x="2171" fg:w="46"/><text x="1.2325%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;[bitcoin::blockdata::transaction::Transaction]&gt; (46 samples, 0.02%)</title><rect x="0.9825%" y="1509" width="0.0208%" height="15" fill="rgb(228,84,46)" fg:x="2171" fg:w="46"/><text x="1.2325%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::transaction::Transaction&gt; (46 samples, 0.02%)</title><rect x="0.9825%" y="1493" width="0.0208%" height="15" fill="rgb(254,188,9)" fg:x="2171" fg:w="46"/><text x="1.2325%" y="1503.50"></text></g><g><title>&lt;utreexo_wallet::blockchain::chain_state::ChainState&lt;PersistedState&gt; as utreexo_wallet::blockchain::BlockchainProviderInterface&gt;::notify (607 samples, 0.27%)</title><rect x="0.7291%" y="1605" width="0.2747%" height="15" fill="rgb(206,112,54)" fg:x="1611" fg:w="607"/><text x="0.9791%" y="1615.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::TxMerkleNode as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (24 samples, 0.01%)</title><rect x="1.0061%" y="1557" width="0.0109%" height="15" fill="rgb(216,84,49)" fg:x="2223" fg:w="24"/><text x="1.2561%" y="1567.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (24 samples, 0.01%)</title><rect x="1.0061%" y="1541" width="0.0109%" height="15" fill="rgb(214,194,35)" fg:x="2223" fg:w="24"/><text x="1.2561%" y="1551.50"></text></g><g><title>&lt;[u8: 32] as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (24 samples, 0.01%)</title><rect x="1.0061%" y="1525" width="0.0109%" height="15" fill="rgb(249,28,3)" fg:x="2223" fg:w="24"/><text x="1.2561%" y="1535.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (24 samples, 0.01%)</title><rect x="1.0061%" y="1509" width="0.0109%" height="15" fill="rgb(222,56,52)" fg:x="2223" fg:w="24"/><text x="1.2561%" y="1519.50"></text></g><g><title>std::io::Write::write_all (24 samples, 0.01%)</title><rect x="1.0061%" y="1493" width="0.0109%" height="15" fill="rgb(245,217,50)" fg:x="2223" fg:w="24"/><text x="1.2561%" y="1503.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (23 samples, 0.01%)</title><rect x="1.0065%" y="1477" width="0.0104%" height="15" fill="rgb(213,201,24)" fg:x="2224" fg:w="23"/><text x="1.2565%" y="1487.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (23 samples, 0.01%)</title><rect x="1.0065%" y="1461" width="0.0104%" height="15" fill="rgb(248,116,28)" fg:x="2224" fg:w="23"/><text x="1.2565%" y="1471.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (23 samples, 0.01%)</title><rect x="1.0065%" y="1445" width="0.0104%" height="15" fill="rgb(219,72,43)" fg:x="2224" fg:w="23"/><text x="1.2565%" y="1455.50"></text></g><g><title>&lt;bitcoin::blockdata::block::BlockHeader as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (35 samples, 0.02%)</title><rect x="1.0047%" y="1573" width="0.0158%" height="15" fill="rgb(209,138,14)" fg:x="2220" fg:w="35"/><text x="1.2547%" y="1583.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (39 samples, 0.02%)</title><rect x="1.0210%" y="1509" width="0.0177%" height="15" fill="rgb(222,18,33)" fg:x="2256" fg:w="39"/><text x="1.2710%" y="1519.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (44 samples, 0.02%)</title><rect x="1.0205%" y="1541" width="0.0199%" height="15" fill="rgb(213,199,7)" fg:x="2255" fg:w="44"/><text x="1.2705%" y="1551.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (44 samples, 0.02%)</title><rect x="1.0205%" y="1525" width="0.0199%" height="15" fill="rgb(250,110,10)" fg:x="2255" fg:w="44"/><text x="1.2705%" y="1535.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (38 samples, 0.02%)</title><rect x="1.0409%" y="1493" width="0.0172%" height="15" fill="rgb(248,123,6)" fg:x="2300" fg:w="38"/><text x="1.2909%" y="1503.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (40 samples, 0.02%)</title><rect x="1.0409%" y="1509" width="0.0181%" height="15" fill="rgb(206,91,31)" fg:x="2300" fg:w="40"/><text x="1.2909%" y="1519.50"></text></g><g><title>bitcoin::blockdata::block::BlockHeader::block_hash (121 samples, 0.05%)</title><rect x="1.0047%" y="1589" width="0.0548%" height="15" fill="rgb(211,154,13)" fg:x="2220" fg:w="121"/><text x="1.2547%" y="1599.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::BlockHash as bitcoin_hashes::Hash&gt;::from_engine (86 samples, 0.04%)</title><rect x="1.0205%" y="1573" width="0.0389%" height="15" fill="rgb(225,148,7)" fg:x="2255" fg:w="86"/><text x="1.2705%" y="1583.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (86 samples, 0.04%)</title><rect x="1.0205%" y="1557" width="0.0389%" height="15" fill="rgb(220,160,43)" fg:x="2255" fg:w="86"/><text x="1.2705%" y="1567.50"></text></g><g><title>bitcoin_hashes::Hash::hash (42 samples, 0.02%)</title><rect x="1.0405%" y="1541" width="0.0190%" height="15" fill="rgb(213,52,39)" fg:x="2299" fg:w="42"/><text x="1.2905%" y="1551.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (42 samples, 0.02%)</title><rect x="1.0405%" y="1525" width="0.0190%" height="15" fill="rgb(243,137,7)" fg:x="2299" fg:w="42"/><text x="1.2905%" y="1535.50"></text></g><g><title>&lt;bitcoin::blockdata::block::BlockHeader as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (27 samples, 0.01%)</title><rect x="1.0595%" y="1573" width="0.0122%" height="15" fill="rgb(230,79,13)" fg:x="2341" fg:w="27"/><text x="1.3095%" y="1583.50"></text></g><g><title>bitcoin::consensus::encode::serialize (28 samples, 0.01%)</title><rect x="1.0595%" y="1589" width="0.0127%" height="15" fill="rgb(247,105,23)" fg:x="2341" fg:w="28"/><text x="1.3095%" y="1599.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.03%)</title><rect x="1.1034%" y="1109" width="0.0303%" height="15" fill="rgb(223,179,41)" fg:x="2438" fg:w="67"/><text x="1.3534%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;[sled::ivec::IVec]&gt; (67 samples, 0.03%)</title><rect x="1.1034%" y="1093" width="0.0303%" height="15" fill="rgb(218,9,34)" fg:x="2438" fg:w="67"/><text x="1.3534%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::ivec::IVec&gt; (67 samples, 0.03%)</title><rect x="1.1034%" y="1077" width="0.0303%" height="15" fill="rgb(222,106,8)" fg:x="2438" fg:w="67"/><text x="1.3534%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::ivec::IVecInner&gt; (67 samples, 0.03%)</title><rect x="1.1034%" y="1061" width="0.0303%" height="15" fill="rgb(211,220,0)" fg:x="2438" fg:w="67"/><text x="1.3534%" y="1071.50"></text></g><g><title>&lt;sled::arc::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.03%)</title><rect x="1.1074%" y="1045" width="0.0262%" height="15" fill="rgb(229,52,16)" fg:x="2447" fg:w="58"/><text x="1.3574%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::node::Data&gt; (75 samples, 0.03%)</title><rect x="1.1007%" y="1157" width="0.0339%" height="15" fill="rgb(212,155,18)" fg:x="2432" fg:w="75"/><text x="1.3507%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::node::Leaf&gt; (69 samples, 0.03%)</title><rect x="1.1034%" y="1141" width="0.0312%" height="15" fill="rgb(242,21,14)" fg:x="2438" fg:w="69"/><text x="1.3534%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;sled::ivec::IVec&gt;&gt; (69 samples, 0.03%)</title><rect x="1.1034%" y="1125" width="0.0312%" height="15" fill="rgb(222,19,48)" fg:x="2438" fg:w="69"/><text x="1.3534%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::atomic::Owned&lt;sled::pagecache::Page&gt;&gt; (105 samples, 0.05%)</title><rect x="1.0889%" y="1285" width="0.0475%" height="15" fill="rgb(232,45,27)" fg:x="2406" fg:w="105"/><text x="1.3389%" y="1295.50"></text></g><g><title>&lt;crossbeam_epoch::atomic::Owned&lt;T&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.05%)</title><rect x="1.0889%" y="1269" width="0.0475%" height="15" fill="rgb(249,103,42)" fg:x="2406" fg:w="105"/><text x="1.3389%" y="1279.50"></text></g><g><title>&lt;T as crossbeam_epoch::atomic::Pointable&gt;::drop (105 samples, 0.05%)</title><rect x="1.0889%" y="1253" width="0.0475%" height="15" fill="rgb(246,81,33)" fg:x="2406" fg:w="105"/><text x="1.3389%" y="1263.50"></text></g><g><title>core::mem::drop (105 samples, 0.05%)</title><rect x="1.0889%" y="1237" width="0.0475%" height="15" fill="rgb(252,33,42)" fg:x="2406" fg:w="105"/><text x="1.3389%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Page&gt;&gt; (105 samples, 0.05%)</title><rect x="1.0889%" y="1221" width="0.0475%" height="15" fill="rgb(209,212,41)" fg:x="2406" fg:w="105"/><text x="1.3389%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::pagecache::Page&gt; (95 samples, 0.04%)</title><rect x="1.0934%" y="1205" width="0.0430%" height="15" fill="rgb(207,154,6)" fg:x="2416" fg:w="95"/><text x="1.3434%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt;&gt; (95 samples, 0.04%)</title><rect x="1.0934%" y="1189" width="0.0430%" height="15" fill="rgb(223,64,47)" fg:x="2416" fg:w="95"/><text x="1.3434%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt; (86 samples, 0.04%)</title><rect x="1.0975%" y="1173" width="0.0389%" height="15" fill="rgb(211,161,38)" fg:x="2425" fg:w="86"/><text x="1.3475%" y="1183.50"></text></g><g><title>core::mem::drop (111 samples, 0.05%)</title><rect x="1.0889%" y="1301" width="0.0502%" height="15" fill="rgb(219,138,40)" fg:x="2406" fg:w="111"/><text x="1.3389%" y="1311.50"></text></g><g><title>core::mem::drop (115 samples, 0.05%)</title><rect x="1.0875%" y="1413" width="0.0520%" height="15" fill="rgb(241,228,46)" fg:x="2403" fg:w="115"/><text x="1.3375%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::SealedBag&gt; (115 samples, 0.05%)</title><rect x="1.0875%" y="1397" width="0.0520%" height="15" fill="rgb(223,209,38)" fg:x="2403" fg:w="115"/><text x="1.3375%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::Bag&gt; (115 samples, 0.05%)</title><rect x="1.0875%" y="1381" width="0.0520%" height="15" fill="rgb(236,164,45)" fg:x="2403" fg:w="115"/><text x="1.3375%" y="1391.50"></text></g><g><title>&lt;crossbeam_epoch::internal::Bag as core::ops::drop::Drop&gt;::drop (115 samples, 0.05%)</title><rect x="1.0875%" y="1365" width="0.0520%" height="15" fill="rgb(231,15,5)" fg:x="2403" fg:w="115"/><text x="1.3375%" y="1375.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::call (115 samples, 0.05%)</title><rect x="1.0875%" y="1349" width="0.0520%" height="15" fill="rgb(252,35,15)" fg:x="2403" fg:w="115"/><text x="1.3375%" y="1359.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::new::call (112 samples, 0.05%)</title><rect x="1.0889%" y="1333" width="0.0507%" height="15" fill="rgb(248,181,18)" fg:x="2406" fg:w="112"/><text x="1.3389%" y="1343.50"></text></g><g><title>crossbeam_epoch::guard::Guard::defer_unchecked::{{closure}} (112 samples, 0.05%)</title><rect x="1.0889%" y="1317" width="0.0507%" height="15" fill="rgb(233,39,42)" fg:x="2406" fg:w="112"/><text x="1.3389%" y="1327.50"></text></g><g><title>sled::pin (122 samples, 0.06%)</title><rect x="1.0853%" y="1557" width="0.0552%" height="15" fill="rgb(238,110,33)" fg:x="2398" fg:w="122"/><text x="1.3353%" y="1567.50"></text></g><g><title>crossbeam_epoch::default::pin (119 samples, 0.05%)</title><rect x="1.0866%" y="1541" width="0.0539%" height="15" fill="rgb(233,195,10)" fg:x="2401" fg:w="119"/><text x="1.3366%" y="1551.50"></text></g><g><title>crossbeam_epoch::default::with_handle (119 samples, 0.05%)</title><rect x="1.0866%" y="1525" width="0.0539%" height="15" fill="rgb(254,105,3)" fg:x="2401" fg:w="119"/><text x="1.3366%" y="1535.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (119 samples, 0.05%)</title><rect x="1.0866%" y="1509" width="0.0539%" height="15" fill="rgb(221,225,9)" fg:x="2401" fg:w="119"/><text x="1.3366%" y="1519.50"></text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (119 samples, 0.05%)</title><rect x="1.0866%" y="1493" width="0.0539%" height="15" fill="rgb(224,227,45)" fg:x="2401" fg:w="119"/><text x="1.3366%" y="1503.50"></text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (119 samples, 0.05%)</title><rect x="1.0866%" y="1477" width="0.0539%" height="15" fill="rgb(229,198,43)" fg:x="2401" fg:w="119"/><text x="1.3366%" y="1487.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (119 samples, 0.05%)</title><rect x="1.0866%" y="1461" width="0.0539%" height="15" fill="rgb(206,209,35)" fg:x="2401" fg:w="119"/><text x="1.3366%" y="1471.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (119 samples, 0.05%)</title><rect x="1.0866%" y="1445" width="0.0539%" height="15" fill="rgb(245,195,53)" fg:x="2401" fg:w="119"/><text x="1.3366%" y="1455.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (117 samples, 0.05%)</title><rect x="1.0875%" y="1429" width="0.0530%" height="15" fill="rgb(240,92,26)" fg:x="2403" fg:w="117"/><text x="1.3375%" y="1439.50"></text></g><g><title>sled::node::Node::node_kv_pair (36 samples, 0.02%)</title><rect x="1.1522%" y="1541" width="0.0163%" height="15" fill="rgb(207,40,23)" fg:x="2546" fg:w="36"/><text x="1.4022%" y="1551.50"></text></g><g><title>&lt;sled::ivec::IVec as core::clone::Clone&gt;::clone (74 samples, 0.03%)</title><rect x="1.1735%" y="1413" width="0.0335%" height="15" fill="rgb(223,111,35)" fg:x="2593" fg:w="74"/><text x="1.4235%" y="1423.50"></text></g><g><title>&lt;sled::ivec::IVecInner as core::clone::Clone&gt;::clone (74 samples, 0.03%)</title><rect x="1.1735%" y="1397" width="0.0335%" height="15" fill="rgb(229,147,28)" fg:x="2593" fg:w="74"/><text x="1.4235%" y="1407.50"></text></g><g><title>&lt;sled::arc::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (71 samples, 0.03%)</title><rect x="1.1749%" y="1381" width="0.0321%" height="15" fill="rgb(211,29,28)" fg:x="2596" fg:w="71"/><text x="1.4249%" y="1391.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (71 samples, 0.03%)</title><rect x="1.1749%" y="1365" width="0.0321%" height="15" fill="rgb(228,72,33)" fg:x="2596" fg:w="71"/><text x="1.4249%" y="1375.50"></text></g><g><title>core::sync::atomic::atomic_add (71 samples, 0.03%)</title><rect x="1.1749%" y="1349" width="0.0321%" height="15" fill="rgb(205,214,31)" fg:x="2596" fg:w="71"/><text x="1.4249%" y="1359.50"></text></g><g><title>&lt;sled::node::Node as core::clone::Clone&gt;::clone (91 samples, 0.04%)</title><rect x="1.1703%" y="1525" width="0.0412%" height="15" fill="rgb(224,111,15)" fg:x="2586" fg:w="91"/><text x="1.4203%" y="1535.50"></text></g><g><title>&lt;sled::node::Data as core::clone::Clone&gt;::clone (88 samples, 0.04%)</title><rect x="1.1717%" y="1509" width="0.0398%" height="15" fill="rgb(253,21,26)" fg:x="2589" fg:w="88"/><text x="1.4217%" y="1519.50"></text></g><g><title>&lt;sled::node::Leaf as core::clone::Clone&gt;::clone (88 samples, 0.04%)</title><rect x="1.1717%" y="1493" width="0.0398%" height="15" fill="rgb(245,139,43)" fg:x="2589" fg:w="88"/><text x="1.4217%" y="1503.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (86 samples, 0.04%)</title><rect x="1.1726%" y="1477" width="0.0389%" height="15" fill="rgb(252,170,7)" fg:x="2591" fg:w="86"/><text x="1.4226%" y="1487.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (85 samples, 0.04%)</title><rect x="1.1731%" y="1461" width="0.0385%" height="15" fill="rgb(231,118,14)" fg:x="2592" fg:w="85"/><text x="1.4231%" y="1471.50"></text></g><g><title>alloc::slice::hack::to_vec (85 samples, 0.04%)</title><rect x="1.1731%" y="1445" width="0.0385%" height="15" fill="rgb(238,83,0)" fg:x="2592" fg:w="85"/><text x="1.4231%" y="1455.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (85 samples, 0.04%)</title><rect x="1.1731%" y="1429" width="0.0385%" height="15" fill="rgb(221,39,39)" fg:x="2592" fg:w="85"/><text x="1.4231%" y="1439.50"></text></g><g><title>[libc.so.6] (83 samples, 0.04%)</title><rect x="1.2378%" y="1333" width="0.0376%" height="15" fill="rgb(222,119,46)" fg:x="2735" fg:w="83"/><text x="1.4878%" y="1343.50"></text></g><g><title>[libc.so.6] (80 samples, 0.04%)</title><rect x="1.2391%" y="1317" width="0.0362%" height="15" fill="rgb(222,165,49)" fg:x="2738" fg:w="80"/><text x="1.4891%" y="1327.50"></text></g><g><title>[libc.so.6] (37 samples, 0.02%)</title><rect x="1.2586%" y="1301" width="0.0167%" height="15" fill="rgb(219,113,52)" fg:x="2781" fg:w="37"/><text x="1.5086%" y="1311.50"></text></g><g><title>alloc::raw_vec::finish_grow (109 samples, 0.05%)</title><rect x="1.2305%" y="1413" width="0.0493%" height="15" fill="rgb(214,7,15)" fg:x="2719" fg:w="109"/><text x="1.4805%" y="1423.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (102 samples, 0.05%)</title><rect x="1.2337%" y="1397" width="0.0462%" height="15" fill="rgb(235,32,4)" fg:x="2726" fg:w="102"/><text x="1.4837%" y="1407.50"></text></g><g><title>alloc::alloc::Global::grow_impl (102 samples, 0.05%)</title><rect x="1.2337%" y="1381" width="0.0462%" height="15" fill="rgb(238,90,54)" fg:x="2726" fg:w="102"/><text x="1.4837%" y="1391.50"></text></g><g><title>alloc::alloc::realloc (102 samples, 0.05%)</title><rect x="1.2337%" y="1365" width="0.0462%" height="15" fill="rgb(213,208,19)" fg:x="2726" fg:w="102"/><text x="1.4837%" y="1375.50"></text></g><g><title>realloc (100 samples, 0.05%)</title><rect x="1.2346%" y="1349" width="0.0453%" height="15" fill="rgb(233,156,4)" fg:x="2728" fg:w="100"/><text x="1.4846%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (112 samples, 0.05%)</title><rect x="1.2301%" y="1477" width="0.0507%" height="15" fill="rgb(207,194,5)" fg:x="2718" fg:w="112"/><text x="1.4801%" y="1487.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (112 samples, 0.05%)</title><rect x="1.2301%" y="1461" width="0.0507%" height="15" fill="rgb(206,111,30)" fg:x="2718" fg:w="112"/><text x="1.4801%" y="1471.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (111 samples, 0.05%)</title><rect x="1.2305%" y="1445" width="0.0502%" height="15" fill="rgb(243,70,54)" fg:x="2719" fg:w="111"/><text x="1.4805%" y="1455.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (111 samples, 0.05%)</title><rect x="1.2305%" y="1429" width="0.0502%" height="15" fill="rgb(242,28,8)" fg:x="2719" fg:w="111"/><text x="1.4805%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (115 samples, 0.05%)</title><rect x="1.2301%" y="1493" width="0.0520%" height="15" fill="rgb(219,106,18)" fg:x="2718" fg:w="115"/><text x="1.4801%" y="1503.50"></text></g><g><title>sled::node::Node::apply (122 samples, 0.06%)</title><rect x="1.2292%" y="1525" width="0.0552%" height="15" fill="rgb(244,222,10)" fg:x="2716" fg:w="122"/><text x="1.4792%" y="1535.50"></text></g><g><title>sled::node::Node::set_leaf (120 samples, 0.05%)</title><rect x="1.2301%" y="1509" width="0.0543%" height="15" fill="rgb(236,179,52)" fg:x="2718" fg:w="120"/><text x="1.4801%" y="1519.50"></text></g><g><title>sled::pagecache::logger::Log::reserve_inner (29 samples, 0.01%)</title><rect x="1.3016%" y="1509" width="0.0131%" height="15" fill="rgb(213,23,39)" fg:x="2876" fg:w="29"/><text x="1.5516%" y="1519.50"></text></g><g><title>sled::serialization::Serialize::serialize (24 samples, 0.01%)</title><rect x="1.3147%" y="1509" width="0.0109%" height="15" fill="rgb(238,48,10)" fg:x="2905" fg:w="24"/><text x="1.5647%" y="1519.50"></text></g><g><title>ZSTD_HcFindBestMatch_noDict_4 (77 samples, 0.03%)</title><rect x="1.3568%" y="1301" width="0.0348%" height="15" fill="rgb(251,196,23)" fg:x="2998" fg:w="77"/><text x="1.6068%" y="1311.50"></text></g><g><title>ZSTD_HcFindBestMatch (70 samples, 0.03%)</title><rect x="1.3600%" y="1285" width="0.0317%" height="15" fill="rgb(250,152,24)" fg:x="3005" fg:w="70"/><text x="1.6100%" y="1295.50"></text></g><g><title>ZSTD_insertAndFindFirstIndex_internal (31 samples, 0.01%)</title><rect x="1.3776%" y="1269" width="0.0140%" height="15" fill="rgb(209,150,17)" fg:x="3044" fg:w="31"/><text x="1.6276%" y="1279.50"></text></g><g><title>ZSTD_compressBlock_lazy (99 samples, 0.04%)</title><rect x="1.3482%" y="1333" width="0.0448%" height="15" fill="rgb(234,202,34)" fg:x="2979" fg:w="99"/><text x="1.5982%" y="1343.50"></text></g><g><title>ZSTD_compressBlock_lazy_generic (98 samples, 0.04%)</title><rect x="1.3487%" y="1317" width="0.0444%" height="15" fill="rgb(253,148,53)" fg:x="2980" fg:w="98"/><text x="1.5987%" y="1327.50"></text></g><g><title>ZSTD_buildSeqStore (105 samples, 0.05%)</title><rect x="1.3478%" y="1349" width="0.0475%" height="15" fill="rgb(218,129,16)" fg:x="2978" fg:w="105"/><text x="1.5978%" y="1359.50"></text></g><g><title>ZSTD_buildCTable (76 samples, 0.03%)</title><rect x="1.4066%" y="1301" width="0.0344%" height="15" fill="rgb(216,85,19)" fg:x="3108" fg:w="76"/><text x="1.6566%" y="1311.50"></text></g><g><title>FSE_buildCTable_wksp (74 samples, 0.03%)</title><rect x="1.4075%" y="1285" width="0.0335%" height="15" fill="rgb(235,228,7)" fg:x="3110" fg:w="74"/><text x="1.6575%" y="1295.50"></text></g><g><title>ZSTD_buildSequencesStatistics (86 samples, 0.04%)</title><rect x="1.4025%" y="1317" width="0.0389%" height="15" fill="rgb(245,175,0)" fg:x="3099" fg:w="86"/><text x="1.6525%" y="1327.50"></text></g><g><title>HUF_buildCTableFromTree (59 samples, 0.03%)</title><rect x="1.4659%" y="1253" width="0.0267%" height="15" fill="rgb(208,168,36)" fg:x="3239" fg:w="59"/><text x="1.7159%" y="1263.50"></text></g><g><title>HUF_buildTree (30 samples, 0.01%)</title><rect x="1.4926%" y="1253" width="0.0136%" height="15" fill="rgb(246,171,24)" fg:x="3298" fg:w="30"/><text x="1.7426%" y="1263.50"></text></g><g><title>HUF_buildCTable_wksp (166 samples, 0.08%)</title><rect x="1.4645%" y="1269" width="0.0751%" height="15" fill="rgb(215,142,24)" fg:x="3236" fg:w="166"/><text x="1.7145%" y="1279.50"></text></g><g><title>HUF_sort (74 samples, 0.03%)</title><rect x="1.5062%" y="1253" width="0.0335%" height="15" fill="rgb(250,187,7)" fg:x="3328" fg:w="74"/><text x="1.7562%" y="1263.50"></text></g><g><title>FSE_encodeSymbol (24 samples, 0.01%)</title><rect x="1.5623%" y="1221" width="0.0109%" height="15" fill="rgb(228,66,33)" fg:x="3452" fg:w="24"/><text x="1.8123%" y="1231.50"></text></g><g><title>FSE_compress_usingCTable_generic (33 samples, 0.01%)</title><rect x="1.5587%" y="1237" width="0.0149%" height="15" fill="rgb(234,215,21)" fg:x="3444" fg:w="33"/><text x="1.8087%" y="1247.50"></text></g><g><title>HUF_writeCTable_wksp (96 samples, 0.04%)</title><rect x="1.5460%" y="1269" width="0.0434%" height="15" fill="rgb(222,191,20)" fg:x="3416" fg:w="96"/><text x="1.7960%" y="1279.50"></text></g><g><title>HUF_compressWeights (80 samples, 0.04%)</title><rect x="1.5532%" y="1253" width="0.0362%" height="15" fill="rgb(245,79,54)" fg:x="3432" fg:w="80"/><text x="1.8032%" y="1263.50"></text></g><g><title>HIST_count_simple (23 samples, 0.01%)</title><rect x="1.5790%" y="1237" width="0.0104%" height="15" fill="rgb(240,10,37)" fg:x="3489" fg:w="23"/><text x="1.8290%" y="1247.50"></text></g><g><title>HUF_compress1X_repeat (299 samples, 0.14%)</title><rect x="1.4546%" y="1301" width="0.1353%" height="15" fill="rgb(214,192,32)" fg:x="3214" fg:w="299"/><text x="1.7046%" y="1311.50"></text></g><g><title>HUF_compress_internal (294 samples, 0.13%)</title><rect x="1.4568%" y="1285" width="0.1331%" height="15" fill="rgb(209,36,54)" fg:x="3219" fg:w="294"/><text x="1.7068%" y="1295.50"></text></g><g><title>ZSTD_compressLiterals (331 samples, 0.15%)</title><rect x="1.4414%" y="1317" width="0.1498%" height="15" fill="rgb(220,10,11)" fg:x="3185" fg:w="331"/><text x="1.6914%" y="1327.50"></text></g><g><title>ZSTD_entropyCompressSeqStore_internal (439 samples, 0.20%)</title><rect x="1.3953%" y="1333" width="0.1987%" height="15" fill="rgb(221,106,17)" fg:x="3083" fg:w="439"/><text x="1.6453%" y="1343.50"></text></g><g><title>ZSTD_compressBlock_internal (551 samples, 0.25%)</title><rect x="1.3450%" y="1365" width="0.2494%" height="15" fill="rgb(251,142,44)" fg:x="2972" fg:w="551"/><text x="1.5950%" y="1375.50"></text></g><g><title>ZSTD_entropyCompressSeqStore (440 samples, 0.20%)</title><rect x="1.3953%" y="1349" width="0.1991%" height="15" fill="rgb(238,13,15)" fg:x="3083" fg:w="440"/><text x="1.6453%" y="1359.50"></text></g><g><title>ZSTD_compress_frameChunk (556 samples, 0.25%)</title><rect x="1.3437%" y="1381" width="0.2516%" height="15" fill="rgb(208,107,27)" fg:x="2969" fg:w="556"/><text x="1.5937%" y="1391.50"></text></g><g><title>ZSTD_compressEnd (569 samples, 0.26%)</title><rect x="1.3392%" y="1413" width="0.2575%" height="15" fill="rgb(205,136,37)" fg:x="2959" fg:w="569"/><text x="1.5892%" y="1423.50"></text></g><g><title>ZSTD_compressContinue_internal (562 samples, 0.25%)</title><rect x="1.3423%" y="1397" width="0.2543%" height="15" fill="rgb(250,205,27)" fg:x="2966" fg:w="562"/><text x="1.5923%" y="1407.50"></text></g><g><title>ZSTD_compress_advanced_internal (46 samples, 0.02%)</title><rect x="1.5998%" y="1397" width="0.0208%" height="15" fill="rgb(210,80,43)" fg:x="3535" fg:w="46"/><text x="1.8498%" y="1407.50"></text></g><g><title>ZSTD_compressBegin_internal (46 samples, 0.02%)</title><rect x="1.5998%" y="1381" width="0.0208%" height="15" fill="rgb(247,160,36)" fg:x="3535" fg:w="46"/><text x="1.8498%" y="1391.50"></text></g><g><title>ZSTD_resetCCtx_internal (44 samples, 0.02%)</title><rect x="1.6007%" y="1365" width="0.0199%" height="15" fill="rgb(234,13,49)" fg:x="3537" fg:w="44"/><text x="1.8507%" y="1375.50"></text></g><g><title>zstd::block::compressor::Compressor::compress (657 samples, 0.30%)</title><rect x="1.3346%" y="1493" width="0.2973%" height="15" fill="rgb(234,122,0)" fg:x="2949" fg:w="657"/><text x="1.5846%" y="1503.50"></text></g><g><title>zstd::block::compressor::Compressor::compress_to_buffer (651 samples, 0.29%)</title><rect x="1.3373%" y="1477" width="0.2946%" height="15" fill="rgb(207,146,38)" fg:x="2955" fg:w="651"/><text x="1.5873%" y="1487.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict (651 samples, 0.29%)</title><rect x="1.3373%" y="1461" width="0.2946%" height="15" fill="rgb(207,177,25)" fg:x="2955" fg:w="651"/><text x="1.5873%" y="1471.50"></text></g><g><title>zstd_safe::WriteBuf::write_from (651 samples, 0.29%)</title><rect x="1.3373%" y="1445" width="0.2946%" height="15" fill="rgb(211,178,42)" fg:x="2955" fg:w="651"/><text x="1.5873%" y="1455.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict::{{closure}} (647 samples, 0.29%)</title><rect x="1.3392%" y="1429" width="0.2928%" height="15" fill="rgb(230,69,54)" fg:x="2959" fg:w="647"/><text x="1.5892%" y="1439.50"></text></g><g><title>ZSTD_compress_usingDict (78 samples, 0.04%)</title><rect x="1.5967%" y="1413" width="0.0353%" height="15" fill="rgb(214,135,41)" fg:x="3528" fg:w="78"/><text x="1.8467%" y="1423.50"></text></g><g><title>ZSTD_getParams_internal (25 samples, 0.01%)</title><rect x="1.6207%" y="1397" width="0.0113%" height="15" fill="rgb(237,67,25)" fg:x="3581" fg:w="25"/><text x="1.8707%" y="1407.50"></text></g><g><title>ZSTD_initCCtx (34 samples, 0.02%)</title><rect x="1.6329%" y="1429" width="0.0154%" height="15" fill="rgb(222,189,50)" fg:x="3608" fg:w="34"/><text x="1.8829%" y="1439.50"></text></g><g><title>[libc.so.6] (36 samples, 0.02%)</title><rect x="1.6501%" y="1413" width="0.0163%" height="15" fill="rgb(245,148,34)" fg:x="3646" fg:w="36"/><text x="1.9001%" y="1423.50"></text></g><g><title>sled::pagecache::logger::Log::reserve (836 samples, 0.38%)</title><rect x="1.2912%" y="1525" width="0.3783%" height="15" fill="rgb(222,29,6)" fg:x="2853" fg:w="836"/><text x="1.5412%" y="1535.50"></text></g><g><title>zstd::block::compress (760 samples, 0.34%)</title><rect x="1.3256%" y="1509" width="0.3440%" height="15" fill="rgb(221,189,43)" fg:x="2929" fg:w="760"/><text x="1.5756%" y="1519.50"></text></g><g><title>zstd::block::compressor::Compressor::new (83 samples, 0.04%)</title><rect x="1.6320%" y="1493" width="0.0376%" height="15" fill="rgb(207,36,27)" fg:x="3606" fg:w="83"/><text x="1.8820%" y="1503.50"></text></g><g><title>zstd::block::compressor::Compressor::with_dict (83 samples, 0.04%)</title><rect x="1.6320%" y="1477" width="0.0376%" height="15" fill="rgb(217,90,24)" fg:x="3606" fg:w="83"/><text x="1.8820%" y="1487.50"></text></g><g><title>ZSTD_createCCtx (83 samples, 0.04%)</title><rect x="1.6320%" y="1461" width="0.0376%" height="15" fill="rgb(224,66,35)" fg:x="3606" fg:w="83"/><text x="1.8820%" y="1471.50"></text></g><g><title>ZSTD_createCCtx_advanced (82 samples, 0.04%)</title><rect x="1.6324%" y="1445" width="0.0371%" height="15" fill="rgb(221,13,50)" fg:x="3607" fg:w="82"/><text x="1.8824%" y="1455.50"></text></g><g><title>malloc (47 samples, 0.02%)</title><rect x="1.6483%" y="1429" width="0.0213%" height="15" fill="rgb(236,68,49)" fg:x="3642" fg:w="47"/><text x="1.8983%" y="1439.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (30 samples, 0.01%)</title><rect x="1.6709%" y="1445" width="0.0136%" height="15" fill="rgb(229,146,28)" fg:x="3692" fg:w="30"/><text x="1.9209%" y="1455.50"></text></g><g><title>sled::calculate_message_crc32 (34 samples, 0.02%)</title><rect x="1.6700%" y="1493" width="0.0154%" height="15" fill="rgb(225,31,38)" fg:x="3690" fg:w="34"/><text x="1.9200%" y="1503.50"></text></g><g><title>crc32fast::Hasher::update (33 samples, 0.01%)</title><rect x="1.6704%" y="1477" width="0.0149%" height="15" fill="rgb(250,208,3)" fg:x="3691" fg:w="33"/><text x="1.9204%" y="1487.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (32 samples, 0.01%)</title><rect x="1.6709%" y="1461" width="0.0145%" height="15" fill="rgb(246,54,23)" fg:x="3692" fg:w="32"/><text x="1.9209%" y="1471.50"></text></g><g><title>sled::pagecache::PageCache::link (1,144 samples, 0.52%)</title><rect x="1.1685%" y="1541" width="0.5177%" height="15" fill="rgb(243,76,11)" fg:x="2582" fg:w="1144"/><text x="1.4185%" y="1551.50"></text></g><g><title>sled::pagecache::reservation::Reservation::complete (37 samples, 0.02%)</title><rect x="1.6695%" y="1525" width="0.0167%" height="15" fill="rgb(245,21,50)" fg:x="3689" fg:w="37"/><text x="1.9195%" y="1535.50"></text></g><g><title>sled::pagecache::reservation::Reservation::flush (36 samples, 0.02%)</title><rect x="1.6700%" y="1509" width="0.0163%" height="15" fill="rgb(228,9,43)" fg:x="3690" fg:w="36"/><text x="1.9200%" y="1519.50"></text></g><g><title>sled::node::Node::index_next_node (49 samples, 0.02%)</title><rect x="1.6949%" y="1525" width="0.0222%" height="15" fill="rgb(208,100,47)" fg:x="3745" fg:w="49"/><text x="1.9449%" y="1535.50"></text></g><g><title>sled::binary_search::binary_search_lub (39 samples, 0.02%)</title><rect x="1.6994%" y="1509" width="0.0177%" height="15" fill="rgb(232,26,8)" fg:x="3755" fg:w="39"/><text x="1.9494%" y="1519.50"></text></g><g><title>sled::binary_search::binary_search (38 samples, 0.02%)</title><rect x="1.6999%" y="1493" width="0.0172%" height="15" fill="rgb(216,166,38)" fg:x="3756" fg:w="38"/><text x="1.9499%" y="1503.50"></text></g><g><title>ZSTD_HcFindBestMatch_noDict_4 (28 samples, 0.01%)</title><rect x="1.7483%" y="1237" width="0.0127%" height="15" fill="rgb(251,202,51)" fg:x="3863" fg:w="28"/><text x="1.9983%" y="1247.50"></text></g><g><title>ZSTD_HcFindBestMatch (28 samples, 0.01%)</title><rect x="1.7483%" y="1221" width="0.0127%" height="15" fill="rgb(254,216,34)" fg:x="3863" fg:w="28"/><text x="1.9983%" y="1231.50"></text></g><g><title>ZSTD_buildSeqStore (35 samples, 0.02%)</title><rect x="1.7460%" y="1285" width="0.0158%" height="15" fill="rgb(251,32,27)" fg:x="3858" fg:w="35"/><text x="1.9960%" y="1295.50"></text></g><g><title>ZSTD_compressBlock_lazy (35 samples, 0.02%)</title><rect x="1.7460%" y="1269" width="0.0158%" height="15" fill="rgb(208,127,28)" fg:x="3858" fg:w="35"/><text x="1.9960%" y="1279.50"></text></g><g><title>ZSTD_compressBlock_lazy_generic (35 samples, 0.02%)</title><rect x="1.7460%" y="1253" width="0.0158%" height="15" fill="rgb(224,137,22)" fg:x="3858" fg:w="35"/><text x="1.9960%" y="1263.50"></text></g><g><title>HUF_buildCTable_wksp (33 samples, 0.01%)</title><rect x="1.7745%" y="1205" width="0.0149%" height="15" fill="rgb(254,70,32)" fg:x="3921" fg:w="33"/><text x="2.0245%" y="1215.50"></text></g><g><title>ZSTD_compressLiterals (50 samples, 0.02%)</title><rect x="1.7709%" y="1253" width="0.0226%" height="15" fill="rgb(229,75,37)" fg:x="3913" fg:w="50"/><text x="2.0209%" y="1263.50"></text></g><g><title>HUF_compress4X_repeat (48 samples, 0.02%)</title><rect x="1.7718%" y="1237" width="0.0217%" height="15" fill="rgb(252,64,23)" fg:x="3915" fg:w="48"/><text x="2.0218%" y="1247.50"></text></g><g><title>HUF_compress_internal (48 samples, 0.02%)</title><rect x="1.7718%" y="1221" width="0.0217%" height="15" fill="rgb(232,162,48)" fg:x="3915" fg:w="48"/><text x="2.0218%" y="1231.50"></text></g><g><title>ZSTD_compressEnd (108 samples, 0.05%)</title><rect x="1.7460%" y="1349" width="0.0489%" height="15" fill="rgb(246,160,12)" fg:x="3858" fg:w="108"/><text x="1.9960%" y="1359.50"></text></g><g><title>ZSTD_compressContinue_internal (108 samples, 0.05%)</title><rect x="1.7460%" y="1333" width="0.0489%" height="15" fill="rgb(247,166,0)" fg:x="3858" fg:w="108"/><text x="1.9960%" y="1343.50"></text></g><g><title>ZSTD_compress_frameChunk (108 samples, 0.05%)</title><rect x="1.7460%" y="1317" width="0.0489%" height="15" fill="rgb(249,219,21)" fg:x="3858" fg:w="108"/><text x="1.9960%" y="1327.50"></text></g><g><title>ZSTD_compressBlock_internal (108 samples, 0.05%)</title><rect x="1.7460%" y="1301" width="0.0489%" height="15" fill="rgb(205,209,3)" fg:x="3858" fg:w="108"/><text x="1.9960%" y="1311.50"></text></g><g><title>ZSTD_entropyCompressSeqStore (73 samples, 0.03%)</title><rect x="1.7619%" y="1285" width="0.0330%" height="15" fill="rgb(243,44,1)" fg:x="3893" fg:w="73"/><text x="2.0119%" y="1295.50"></text></g><g><title>ZSTD_entropyCompressSeqStore_internal (73 samples, 0.03%)</title><rect x="1.7619%" y="1269" width="0.0330%" height="15" fill="rgb(206,159,16)" fg:x="3893" fg:w="73"/><text x="2.0119%" y="1279.50"></text></g><g><title>zstd::block::compressor::Compressor::compress (117 samples, 0.05%)</title><rect x="1.7460%" y="1429" width="0.0530%" height="15" fill="rgb(244,77,30)" fg:x="3858" fg:w="117"/><text x="1.9960%" y="1439.50"></text></g><g><title>zstd::block::compressor::Compressor::compress_to_buffer (117 samples, 0.05%)</title><rect x="1.7460%" y="1413" width="0.0530%" height="15" fill="rgb(218,69,12)" fg:x="3858" fg:w="117"/><text x="1.9960%" y="1423.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict (117 samples, 0.05%)</title><rect x="1.7460%" y="1397" width="0.0530%" height="15" fill="rgb(212,87,7)" fg:x="3858" fg:w="117"/><text x="1.9960%" y="1407.50"></text></g><g><title>zstd_safe::WriteBuf::write_from (117 samples, 0.05%)</title><rect x="1.7460%" y="1381" width="0.0530%" height="15" fill="rgb(245,114,25)" fg:x="3858" fg:w="117"/><text x="1.9960%" y="1391.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict::{{closure}} (117 samples, 0.05%)</title><rect x="1.7460%" y="1365" width="0.0530%" height="15" fill="rgb(210,61,42)" fg:x="3858" fg:w="117"/><text x="1.9960%" y="1375.50"></text></g><g><title>sled::pagecache::logger::Log::reserve (136 samples, 0.06%)</title><rect x="1.7397%" y="1461" width="0.0615%" height="15" fill="rgb(211,52,33)" fg:x="3844" fg:w="136"/><text x="1.9897%" y="1471.50"></text></g><g><title>zstd::block::compress (126 samples, 0.06%)</title><rect x="1.7442%" y="1445" width="0.0570%" height="15" fill="rgb(234,58,33)" fg:x="3854" fg:w="126"/><text x="1.9942%" y="1455.50"></text></g><g><title>sled::pagecache::PageCache::cas_page (153 samples, 0.07%)</title><rect x="1.7324%" y="1477" width="0.0692%" height="15" fill="rgb(220,115,36)" fg:x="3828" fg:w="153"/><text x="1.9824%" y="1487.50"></text></g><g><title>sled::pagecache::PageCache::allocate (156 samples, 0.07%)</title><rect x="1.7315%" y="1509" width="0.0706%" height="15" fill="rgb(243,153,54)" fg:x="3826" fg:w="156"/><text x="1.9815%" y="1519.50"></text></g><g><title>sled::pagecache::PageCache::allocate_inner (155 samples, 0.07%)</title><rect x="1.7320%" y="1493" width="0.0701%" height="15" fill="rgb(251,47,18)" fg:x="3827" fg:w="155"/><text x="1.9820%" y="1503.50"></text></g><g><title>&lt;sled::node::Node as sled::serialization::Serialize&gt;::serialize_into (24 samples, 0.01%)</title><rect x="1.8107%" y="1445" width="0.0109%" height="15" fill="rgb(242,102,42)" fg:x="4001" fg:w="24"/><text x="2.0607%" y="1455.50"></text></g><g><title>sled::serialization::Serialize::serialize (32 samples, 0.01%)</title><rect x="1.8107%" y="1461" width="0.0145%" height="15" fill="rgb(234,31,38)" fg:x="4001" fg:w="32"/><text x="2.0607%" y="1471.50"></text></g><g><title>ZSTD_HcFindBestMatch_noDict_4 (106 samples, 0.05%)</title><rect x="1.8383%" y="1253" width="0.0480%" height="15" fill="rgb(221,117,51)" fg:x="4062" fg:w="106"/><text x="2.0883%" y="1263.50"></text></g><g><title>ZSTD_HcFindBestMatch (99 samples, 0.04%)</title><rect x="1.8415%" y="1237" width="0.0448%" height="15" fill="rgb(212,20,18)" fg:x="4069" fg:w="99"/><text x="2.0915%" y="1247.50"></text></g><g><title>ZSTD_insertAndFindFirstIndex_internal (43 samples, 0.02%)</title><rect x="1.8669%" y="1221" width="0.0195%" height="15" fill="rgb(245,133,36)" fg:x="4125" fg:w="43"/><text x="2.1169%" y="1231.50"></text></g><g><title>ZSTD_buildSeqStore (142 samples, 0.06%)</title><rect x="1.8288%" y="1301" width="0.0643%" height="15" fill="rgb(212,6,19)" fg:x="4041" fg:w="142"/><text x="2.0788%" y="1311.50"></text></g><g><title>ZSTD_compressBlock_lazy (142 samples, 0.06%)</title><rect x="1.8288%" y="1285" width="0.0643%" height="15" fill="rgb(218,1,36)" fg:x="4041" fg:w="142"/><text x="2.0788%" y="1295.50"></text></g><g><title>ZSTD_compressBlock_lazy_generic (141 samples, 0.06%)</title><rect x="1.8293%" y="1269" width="0.0638%" height="15" fill="rgb(246,84,54)" fg:x="4042" fg:w="141"/><text x="2.0793%" y="1279.50"></text></g><g><title>ZSTD_buildSequencesStatistics (26 samples, 0.01%)</title><rect x="1.8936%" y="1269" width="0.0118%" height="15" fill="rgb(242,110,6)" fg:x="4184" fg:w="26"/><text x="2.1436%" y="1279.50"></text></g><g><title>HUF_buildCTable_wksp (50 samples, 0.02%)</title><rect x="1.9103%" y="1221" width="0.0226%" height="15" fill="rgb(214,47,5)" fg:x="4221" fg:w="50"/><text x="2.1603%" y="1231.50"></text></g><g><title>HUF_compress4X_repeat (83 samples, 0.04%)</title><rect x="1.9071%" y="1253" width="0.0376%" height="15" fill="rgb(218,159,25)" fg:x="4214" fg:w="83"/><text x="2.1571%" y="1263.50"></text></g><g><title>HUF_compress_internal (83 samples, 0.04%)</title><rect x="1.9071%" y="1237" width="0.0376%" height="15" fill="rgb(215,211,28)" fg:x="4214" fg:w="83"/><text x="2.1571%" y="1247.50"></text></g><g><title>ZSTD_compressLiterals (88 samples, 0.04%)</title><rect x="1.9053%" y="1269" width="0.0398%" height="15" fill="rgb(238,59,32)" fg:x="4210" fg:w="88"/><text x="2.1553%" y="1279.50"></text></g><g><title>ZSTD_compressEnd (274 samples, 0.12%)</title><rect x="1.8284%" y="1365" width="0.1240%" height="15" fill="rgb(226,82,3)" fg:x="4040" fg:w="274"/><text x="2.0784%" y="1375.50"></text></g><g><title>ZSTD_compressContinue_internal (274 samples, 0.12%)</title><rect x="1.8284%" y="1349" width="0.1240%" height="15" fill="rgb(240,164,32)" fg:x="4040" fg:w="274"/><text x="2.0784%" y="1359.50"></text></g><g><title>ZSTD_compress_frameChunk (274 samples, 0.12%)</title><rect x="1.8284%" y="1333" width="0.1240%" height="15" fill="rgb(232,46,7)" fg:x="4040" fg:w="274"/><text x="2.0784%" y="1343.50"></text></g><g><title>ZSTD_compressBlock_internal (273 samples, 0.12%)</title><rect x="1.8288%" y="1317" width="0.1236%" height="15" fill="rgb(229,129,53)" fg:x="4041" fg:w="273"/><text x="2.0788%" y="1327.50"></text></g><g><title>ZSTD_entropyCompressSeqStore (131 samples, 0.06%)</title><rect x="1.8931%" y="1301" width="0.0593%" height="15" fill="rgb(234,188,29)" fg:x="4183" fg:w="131"/><text x="2.1431%" y="1311.50"></text></g><g><title>ZSTD_entropyCompressSeqStore_internal (131 samples, 0.06%)</title><rect x="1.8931%" y="1285" width="0.0593%" height="15" fill="rgb(246,141,4)" fg:x="4183" fg:w="131"/><text x="2.1431%" y="1295.50"></text></g><g><title>ZSTD_compress_usingDict (29 samples, 0.01%)</title><rect x="1.9524%" y="1365" width="0.0131%" height="15" fill="rgb(229,23,39)" fg:x="4314" fg:w="29"/><text x="2.2024%" y="1375.50"></text></g><g><title>ZSTD_compress_advanced_internal (29 samples, 0.01%)</title><rect x="1.9524%" y="1349" width="0.0131%" height="15" fill="rgb(206,12,3)" fg:x="4314" fg:w="29"/><text x="2.2024%" y="1359.50"></text></g><g><title>ZSTD_compressBegin_internal (29 samples, 0.01%)</title><rect x="1.9524%" y="1333" width="0.0131%" height="15" fill="rgb(252,226,20)" fg:x="4314" fg:w="29"/><text x="2.2024%" y="1343.50"></text></g><g><title>ZSTD_resetCCtx_internal (28 samples, 0.01%)</title><rect x="1.9528%" y="1317" width="0.0127%" height="15" fill="rgb(216,123,35)" fg:x="4315" fg:w="28"/><text x="2.2028%" y="1327.50"></text></g><g><title>zstd::block::compressor::Compressor::compress (306 samples, 0.14%)</title><rect x="1.8275%" y="1445" width="0.1385%" height="15" fill="rgb(212,68,40)" fg:x="4038" fg:w="306"/><text x="2.0775%" y="1455.50"></text></g><g><title>zstd::block::compressor::Compressor::compress_to_buffer (304 samples, 0.14%)</title><rect x="1.8284%" y="1429" width="0.1376%" height="15" fill="rgb(254,125,32)" fg:x="4040" fg:w="304"/><text x="2.0784%" y="1439.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict (304 samples, 0.14%)</title><rect x="1.8284%" y="1413" width="0.1376%" height="15" fill="rgb(253,97,22)" fg:x="4040" fg:w="304"/><text x="2.0784%" y="1423.50"></text></g><g><title>zstd_safe::WriteBuf::write_from (304 samples, 0.14%)</title><rect x="1.8284%" y="1397" width="0.1376%" height="15" fill="rgb(241,101,14)" fg:x="4040" fg:w="304"/><text x="2.0784%" y="1407.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict::{{closure}} (304 samples, 0.14%)</title><rect x="1.8284%" y="1381" width="0.1376%" height="15" fill="rgb(238,103,29)" fg:x="4040" fg:w="304"/><text x="2.0784%" y="1391.50"></text></g><g><title>sled::pagecache::logger::Log::reserve (360 samples, 0.16%)</title><rect x="1.8071%" y="1477" width="0.1629%" height="15" fill="rgb(233,195,47)" fg:x="3993" fg:w="360"/><text x="2.0571%" y="1487.50"></text></g><g><title>zstd::block::compress (320 samples, 0.14%)</title><rect x="1.8252%" y="1461" width="0.1448%" height="15" fill="rgb(246,218,30)" fg:x="4033" fg:w="320"/><text x="2.0752%" y="1471.50"></text></g><g><title>sled::pagecache::PageCache::cas_page (371 samples, 0.17%)</title><rect x="1.8030%" y="1493" width="0.1679%" height="15" fill="rgb(219,145,47)" fg:x="3984" fg:w="371"/><text x="2.0530%" y="1503.50"></text></g><g><title>ZSTD_HcFindBestMatch_noDict_4 (91 samples, 0.04%)</title><rect x="1.9963%" y="1237" width="0.0412%" height="15" fill="rgb(243,12,26)" fg:x="4411" fg:w="91"/><text x="2.2463%" y="1247.50"></text></g><g><title>ZSTD_HcFindBestMatch (89 samples, 0.04%)</title><rect x="1.9972%" y="1221" width="0.0403%" height="15" fill="rgb(214,87,16)" fg:x="4413" fg:w="89"/><text x="2.2472%" y="1231.50"></text></g><g><title>ZSTD_insertAndFindFirstIndex_internal (47 samples, 0.02%)</title><rect x="2.0162%" y="1205" width="0.0213%" height="15" fill="rgb(208,99,42)" fg:x="4455" fg:w="47"/><text x="2.2662%" y="1215.50"></text></g><g><title>ZSTD_buildSeqStore (110 samples, 0.05%)</title><rect x="1.9886%" y="1285" width="0.0498%" height="15" fill="rgb(253,99,2)" fg:x="4394" fg:w="110"/><text x="2.2386%" y="1295.50"></text></g><g><title>ZSTD_compressBlock_lazy (110 samples, 0.05%)</title><rect x="1.9886%" y="1269" width="0.0498%" height="15" fill="rgb(220,168,23)" fg:x="4394" fg:w="110"/><text x="2.2386%" y="1279.50"></text></g><g><title>ZSTD_compressBlock_lazy_generic (110 samples, 0.05%)</title><rect x="1.9886%" y="1253" width="0.0498%" height="15" fill="rgb(242,38,24)" fg:x="4394" fg:w="110"/><text x="2.2386%" y="1263.50"></text></g><g><title>HUF_buildCTable_wksp (31 samples, 0.01%)</title><rect x="2.0533%" y="1205" width="0.0140%" height="15" fill="rgb(225,182,9)" fg:x="4537" fg:w="31"/><text x="2.3033%" y="1215.50"></text></g><g><title>ZSTD_compressLiterals (68 samples, 0.03%)</title><rect x="2.0483%" y="1253" width="0.0308%" height="15" fill="rgb(243,178,37)" fg:x="4526" fg:w="68"/><text x="2.2983%" y="1263.50"></text></g><g><title>HUF_compress4X_repeat (64 samples, 0.03%)</title><rect x="2.0501%" y="1237" width="0.0290%" height="15" fill="rgb(232,139,19)" fg:x="4530" fg:w="64"/><text x="2.3001%" y="1247.50"></text></g><g><title>HUF_compress_internal (64 samples, 0.03%)</title><rect x="2.0501%" y="1221" width="0.0290%" height="15" fill="rgb(225,201,24)" fg:x="4530" fg:w="64"/><text x="2.3001%" y="1231.50"></text></g><g><title>ZSTD_compressEnd (201 samples, 0.09%)</title><rect x="1.9886%" y="1349" width="0.0910%" height="15" fill="rgb(221,47,46)" fg:x="4394" fg:w="201"/><text x="2.2386%" y="1359.50"></text></g><g><title>ZSTD_compressContinue_internal (201 samples, 0.09%)</title><rect x="1.9886%" y="1333" width="0.0910%" height="15" fill="rgb(249,23,13)" fg:x="4394" fg:w="201"/><text x="2.2386%" y="1343.50"></text></g><g><title>ZSTD_compress_frameChunk (201 samples, 0.09%)</title><rect x="1.9886%" y="1317" width="0.0910%" height="15" fill="rgb(219,9,5)" fg:x="4394" fg:w="201"/><text x="2.2386%" y="1327.50"></text></g><g><title>ZSTD_compressBlock_internal (201 samples, 0.09%)</title><rect x="1.9886%" y="1301" width="0.0910%" height="15" fill="rgb(254,171,16)" fg:x="4394" fg:w="201"/><text x="2.2386%" y="1311.50"></text></g><g><title>ZSTD_entropyCompressSeqStore (91 samples, 0.04%)</title><rect x="2.0384%" y="1285" width="0.0412%" height="15" fill="rgb(230,171,20)" fg:x="4504" fg:w="91"/><text x="2.2884%" y="1295.50"></text></g><g><title>ZSTD_entropyCompressSeqStore_internal (91 samples, 0.04%)</title><rect x="2.0384%" y="1269" width="0.0412%" height="15" fill="rgb(210,71,41)" fg:x="4504" fg:w="91"/><text x="2.2884%" y="1279.50"></text></g><g><title>zstd::block::compressor::Compressor::compress (210 samples, 0.10%)</title><rect x="1.9886%" y="1429" width="0.0950%" height="15" fill="rgb(206,173,20)" fg:x="4394" fg:w="210"/><text x="2.2386%" y="1439.50"></text></g><g><title>zstd::block::compressor::Compressor::compress_to_buffer (210 samples, 0.10%)</title><rect x="1.9886%" y="1413" width="0.0950%" height="15" fill="rgb(233,88,34)" fg:x="4394" fg:w="210"/><text x="2.2386%" y="1423.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict (210 samples, 0.10%)</title><rect x="1.9886%" y="1397" width="0.0950%" height="15" fill="rgb(223,209,46)" fg:x="4394" fg:w="210"/><text x="2.2386%" y="1407.50"></text></g><g><title>zstd_safe::WriteBuf::write_from (210 samples, 0.10%)</title><rect x="1.9886%" y="1381" width="0.0950%" height="15" fill="rgb(250,43,18)" fg:x="4394" fg:w="210"/><text x="2.2386%" y="1391.50"></text></g><g><title>zstd_safe::CCtx::compress_using_dict::{{closure}} (210 samples, 0.10%)</title><rect x="1.9886%" y="1365" width="0.0950%" height="15" fill="rgb(208,13,10)" fg:x="4394" fg:w="210"/><text x="2.2386%" y="1375.50"></text></g><g><title>sled::pagecache::logger::Log::reserve (227 samples, 0.10%)</title><rect x="1.9823%" y="1461" width="0.1027%" height="15" fill="rgb(212,200,36)" fg:x="4380" fg:w="227"/><text x="2.2323%" y="1471.50"></text></g><g><title>zstd::block::compress (215 samples, 0.10%)</title><rect x="1.9877%" y="1445" width="0.0973%" height="15" fill="rgb(225,90,30)" fg:x="4392" fg:w="215"/><text x="2.2377%" y="1455.50"></text></g><g><title>sled::pagecache::PageCache::cas_page (242 samples, 0.11%)</title><rect x="1.9759%" y="1477" width="0.1095%" height="15" fill="rgb(236,182,39)" fg:x="4366" fg:w="242"/><text x="2.2259%" y="1487.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (31 samples, 0.01%)</title><rect x="2.0864%" y="1333" width="0.0140%" height="15" fill="rgb(212,144,35)" fg:x="4610" fg:w="31"/><text x="2.3364%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (31 samples, 0.01%)</title><rect x="2.0864%" y="1317" width="0.0140%" height="15" fill="rgb(228,63,44)" fg:x="4610" fg:w="31"/><text x="2.3364%" y="1327.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.01%)</title><rect x="2.0864%" y="1301" width="0.0140%" height="15" fill="rgb(228,109,6)" fg:x="4610" fg:w="31"/><text x="2.3364%" y="1311.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (31 samples, 0.01%)</title><rect x="2.0864%" y="1285" width="0.0140%" height="15" fill="rgb(238,117,24)" fg:x="4610" fg:w="31"/><text x="2.3364%" y="1295.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (31 samples, 0.01%)</title><rect x="2.0864%" y="1269" width="0.0140%" height="15" fill="rgb(242,26,26)" fg:x="4610" fg:w="31"/><text x="2.3364%" y="1279.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (31 samples, 0.01%)</title><rect x="2.0864%" y="1253" width="0.0140%" height="15" fill="rgb(221,92,48)" fg:x="4610" fg:w="31"/><text x="2.3364%" y="1263.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (31 samples, 0.01%)</title><rect x="2.0864%" y="1237" width="0.0140%" height="15" fill="rgb(209,209,32)" fg:x="4610" fg:w="31"/><text x="2.3364%" y="1247.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (31 samples, 0.01%)</title><rect x="2.0864%" y="1221" width="0.0140%" height="15" fill="rgb(221,70,22)" fg:x="4610" fg:w="31"/><text x="2.3364%" y="1231.50"></text></g><g><title>sled::pagecache::PageCache::get::{{closure}} (31 samples, 0.01%)</title><rect x="2.0864%" y="1205" width="0.0140%" height="15" fill="rgb(248,145,5)" fg:x="4610" fg:w="31"/><text x="2.3364%" y="1215.50"></text></g><g><title>sled::pagecache::PageCache::pull (31 samples, 0.01%)</title><rect x="2.0864%" y="1189" width="0.0140%" height="15" fill="rgb(226,116,26)" fg:x="4610" fg:w="31"/><text x="2.3364%" y="1199.50"></text></g><g><title>sled::pagecache::logger::Log::read (29 samples, 0.01%)</title><rect x="2.0873%" y="1173" width="0.0131%" height="15" fill="rgb(244,5,17)" fg:x="4612" fg:w="29"/><text x="2.3373%" y="1183.50"></text></g><g><title>sled::pagecache::logger::read_message (28 samples, 0.01%)</title><rect x="2.0877%" y="1157" width="0.0127%" height="15" fill="rgb(252,159,33)" fg:x="4613" fg:w="28"/><text x="2.3377%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.02%)</title><rect x="2.1004%" y="1333" width="0.0190%" height="15" fill="rgb(206,71,0)" fg:x="4641" fg:w="42"/><text x="2.3504%" y="1343.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (42 samples, 0.02%)</title><rect x="2.1004%" y="1317" width="0.0190%" height="15" fill="rgb(233,118,54)" fg:x="4641" fg:w="42"/><text x="2.3504%" y="1327.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (42 samples, 0.02%)</title><rect x="2.1004%" y="1301" width="0.0190%" height="15" fill="rgb(234,83,48)" fg:x="4641" fg:w="42"/><text x="2.3504%" y="1311.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (42 samples, 0.02%)</title><rect x="2.1004%" y="1285" width="0.0190%" height="15" fill="rgb(228,3,54)" fg:x="4641" fg:w="42"/><text x="2.3504%" y="1295.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (42 samples, 0.02%)</title><rect x="2.1004%" y="1269" width="0.0190%" height="15" fill="rgb(226,155,13)" fg:x="4641" fg:w="42"/><text x="2.3504%" y="1279.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (42 samples, 0.02%)</title><rect x="2.1004%" y="1253" width="0.0190%" height="15" fill="rgb(241,28,37)" fg:x="4641" fg:w="42"/><text x="2.3504%" y="1263.50"></text></g><g><title>sled::pagecache::PageCache::get::{{closure}} (42 samples, 0.02%)</title><rect x="2.1004%" y="1237" width="0.0190%" height="15" fill="rgb(233,93,10)" fg:x="4641" fg:w="42"/><text x="2.3504%" y="1247.50"></text></g><g><title>sled::pagecache::PageCache::pull (42 samples, 0.02%)</title><rect x="2.1004%" y="1221" width="0.0190%" height="15" fill="rgb(225,113,19)" fg:x="4641" fg:w="42"/><text x="2.3504%" y="1231.50"></text></g><g><title>sled::pagecache::logger::Log::read (33 samples, 0.01%)</title><rect x="2.1045%" y="1205" width="0.0149%" height="15" fill="rgb(241,2,18)" fg:x="4650" fg:w="33"/><text x="2.3545%" y="1215.50"></text></g><g><title>sled::pagecache::logger::read_message (33 samples, 0.01%)</title><rect x="2.1045%" y="1189" width="0.0149%" height="15" fill="rgb(228,207,21)" fg:x="4650" fg:w="33"/><text x="2.3545%" y="1199.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (74 samples, 0.03%)</title><rect x="2.0864%" y="1461" width="0.0335%" height="15" fill="rgb(213,211,35)" fg:x="4610" fg:w="74"/><text x="2.3364%" y="1471.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (74 samples, 0.03%)</title><rect x="2.0864%" y="1445" width="0.0335%" height="15" fill="rgb(209,83,10)" fg:x="4610" fg:w="74"/><text x="2.3364%" y="1455.50"></text></g><g><title>core::iter::adapters::try_process (74 samples, 0.03%)</title><rect x="2.0864%" y="1429" width="0.0335%" height="15" fill="rgb(209,164,1)" fg:x="4610" fg:w="74"/><text x="2.3364%" y="1439.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (74 samples, 0.03%)</title><rect x="2.0864%" y="1413" width="0.0335%" height="15" fill="rgb(213,184,43)" fg:x="4610" fg:w="74"/><text x="2.3364%" y="1423.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (74 samples, 0.03%)</title><rect x="2.0864%" y="1397" width="0.0335%" height="15" fill="rgb(231,61,34)" fg:x="4610" fg:w="74"/><text x="2.3364%" y="1407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (74 samples, 0.03%)</title><rect x="2.0864%" y="1381" width="0.0335%" height="15" fill="rgb(235,75,3)" fg:x="4610" fg:w="74"/><text x="2.3364%" y="1391.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (74 samples, 0.03%)</title><rect x="2.0864%" y="1365" width="0.0335%" height="15" fill="rgb(220,106,47)" fg:x="4610" fg:w="74"/><text x="2.3364%" y="1375.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (74 samples, 0.03%)</title><rect x="2.0864%" y="1349" width="0.0335%" height="15" fill="rgb(210,196,33)" fg:x="4610" fg:w="74"/><text x="2.3364%" y="1359.50"></text></g><g><title>sled::pagecache::PageCache::get (81 samples, 0.04%)</title><rect x="2.0854%" y="1477" width="0.0367%" height="15" fill="rgb(229,154,42)" fg:x="4608" fg:w="81"/><text x="2.3354%" y="1487.50"></text></g><g><title>sled::pagecache::PageCache::rewrite_page (335 samples, 0.15%)</title><rect x="1.9709%" y="1493" width="0.1516%" height="15" fill="rgb(228,114,26)" fg:x="4355" fg:w="335"/><text x="2.2209%" y="1503.50"></text></g><g><title>sled::tree::Tree::split_node (901 samples, 0.41%)</title><rect x="1.7171%" y="1525" width="0.4078%" height="15" fill="rgb(208,144,1)" fg:x="3794" fg:w="901"/><text x="1.9671%" y="1535.50"></text></g><g><title>sled::pagecache::PageCache::replace (713 samples, 0.32%)</title><rect x="1.8021%" y="1509" width="0.3227%" height="15" fill="rgb(239,112,37)" fg:x="3982" fg:w="713"/><text x="2.0521%" y="1519.50"></text></g><g><title>&lt;std::fs::File as std::os::unix::fs::FileExt&gt;::read_at (25 samples, 0.01%)</title><rect x="2.1456%" y="1125" width="0.0113%" height="15" fill="rgb(210,96,50)" fg:x="4741" fg:w="25"/><text x="2.3956%" y="1135.50"></text></g><g><title>std::sys::unix::fs::File::read_at (25 samples, 0.01%)</title><rect x="2.1456%" y="1109" width="0.0113%" height="15" fill="rgb(222,178,2)" fg:x="4741" fg:w="25"/><text x="2.3956%" y="1119.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_at (25 samples, 0.01%)</title><rect x="2.1456%" y="1093" width="0.0113%" height="15" fill="rgb(226,74,18)" fg:x="4741" fg:w="25"/><text x="2.3956%" y="1103.50"></text></g><g><title>__libc_pread (25 samples, 0.01%)</title><rect x="2.1456%" y="1077" width="0.0113%" height="15" fill="rgb(225,67,54)" fg:x="4741" fg:w="25"/><text x="2.3956%" y="1087.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="2.1465%" y="1061" width="0.0104%" height="15" fill="rgb(251,92,32)" fg:x="4743" fg:w="23"/><text x="2.3965%" y="1071.50"></text></g><g><title>&lt;std::fs::File as sled::pagecache::logger::ReadAt&gt;::pread_exact (26 samples, 0.01%)</title><rect x="2.1456%" y="1173" width="0.0118%" height="15" fill="rgb(228,149,22)" fg:x="4741" fg:w="26"/><text x="2.3956%" y="1183.50"></text></g><g><title>sled::pagecache::parallel_io_unix::pread_exact (26 samples, 0.01%)</title><rect x="2.1456%" y="1157" width="0.0118%" height="15" fill="rgb(243,54,13)" fg:x="4741" fg:w="26"/><text x="2.3956%" y="1167.50"></text></g><g><title>std::os::unix::fs::FileExt::read_exact_at (26 samples, 0.01%)</title><rect x="2.1456%" y="1141" width="0.0118%" height="15" fill="rgb(243,180,28)" fg:x="4741" fg:w="26"/><text x="2.3956%" y="1151.50"></text></g><g><title>__libc_pread (59 samples, 0.03%)</title><rect x="2.1583%" y="1093" width="0.0267%" height="15" fill="rgb(208,167,24)" fg:x="4769" fg:w="59"/><text x="2.4083%" y="1103.50"></text></g><g><title>[unknown] (56 samples, 0.03%)</title><rect x="2.1597%" y="1077" width="0.0253%" height="15" fill="rgb(245,73,45)" fg:x="4772" fg:w="56"/><text x="2.4097%" y="1087.50"></text></g><g><title>[unknown] (48 samples, 0.02%)</title><rect x="2.1633%" y="1061" width="0.0217%" height="15" fill="rgb(237,203,48)" fg:x="4780" fg:w="48"/><text x="2.4133%" y="1071.50"></text></g><g><title>[unknown] (42 samples, 0.02%)</title><rect x="2.1660%" y="1045" width="0.0190%" height="15" fill="rgb(211,197,16)" fg:x="4786" fg:w="42"/><text x="2.4160%" y="1055.50"></text></g><g><title>[unknown] (40 samples, 0.02%)</title><rect x="2.1669%" y="1029" width="0.0181%" height="15" fill="rgb(243,99,51)" fg:x="4788" fg:w="40"/><text x="2.4169%" y="1039.50"></text></g><g><title>[unknown] (36 samples, 0.02%)</title><rect x="2.1687%" y="1013" width="0.0163%" height="15" fill="rgb(215,123,29)" fg:x="4792" fg:w="36"/><text x="2.4187%" y="1023.50"></text></g><g><title>[unknown] (27 samples, 0.01%)</title><rect x="2.1728%" y="997" width="0.0122%" height="15" fill="rgb(239,186,37)" fg:x="4801" fg:w="27"/><text x="2.4228%" y="1007.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="2.1737%" y="981" width="0.0113%" height="15" fill="rgb(252,136,39)" fg:x="4803" fg:w="25"/><text x="2.4237%" y="991.50"></text></g><g><title>&lt;std::fs::File as sled::pagecache::logger::ReadAt&gt;::pread_exact_or_eof (62 samples, 0.03%)</title><rect x="2.1574%" y="1173" width="0.0281%" height="15" fill="rgb(223,213,32)" fg:x="4767" fg:w="62"/><text x="2.4074%" y="1183.50"></text></g><g><title>sled::pagecache::parallel_io_unix::pread_exact_or_eof (62 samples, 0.03%)</title><rect x="2.1574%" y="1157" width="0.0281%" height="15" fill="rgb(233,115,5)" fg:x="4767" fg:w="62"/><text x="2.4074%" y="1167.50"></text></g><g><title>&lt;std::fs::File as std::os::unix::fs::FileExt&gt;::read_at (62 samples, 0.03%)</title><rect x="2.1574%" y="1141" width="0.0281%" height="15" fill="rgb(207,226,44)" fg:x="4767" fg:w="62"/><text x="2.4074%" y="1151.50"></text></g><g><title>std::sys::unix::fs::File::read_at (60 samples, 0.03%)</title><rect x="2.1583%" y="1125" width="0.0272%" height="15" fill="rgb(208,126,0)" fg:x="4769" fg:w="60"/><text x="2.4083%" y="1135.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_at (60 samples, 0.03%)</title><rect x="2.1583%" y="1109" width="0.0272%" height="15" fill="rgb(244,66,21)" fg:x="4769" fg:w="60"/><text x="2.4083%" y="1119.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (177 samples, 0.08%)</title><rect x="2.1343%" y="1285" width="0.0801%" height="15" fill="rgb(222,97,12)" fg:x="4716" fg:w="177"/><text x="2.3843%" y="1295.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (177 samples, 0.08%)</title><rect x="2.1343%" y="1269" width="0.0801%" height="15" fill="rgb(219,213,19)" fg:x="4716" fg:w="177"/><text x="2.3843%" y="1279.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (177 samples, 0.08%)</title><rect x="2.1343%" y="1253" width="0.0801%" height="15" fill="rgb(252,169,30)" fg:x="4716" fg:w="177"/><text x="2.3843%" y="1263.50"></text></g><g><title>sled::pagecache::PageCache::get::{{closure}} (177 samples, 0.08%)</title><rect x="2.1343%" y="1237" width="0.0801%" height="15" fill="rgb(206,32,51)" fg:x="4716" fg:w="177"/><text x="2.3843%" y="1247.50"></text></g><g><title>sled::pagecache::PageCache::pull (177 samples, 0.08%)</title><rect x="2.1343%" y="1221" width="0.0801%" height="15" fill="rgb(250,172,42)" fg:x="4716" fg:w="177"/><text x="2.3843%" y="1231.50"></text></g><g><title>sled::pagecache::logger::Log::read (161 samples, 0.07%)</title><rect x="2.1416%" y="1205" width="0.0729%" height="15" fill="rgb(209,34,43)" fg:x="4732" fg:w="161"/><text x="2.3916%" y="1215.50"></text></g><g><title>sled::pagecache::logger::read_message (157 samples, 0.07%)</title><rect x="2.1434%" y="1189" width="0.0711%" height="15" fill="rgb(223,11,35)" fg:x="4736" fg:w="157"/><text x="2.3934%" y="1199.50"></text></g><g><title>sled::pagecache::maybe_decompress (40 samples, 0.02%)</title><rect x="2.1963%" y="1173" width="0.0181%" height="15" fill="rgb(251,219,26)" fg:x="4853" fg:w="40"/><text x="2.4463%" y="1183.50"></text></g><g><title>zstd::stream::functions::decode_all (39 samples, 0.02%)</title><rect x="2.1968%" y="1157" width="0.0177%" height="15" fill="rgb(231,119,3)" fg:x="4854" fg:w="39"/><text x="2.4468%" y="1167.50"></text></g><g><title>zstd::stream::functions::copy_decode (39 samples, 0.02%)</title><rect x="2.1968%" y="1141" width="0.0177%" height="15" fill="rgb(216,97,11)" fg:x="4854" fg:w="39"/><text x="2.4468%" y="1151.50"></text></g><g><title>zstd::stream::read::Decoder&lt;std::io::buffered::bufreader::BufReader&lt;R&gt;&gt;::new (34 samples, 0.02%)</title><rect x="2.1990%" y="1125" width="0.0154%" height="15" fill="rgb(223,59,9)" fg:x="4859" fg:w="34"/><text x="2.4490%" y="1135.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (178 samples, 0.08%)</title><rect x="2.1343%" y="1317" width="0.0806%" height="15" fill="rgb(233,93,31)" fg:x="4716" fg:w="178"/><text x="2.3843%" y="1327.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (178 samples, 0.08%)</title><rect x="2.1343%" y="1301" width="0.0806%" height="15" fill="rgb(239,81,33)" fg:x="4716" fg:w="178"/><text x="2.3843%" y="1311.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (179 samples, 0.08%)</title><rect x="2.1343%" y="1333" width="0.0810%" height="15" fill="rgb(213,120,34)" fg:x="4716" fg:w="179"/><text x="2.3843%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (180 samples, 0.08%)</title><rect x="2.1343%" y="1365" width="0.0815%" height="15" fill="rgb(243,49,53)" fg:x="4716" fg:w="180"/><text x="2.3843%" y="1375.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (180 samples, 0.08%)</title><rect x="2.1343%" y="1349" width="0.0815%" height="15" fill="rgb(247,216,33)" fg:x="4716" fg:w="180"/><text x="2.3843%" y="1359.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.01%)</title><rect x="2.2321%" y="853" width="0.0131%" height="15" fill="rgb(226,26,14)" fg:x="4932" fg:w="29"/><text x="2.4821%" y="863.50"></text></g><g><title>malloc (29 samples, 0.01%)</title><rect x="2.2321%" y="837" width="0.0131%" height="15" fill="rgb(215,49,53)" fg:x="4932" fg:w="29"/><text x="2.4821%" y="847.50"></text></g><g><title>&lt;sled::ivec::IVec as sled::serialization::Serialize&gt;::deserialize (32 samples, 0.01%)</title><rect x="2.2312%" y="933" width="0.0145%" height="15" fill="rgb(245,162,40)" fg:x="4930" fg:w="32"/><text x="2.4812%" y="943.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (30 samples, 0.01%)</title><rect x="2.2321%" y="917" width="0.0136%" height="15" fill="rgb(229,68,17)" fg:x="4932" fg:w="30"/><text x="2.4821%" y="927.50"></text></g><g><title>&lt;sled::ivec::IVec as core::convert::From&lt;&amp;[u8]&gt;&gt;::from (30 samples, 0.01%)</title><rect x="2.2321%" y="901" width="0.0136%" height="15" fill="rgb(213,182,10)" fg:x="4932" fg:w="30"/><text x="2.4821%" y="911.50"></text></g><g><title>&lt;sled::arc::Arc&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (30 samples, 0.01%)</title><rect x="2.2321%" y="885" width="0.0136%" height="15" fill="rgb(245,125,30)" fg:x="4932" fg:w="30"/><text x="2.4821%" y="895.50"></text></g><g><title>sled::arc::Arc&lt;T&gt;::copy_from_slice (30 samples, 0.01%)</title><rect x="2.2321%" y="869" width="0.0136%" height="15" fill="rgb(232,202,2)" fg:x="4932" fg:w="30"/><text x="2.4821%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (48 samples, 0.02%)</title><rect x="2.2244%" y="981" width="0.0217%" height="15" fill="rgb(237,140,51)" fg:x="4915" fg:w="48"/><text x="2.4744%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (47 samples, 0.02%)</title><rect x="2.2248%" y="965" width="0.0213%" height="15" fill="rgb(236,157,25)" fg:x="4916" fg:w="47"/><text x="2.4748%" y="975.50"></text></g><g><title>&lt;sled::serialization::ConsumeSequence&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.02%)</title><rect x="2.2276%" y="949" width="0.0186%" height="15" fill="rgb(219,209,0)" fg:x="4922" fg:w="41"/><text x="2.4776%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (52 samples, 0.02%)</title><rect x="2.2244%" y="1013" width="0.0235%" height="15" fill="rgb(240,116,54)" fg:x="4915" fg:w="52"/><text x="2.4744%" y="1023.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (52 samples, 0.02%)</title><rect x="2.2244%" y="997" width="0.0235%" height="15" fill="rgb(216,10,36)" fg:x="4915" fg:w="52"/><text x="2.4744%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.02%)</title><rect x="2.2244%" y="1029" width="0.0244%" height="15" fill="rgb(222,72,44)" fg:x="4915" fg:w="54"/><text x="2.4744%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (74 samples, 0.03%)</title><rect x="2.2239%" y="1061" width="0.0335%" height="15" fill="rgb(232,159,9)" fg:x="4914" fg:w="74"/><text x="2.4739%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (74 samples, 0.03%)</title><rect x="2.2239%" y="1045" width="0.0335%" height="15" fill="rgb(210,39,32)" fg:x="4914" fg:w="74"/><text x="2.4739%" y="1055.50"></text></g><g><title>&lt;sled::node::Node as sled::serialization::Serialize&gt;::deserialize (93 samples, 0.04%)</title><rect x="2.2199%" y="1237" width="0.0421%" height="15" fill="rgb(216,194,45)" fg:x="4905" fg:w="93"/><text x="2.4699%" y="1247.50"></text></g><g><title>&lt;sled::node::Data as sled::serialization::Serialize&gt;::deserialize (89 samples, 0.04%)</title><rect x="2.2217%" y="1221" width="0.0403%" height="15" fill="rgb(218,18,35)" fg:x="4909" fg:w="89"/><text x="2.4717%" y="1231.50"></text></g><g><title>sled::serialization::deserialize_bounded_sequence (85 samples, 0.04%)</title><rect x="2.2235%" y="1205" width="0.0385%" height="15" fill="rgb(207,83,51)" fg:x="4913" fg:w="85"/><text x="2.4735%" y="1215.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (85 samples, 0.04%)</title><rect x="2.2235%" y="1189" width="0.0385%" height="15" fill="rgb(225,63,43)" fg:x="4913" fg:w="85"/><text x="2.4735%" y="1199.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (85 samples, 0.04%)</title><rect x="2.2235%" y="1173" width="0.0385%" height="15" fill="rgb(207,57,36)" fg:x="4913" fg:w="85"/><text x="2.4735%" y="1183.50"></text></g><g><title>core::iter::adapters::try_process (85 samples, 0.04%)</title><rect x="2.2235%" y="1157" width="0.0385%" height="15" fill="rgb(216,99,33)" fg:x="4913" fg:w="85"/><text x="2.4735%" y="1167.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (85 samples, 0.04%)</title><rect x="2.2235%" y="1141" width="0.0385%" height="15" fill="rgb(225,42,16)" fg:x="4913" fg:w="85"/><text x="2.4735%" y="1151.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (85 samples, 0.04%)</title><rect x="2.2235%" y="1125" width="0.0385%" height="15" fill="rgb(220,201,45)" fg:x="4913" fg:w="85"/><text x="2.4735%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (85 samples, 0.04%)</title><rect x="2.2235%" y="1109" width="0.0385%" height="15" fill="rgb(225,33,4)" fg:x="4913" fg:w="85"/><text x="2.4735%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (85 samples, 0.04%)</title><rect x="2.2235%" y="1093" width="0.0385%" height="15" fill="rgb(224,33,50)" fg:x="4913" fg:w="85"/><text x="2.4735%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (85 samples, 0.04%)</title><rect x="2.2235%" y="1077" width="0.0385%" height="15" fill="rgb(246,198,51)" fg:x="4913" fg:w="85"/><text x="2.4735%" y="1087.50"></text></g><g><title>&lt;std::fs::File as sled::pagecache::logger::ReadAt&gt;::pread_exact (28 samples, 0.01%)</title><rect x="2.2674%" y="1205" width="0.0127%" height="15" fill="rgb(205,22,4)" fg:x="5010" fg:w="28"/><text x="2.5174%" y="1215.50"></text></g><g><title>sled::pagecache::parallel_io_unix::pread_exact (28 samples, 0.01%)</title><rect x="2.2674%" y="1189" width="0.0127%" height="15" fill="rgb(206,3,8)" fg:x="5010" fg:w="28"/><text x="2.5174%" y="1199.50"></text></g><g><title>std::os::unix::fs::FileExt::read_exact_at (27 samples, 0.01%)</title><rect x="2.2678%" y="1173" width="0.0122%" height="15" fill="rgb(251,23,15)" fg:x="5011" fg:w="27"/><text x="2.5178%" y="1183.50"></text></g><g><title>&lt;std::fs::File as std::os::unix::fs::FileExt&gt;::read_at (27 samples, 0.01%)</title><rect x="2.2678%" y="1157" width="0.0122%" height="15" fill="rgb(252,88,28)" fg:x="5011" fg:w="27"/><text x="2.5178%" y="1167.50"></text></g><g><title>std::sys::unix::fs::File::read_at (27 samples, 0.01%)</title><rect x="2.2678%" y="1141" width="0.0122%" height="15" fill="rgb(212,127,14)" fg:x="5011" fg:w="27"/><text x="2.5178%" y="1151.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_at (27 samples, 0.01%)</title><rect x="2.2678%" y="1125" width="0.0122%" height="15" fill="rgb(247,145,37)" fg:x="5011" fg:w="27"/><text x="2.5178%" y="1135.50"></text></g><g><title>__libc_pread (27 samples, 0.01%)</title><rect x="2.2678%" y="1109" width="0.0122%" height="15" fill="rgb(209,117,53)" fg:x="5011" fg:w="27"/><text x="2.5178%" y="1119.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="2.2683%" y="1093" width="0.0118%" height="15" fill="rgb(212,90,42)" fg:x="5012" fg:w="26"/><text x="2.5183%" y="1103.50"></text></g><g><title>__libc_pread (73 samples, 0.03%)</title><rect x="2.2819%" y="1125" width="0.0330%" height="15" fill="rgb(218,164,37)" fg:x="5042" fg:w="73"/><text x="2.5319%" y="1135.50"></text></g><g><title>[unknown] (69 samples, 0.03%)</title><rect x="2.2837%" y="1109" width="0.0312%" height="15" fill="rgb(246,65,34)" fg:x="5046" fg:w="69"/><text x="2.5337%" y="1119.50"></text></g><g><title>[unknown] (65 samples, 0.03%)</title><rect x="2.2855%" y="1093" width="0.0294%" height="15" fill="rgb(231,100,33)" fg:x="5050" fg:w="65"/><text x="2.5355%" y="1103.50"></text></g><g><title>[unknown] (61 samples, 0.03%)</title><rect x="2.2873%" y="1077" width="0.0276%" height="15" fill="rgb(228,126,14)" fg:x="5054" fg:w="61"/><text x="2.5373%" y="1087.50"></text></g><g><title>[unknown] (60 samples, 0.03%)</title><rect x="2.2877%" y="1061" width="0.0272%" height="15" fill="rgb(215,173,21)" fg:x="5055" fg:w="60"/><text x="2.5377%" y="1071.50"></text></g><g><title>[unknown] (51 samples, 0.02%)</title><rect x="2.2918%" y="1045" width="0.0231%" height="15" fill="rgb(210,6,40)" fg:x="5064" fg:w="51"/><text x="2.5418%" y="1055.50"></text></g><g><title>[unknown] (41 samples, 0.02%)</title><rect x="2.2963%" y="1029" width="0.0186%" height="15" fill="rgb(212,48,18)" fg:x="5074" fg:w="41"/><text x="2.5463%" y="1039.50"></text></g><g><title>[unknown] (33 samples, 0.01%)</title><rect x="2.3000%" y="1013" width="0.0149%" height="15" fill="rgb(230,214,11)" fg:x="5082" fg:w="33"/><text x="2.5500%" y="1023.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="2.3040%" y="997" width="0.0109%" height="15" fill="rgb(254,105,39)" fg:x="5091" fg:w="24"/><text x="2.5540%" y="1007.50"></text></g><g><title>&lt;std::fs::File as sled::pagecache::logger::ReadAt&gt;::pread_exact_or_eof (79 samples, 0.04%)</title><rect x="2.2801%" y="1205" width="0.0358%" height="15" fill="rgb(245,158,5)" fg:x="5038" fg:w="79"/><text x="2.5301%" y="1215.50"></text></g><g><title>sled::pagecache::parallel_io_unix::pread_exact_or_eof (79 samples, 0.04%)</title><rect x="2.2801%" y="1189" width="0.0358%" height="15" fill="rgb(249,208,11)" fg:x="5038" fg:w="79"/><text x="2.5301%" y="1199.50"></text></g><g><title>&lt;std::fs::File as std::os::unix::fs::FileExt&gt;::read_at (76 samples, 0.03%)</title><rect x="2.2814%" y="1173" width="0.0344%" height="15" fill="rgb(210,39,28)" fg:x="5041" fg:w="76"/><text x="2.5314%" y="1183.50"></text></g><g><title>std::sys::unix::fs::File::read_at (75 samples, 0.03%)</title><rect x="2.2819%" y="1157" width="0.0339%" height="15" fill="rgb(211,56,53)" fg:x="5042" fg:w="75"/><text x="2.5319%" y="1167.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_at (75 samples, 0.03%)</title><rect x="2.2819%" y="1141" width="0.0339%" height="15" fill="rgb(226,201,30)" fg:x="5042" fg:w="75"/><text x="2.5319%" y="1151.50"></text></g><g><title>[libc.so.6] (34 samples, 0.02%)</title><rect x="2.3167%" y="1077" width="0.0154%" height="15" fill="rgb(239,101,34)" fg:x="5119" fg:w="34"/><text x="2.5667%" y="1087.50"></text></g><g><title>__libc_calloc (36 samples, 0.02%)</title><rect x="2.3167%" y="1093" width="0.0163%" height="15" fill="rgb(226,209,5)" fg:x="5119" fg:w="36"/><text x="2.5667%" y="1103.50"></text></g><g><title>alloc::vec::from_elem (40 samples, 0.02%)</title><rect x="2.3158%" y="1205" width="0.0181%" height="15" fill="rgb(250,105,47)" fg:x="5117" fg:w="40"/><text x="2.5658%" y="1215.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (40 samples, 0.02%)</title><rect x="2.3158%" y="1189" width="0.0181%" height="15" fill="rgb(230,72,3)" fg:x="5117" fg:w="40"/><text x="2.5658%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (40 samples, 0.02%)</title><rect x="2.3158%" y="1173" width="0.0181%" height="15" fill="rgb(232,218,39)" fg:x="5117" fg:w="40"/><text x="2.5658%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (40 samples, 0.02%)</title><rect x="2.3158%" y="1157" width="0.0181%" height="15" fill="rgb(248,166,6)" fg:x="5117" fg:w="40"/><text x="2.5658%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (40 samples, 0.02%)</title><rect x="2.3158%" y="1141" width="0.0181%" height="15" fill="rgb(247,89,20)" fg:x="5117" fg:w="40"/><text x="2.5658%" y="1151.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.02%)</title><rect x="2.3158%" y="1125" width="0.0181%" height="15" fill="rgb(248,130,54)" fg:x="5117" fg:w="40"/><text x="2.5658%" y="1135.50"></text></g><g><title>alloc::alloc::alloc_zeroed (40 samples, 0.02%)</title><rect x="2.3158%" y="1109" width="0.0181%" height="15" fill="rgb(234,196,4)" fg:x="5117" fg:w="40"/><text x="2.5658%" y="1119.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::with_capacity (27 samples, 0.01%)</title><rect x="2.3461%" y="1141" width="0.0122%" height="15" fill="rgb(250,143,31)" fg:x="5184" fg:w="27"/><text x="2.5961%" y="1151.50"></text></g><g><title>alloc::boxed::Box&lt;[T]&gt;::new_uninit_slice (27 samples, 0.01%)</title><rect x="2.3461%" y="1125" width="0.0122%" height="15" fill="rgb(211,110,34)" fg:x="5184" fg:w="27"/><text x="2.5961%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (27 samples, 0.01%)</title><rect x="2.3461%" y="1109" width="0.0122%" height="15" fill="rgb(215,124,48)" fg:x="5184" fg:w="27"/><text x="2.5961%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (27 samples, 0.01%)</title><rect x="2.3461%" y="1093" width="0.0122%" height="15" fill="rgb(216,46,13)" fg:x="5184" fg:w="27"/><text x="2.5961%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (27 samples, 0.01%)</title><rect x="2.3461%" y="1077" width="0.0122%" height="15" fill="rgb(205,184,25)" fg:x="5184" fg:w="27"/><text x="2.5961%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.01%)</title><rect x="2.3466%" y="1061" width="0.0118%" height="15" fill="rgb(228,1,10)" fg:x="5185" fg:w="26"/><text x="2.5966%" y="1071.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.01%)</title><rect x="2.3466%" y="1045" width="0.0118%" height="15" fill="rgb(213,116,27)" fg:x="5185" fg:w="26"/><text x="2.5966%" y="1055.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.01%)</title><rect x="2.3466%" y="1029" width="0.0118%" height="15" fill="rgb(241,95,50)" fg:x="5185" fg:w="26"/><text x="2.5966%" y="1039.50"></text></g><g><title>malloc (26 samples, 0.01%)</title><rect x="2.3466%" y="1013" width="0.0118%" height="15" fill="rgb(238,48,32)" fg:x="5185" fg:w="26"/><text x="2.5966%" y="1023.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (339 samples, 0.15%)</title><rect x="2.2158%" y="1317" width="0.1534%" height="15" fill="rgb(235,113,49)" fg:x="4896" fg:w="339"/><text x="2.4658%" y="1327.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (338 samples, 0.15%)</title><rect x="2.2162%" y="1301" width="0.1530%" height="15" fill="rgb(205,127,43)" fg:x="4897" fg:w="338"/><text x="2.4662%" y="1311.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (335 samples, 0.15%)</title><rect x="2.2176%" y="1285" width="0.1516%" height="15" fill="rgb(250,162,2)" fg:x="4900" fg:w="335"/><text x="2.4676%" y="1295.50"></text></g><g><title>sled::pagecache::PageCache::get::{{closure}} (335 samples, 0.15%)</title><rect x="2.2176%" y="1269" width="0.1516%" height="15" fill="rgb(220,13,41)" fg:x="4900" fg:w="335"/><text x="2.4676%" y="1279.50"></text></g><g><title>sled::pagecache::PageCache::pull (335 samples, 0.15%)</title><rect x="2.2176%" y="1253" width="0.1516%" height="15" fill="rgb(249,221,25)" fg:x="4900" fg:w="335"/><text x="2.4676%" y="1263.50"></text></g><g><title>sled::pagecache::logger::Log::read (234 samples, 0.11%)</title><rect x="2.2633%" y="1237" width="0.1059%" height="15" fill="rgb(215,208,19)" fg:x="5001" fg:w="234"/><text x="2.5133%" y="1247.50"></text></g><g><title>sled::pagecache::logger::read_message (231 samples, 0.10%)</title><rect x="2.2647%" y="1221" width="0.1045%" height="15" fill="rgb(236,175,2)" fg:x="5004" fg:w="231"/><text x="2.5147%" y="1231.50"></text></g><g><title>sled::pagecache::maybe_decompress (69 samples, 0.03%)</title><rect x="2.3380%" y="1205" width="0.0312%" height="15" fill="rgb(241,52,2)" fg:x="5166" fg:w="69"/><text x="2.5880%" y="1215.50"></text></g><g><title>zstd::stream::functions::decode_all (65 samples, 0.03%)</title><rect x="2.3398%" y="1189" width="0.0294%" height="15" fill="rgb(248,140,14)" fg:x="5170" fg:w="65"/><text x="2.5898%" y="1199.50"></text></g><g><title>zstd::stream::functions::copy_decode (65 samples, 0.03%)</title><rect x="2.3398%" y="1173" width="0.0294%" height="15" fill="rgb(253,22,42)" fg:x="5170" fg:w="65"/><text x="2.5898%" y="1183.50"></text></g><g><title>zstd::stream::read::Decoder&lt;std::io::buffered::bufreader::BufReader&lt;R&gt;&gt;::new (52 samples, 0.02%)</title><rect x="2.3457%" y="1157" width="0.0235%" height="15" fill="rgb(234,61,47)" fg:x="5183" fg:w="52"/><text x="2.5957%" y="1167.50"></text></g><g><title>zstd::stream::read::Decoder&lt;R&gt;::with_buffer (24 samples, 0.01%)</title><rect x="2.3583%" y="1141" width="0.0109%" height="15" fill="rgb(208,226,15)" fg:x="5211" fg:w="24"/><text x="2.6083%" y="1151.50"></text></g><g><title>zstd::stream::read::Decoder&lt;R&gt;::with_dictionary (23 samples, 0.01%)</title><rect x="2.3588%" y="1125" width="0.0104%" height="15" fill="rgb(217,221,4)" fg:x="5212" fg:w="23"/><text x="2.6088%" y="1135.50"></text></g><g><title>zstd::stream::raw::Decoder::with_dictionary (23 samples, 0.01%)</title><rect x="2.3588%" y="1109" width="0.0104%" height="15" fill="rgb(212,174,34)" fg:x="5212" fg:w="23"/><text x="2.6088%" y="1119.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (340 samples, 0.15%)</title><rect x="2.2158%" y="1365" width="0.1539%" height="15" fill="rgb(253,83,4)" fg:x="4896" fg:w="340"/><text x="2.4658%" y="1375.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (340 samples, 0.15%)</title><rect x="2.2158%" y="1349" width="0.1539%" height="15" fill="rgb(250,195,49)" fg:x="4896" fg:w="340"/><text x="2.4658%" y="1359.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (340 samples, 0.15%)</title><rect x="2.2158%" y="1333" width="0.1539%" height="15" fill="rgb(241,192,25)" fg:x="4896" fg:w="340"/><text x="2.4658%" y="1343.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (526 samples, 0.24%)</title><rect x="2.1343%" y="1493" width="0.2381%" height="15" fill="rgb(208,124,10)" fg:x="4716" fg:w="526"/><text x="2.3843%" y="1503.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (526 samples, 0.24%)</title><rect x="2.1343%" y="1477" width="0.2381%" height="15" fill="rgb(222,33,0)" fg:x="4716" fg:w="526"/><text x="2.3843%" y="1487.50"></text></g><g><title>core::iter::adapters::try_process (526 samples, 0.24%)</title><rect x="2.1343%" y="1461" width="0.2381%" height="15" fill="rgb(234,209,28)" fg:x="4716" fg:w="526"/><text x="2.3843%" y="1471.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (526 samples, 0.24%)</title><rect x="2.1343%" y="1445" width="0.2381%" height="15" fill="rgb(224,11,23)" fg:x="4716" fg:w="526"/><text x="2.3843%" y="1455.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (526 samples, 0.24%)</title><rect x="2.1343%" y="1429" width="0.2381%" height="15" fill="rgb(232,99,1)" fg:x="4716" fg:w="526"/><text x="2.3843%" y="1439.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (526 samples, 0.24%)</title><rect x="2.1343%" y="1413" width="0.2381%" height="15" fill="rgb(237,95,45)" fg:x="4716" fg:w="526"/><text x="2.3843%" y="1423.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (526 samples, 0.24%)</title><rect x="2.1343%" y="1397" width="0.2381%" height="15" fill="rgb(208,109,11)" fg:x="4716" fg:w="526"/><text x="2.3843%" y="1407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (526 samples, 0.24%)</title><rect x="2.1343%" y="1381" width="0.2381%" height="15" fill="rgb(216,190,48)" fg:x="4716" fg:w="526"/><text x="2.3843%" y="1391.50"></text></g><g><title>sled::lru::Lru::accessed (25 samples, 0.01%)</title><rect x="2.3769%" y="1493" width="0.0113%" height="15" fill="rgb(251,171,36)" fg:x="5252" fg:w="25"/><text x="2.6269%" y="1503.50"></text></g><g><title>sled::pagecache::Page::is_free (23 samples, 0.01%)</title><rect x="2.3896%" y="1493" width="0.0104%" height="15" fill="rgb(230,62,22)" fg:x="5280" fg:w="23"/><text x="2.6396%" y="1503.50"></text></g><g><title>kv::bucket::Bucket&lt;K,V&gt;::set (2,962 samples, 1.34%)</title><rect x="1.0740%" y="1589" width="1.3405%" height="15" fill="rgb(225,114,35)" fg:x="2373" fg:w="2962"/><text x="1.3240%" y="1599.50"></text></g><g><title>sled::tree::Tree::insert (2,948 samples, 1.33%)</title><rect x="1.0803%" y="1573" width="1.3342%" height="15" fill="rgb(215,118,42)" fg:x="2387" fg:w="2948"/><text x="1.3303%" y="1583.50"></text></g><g><title>sled::tree::Tree::insert_inner (2,815 samples, 1.27%)</title><rect x="1.1405%" y="1557" width="1.2740%" height="15" fill="rgb(243,119,21)" fg:x="2520" fg:w="2815"/><text x="1.3905%" y="1567.50"></text></g><g><title>sled::tree::Tree::view_for_key (1,607 samples, 0.73%)</title><rect x="1.6872%" y="1541" width="0.7273%" height="15" fill="rgb(252,177,53)" fg:x="3728" fg:w="1607"/><text x="1.9372%" y="1551.50"></text></g><g><title>sled::tree::Tree::view_for_pid (640 samples, 0.29%)</title><rect x="2.1248%" y="1525" width="0.2896%" height="15" fill="rgb(237,209,29)" fg:x="4695" fg:w="640"/><text x="2.3748%" y="1535.50"></text></g><g><title>sled::pagecache::PageCache::get (629 samples, 0.28%)</title><rect x="2.1298%" y="1509" width="0.2847%" height="15" fill="rgb(212,65,23)" fg:x="4706" fg:w="629"/><text x="2.3798%" y="1519.50"></text></g><g><title>&lt;utreexo_wallet::blockchain::chainstore::KvChainStore as utreexo_wallet::blockchain::chainstore::ChainStore&gt;::save_header (3,129 samples, 1.42%)</title><rect x="1.0038%" y="1605" width="1.4161%" height="15" fill="rgb(230,222,46)" fg:x="2218" fg:w="3129"/><text x="1.2538%" y="1615.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (60 samples, 0.03%)</title><rect x="2.4222%" y="1461" width="0.0272%" height="15" fill="rgb(215,135,32)" fg:x="5352" fg:w="60"/><text x="2.6722%" y="1471.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (23 samples, 0.01%)</title><rect x="2.4389%" y="1445" width="0.0104%" height="15" fill="rgb(246,101,22)" fg:x="5389" fg:w="23"/><text x="2.6889%" y="1455.50"></text></g><g><title>&lt;[u8: 32] as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (66 samples, 0.03%)</title><rect x="2.4203%" y="1541" width="0.0299%" height="15" fill="rgb(206,107,13)" fg:x="5348" fg:w="66"/><text x="2.6703%" y="1551.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (66 samples, 0.03%)</title><rect x="2.4203%" y="1525" width="0.0299%" height="15" fill="rgb(250,100,44)" fg:x="5348" fg:w="66"/><text x="2.6703%" y="1535.50"></text></g><g><title>std::io::Write::write_all (66 samples, 0.03%)</title><rect x="2.4203%" y="1509" width="0.0299%" height="15" fill="rgb(231,147,38)" fg:x="5348" fg:w="66"/><text x="2.6703%" y="1519.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (64 samples, 0.03%)</title><rect x="2.4213%" y="1493" width="0.0290%" height="15" fill="rgb(229,8,40)" fg:x="5350" fg:w="64"/><text x="2.6713%" y="1503.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (64 samples, 0.03%)</title><rect x="2.4213%" y="1477" width="0.0290%" height="15" fill="rgb(221,135,30)" fg:x="5350" fg:w="64"/><text x="2.6713%" y="1487.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (67 samples, 0.03%)</title><rect x="2.4203%" y="1557" width="0.0303%" height="15" fill="rgb(249,193,18)" fg:x="5348" fg:w="67"/><text x="2.6703%" y="1567.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (47 samples, 0.02%)</title><rect x="2.4511%" y="1509" width="0.0213%" height="15" fill="rgb(209,133,39)" fg:x="5416" fg:w="47"/><text x="2.7011%" y="1519.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (48 samples, 0.02%)</title><rect x="2.4511%" y="1541" width="0.0217%" height="15" fill="rgb(232,100,14)" fg:x="5416" fg:w="48"/><text x="2.7011%" y="1551.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (48 samples, 0.02%)</title><rect x="2.4511%" y="1525" width="0.0217%" height="15" fill="rgb(224,185,1)" fg:x="5416" fg:w="48"/><text x="2.7011%" y="1535.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (55 samples, 0.02%)</title><rect x="2.4747%" y="1493" width="0.0249%" height="15" fill="rgb(223,139,8)" fg:x="5468" fg:w="55"/><text x="2.7247%" y="1503.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (60 samples, 0.03%)</title><rect x="2.4742%" y="1509" width="0.0272%" height="15" fill="rgb(232,213,38)" fg:x="5467" fg:w="60"/><text x="2.7242%" y="1519.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (64 samples, 0.03%)</title><rect x="2.4738%" y="1525" width="0.0290%" height="15" fill="rgb(207,94,22)" fg:x="5466" fg:w="64"/><text x="2.7238%" y="1535.50"></text></g><g><title>bitcoin_hashes::Hash::hash (67 samples, 0.03%)</title><rect x="2.4728%" y="1541" width="0.0303%" height="15" fill="rgb(219,183,54)" fg:x="5464" fg:w="67"/><text x="2.7228%" y="1551.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (117 samples, 0.05%)</title><rect x="2.4507%" y="1557" width="0.0530%" height="15" fill="rgb(216,185,54)" fg:x="5415" fg:w="117"/><text x="2.7007%" y="1567.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Txid as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (34 samples, 0.02%)</title><rect x="2.5104%" y="1381" width="0.0154%" height="15" fill="rgb(254,217,39)" fg:x="5547" fg:w="34"/><text x="2.7604%" y="1391.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (34 samples, 0.02%)</title><rect x="2.5104%" y="1365" width="0.0154%" height="15" fill="rgb(240,178,23)" fg:x="5547" fg:w="34"/><text x="2.7604%" y="1375.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::OutPoint as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (43 samples, 0.02%)</title><rect x="2.5104%" y="1397" width="0.0195%" height="15" fill="rgb(218,11,47)" fg:x="5547" fg:w="43"/><text x="2.7604%" y="1407.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxIn as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (67 samples, 0.03%)</title><rect x="2.5041%" y="1413" width="0.0303%" height="15" fill="rgb(218,51,51)" fg:x="5533" fg:w="67"/><text x="2.7541%" y="1423.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxIn&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (73 samples, 0.03%)</title><rect x="2.5041%" y="1429" width="0.0330%" height="15" fill="rgb(238,126,27)" fg:x="5533" fg:w="73"/><text x="2.7541%" y="1439.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (25 samples, 0.01%)</title><rect x="2.5575%" y="1253" width="0.0113%" height="15" fill="rgb(249,202,22)" fg:x="5651" fg:w="25"/><text x="2.8075%" y="1263.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (96 samples, 0.04%)</title><rect x="2.5416%" y="1269" width="0.0434%" height="15" fill="rgb(254,195,49)" fg:x="5616" fg:w="96"/><text x="2.7916%" y="1279.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (36 samples, 0.02%)</title><rect x="2.5688%" y="1253" width="0.0163%" height="15" fill="rgb(208,123,14)" fg:x="5676" fg:w="36"/><text x="2.8188%" y="1263.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (121 samples, 0.05%)</title><rect x="2.5385%" y="1349" width="0.0548%" height="15" fill="rgb(224,200,8)" fg:x="5609" fg:w="121"/><text x="2.7885%" y="1359.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (121 samples, 0.05%)</title><rect x="2.5385%" y="1333" width="0.0548%" height="15" fill="rgb(217,61,36)" fg:x="5609" fg:w="121"/><text x="2.7885%" y="1343.50"></text></g><g><title>std::io::Write::write_all (121 samples, 0.05%)</title><rect x="2.5385%" y="1317" width="0.0548%" height="15" fill="rgb(206,35,45)" fg:x="5609" fg:w="121"/><text x="2.7885%" y="1327.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (119 samples, 0.05%)</title><rect x="2.5394%" y="1301" width="0.0539%" height="15" fill="rgb(217,65,33)" fg:x="5611" fg:w="119"/><text x="2.7894%" y="1311.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (119 samples, 0.05%)</title><rect x="2.5394%" y="1285" width="0.0539%" height="15" fill="rgb(222,158,48)" fg:x="5611" fg:w="119"/><text x="2.7894%" y="1295.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (134 samples, 0.06%)</title><rect x="2.5371%" y="1397" width="0.0606%" height="15" fill="rgb(254,2,54)" fg:x="5606" fg:w="134"/><text x="2.7871%" y="1407.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[u8]&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (134 samples, 0.06%)</title><rect x="2.5371%" y="1381" width="0.0606%" height="15" fill="rgb(250,143,38)" fg:x="5606" fg:w="134"/><text x="2.7871%" y="1391.50"></text></g><g><title>bitcoin::consensus::encode::consensus_encode_with_size (134 samples, 0.06%)</title><rect x="2.5371%" y="1365" width="0.0606%" height="15" fill="rgb(248,25,0)" fg:x="5606" fg:w="134"/><text x="2.7871%" y="1375.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxOut as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (148 samples, 0.07%)</title><rect x="2.5371%" y="1413" width="0.0670%" height="15" fill="rgb(206,152,27)" fg:x="5606" fg:w="148"/><text x="2.7871%" y="1423.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxOut&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (152 samples, 0.07%)</title><rect x="2.5371%" y="1429" width="0.0688%" height="15" fill="rgb(240,77,30)" fg:x="5606" fg:w="152"/><text x="2.7871%" y="1439.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (92 samples, 0.04%)</title><rect x="2.6122%" y="1365" width="0.0416%" height="15" fill="rgb(231,5,3)" fg:x="5772" fg:w="92"/><text x="2.8622%" y="1375.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (34 samples, 0.02%)</title><rect x="2.6385%" y="1349" width="0.0154%" height="15" fill="rgb(207,226,32)" fg:x="5830" fg:w="34"/><text x="2.8885%" y="1359.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (98 samples, 0.04%)</title><rect x="2.6113%" y="1381" width="0.0444%" height="15" fill="rgb(222,207,47)" fg:x="5770" fg:w="98"/><text x="2.8613%" y="1391.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (102 samples, 0.05%)</title><rect x="2.6100%" y="1397" width="0.0462%" height="15" fill="rgb(229,115,45)" fg:x="5767" fg:w="102"/><text x="2.8600%" y="1407.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (86 samples, 0.04%)</title><rect x="2.6566%" y="1349" width="0.0389%" height="15" fill="rgb(224,191,6)" fg:x="5870" fg:w="86"/><text x="2.9066%" y="1359.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (40 samples, 0.02%)</title><rect x="2.6774%" y="1333" width="0.0181%" height="15" fill="rgb(230,227,24)" fg:x="5916" fg:w="40"/><text x="2.9274%" y="1343.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (89 samples, 0.04%)</title><rect x="2.6561%" y="1365" width="0.0403%" height="15" fill="rgb(228,80,19)" fg:x="5869" fg:w="89"/><text x="2.9061%" y="1375.50"></text></g><g><title>bitcoin_hashes::Hash::hash (90 samples, 0.04%)</title><rect x="2.6561%" y="1397" width="0.0407%" height="15" fill="rgb(247,229,0)" fg:x="5869" fg:w="90"/><text x="2.9061%" y="1407.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (90 samples, 0.04%)</title><rect x="2.6561%" y="1381" width="0.0407%" height="15" fill="rgb(237,194,15)" fg:x="5869" fg:w="90"/><text x="2.9061%" y="1391.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Txid as bitcoin_hashes::Hash&gt;::from_engine (198 samples, 0.09%)</title><rect x="2.6077%" y="1429" width="0.0896%" height="15" fill="rgb(219,203,20)" fg:x="5762" fg:w="198"/><text x="2.8577%" y="1439.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (195 samples, 0.09%)</title><rect x="2.6091%" y="1413" width="0.0883%" height="15" fill="rgb(234,128,8)" fg:x="5765" fg:w="195"/><text x="2.8591%" y="1423.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (432 samples, 0.20%)</title><rect x="2.5036%" y="1557" width="0.1955%" height="15" fill="rgb(248,202,8)" fg:x="5532" fg:w="432"/><text x="2.7536%" y="1567.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (432 samples, 0.20%)</title><rect x="2.5036%" y="1541" width="0.1955%" height="15" fill="rgb(206,104,37)" fg:x="5532" fg:w="432"/><text x="2.7536%" y="1551.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (432 samples, 0.20%)</title><rect x="2.5036%" y="1525" width="0.1955%" height="15" fill="rgb(223,8,27)" fg:x="5532" fg:w="432"/><text x="2.7536%" y="1535.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (432 samples, 0.20%)</title><rect x="2.5036%" y="1509" width="0.1955%" height="15" fill="rgb(216,217,28)" fg:x="5532" fg:w="432"/><text x="2.7536%" y="1519.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (432 samples, 0.20%)</title><rect x="2.5036%" y="1493" width="0.1955%" height="15" fill="rgb(249,199,1)" fg:x="5532" fg:w="432"/><text x="2.7536%" y="1503.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (432 samples, 0.20%)</title><rect x="2.5036%" y="1477" width="0.1955%" height="15" fill="rgb(240,85,17)" fg:x="5532" fg:w="432"/><text x="2.7536%" y="1487.50"></text></g><g><title>bitcoin::blockdata::block::Block::compute_merkle_root::{{closure}} (432 samples, 0.20%)</title><rect x="2.5036%" y="1461" width="0.1955%" height="15" fill="rgb(206,108,45)" fg:x="5532" fg:w="432"/><text x="2.7536%" y="1471.50"></text></g><g><title>bitcoin::blockdata::transaction::Transaction::txid (432 samples, 0.20%)</title><rect x="2.5036%" y="1445" width="0.1955%" height="15" fill="rgb(245,210,41)" fg:x="5532" fg:w="432"/><text x="2.7536%" y="1455.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (48 samples, 0.02%)</title><rect x="2.7041%" y="1317" width="0.0217%" height="15" fill="rgb(206,13,37)" fg:x="5975" fg:w="48"/><text x="2.9541%" y="1327.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (54 samples, 0.02%)</title><rect x="2.7041%" y="1397" width="0.0244%" height="15" fill="rgb(250,61,18)" fg:x="5975" fg:w="54"/><text x="2.9541%" y="1407.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (54 samples, 0.02%)</title><rect x="2.7041%" y="1381" width="0.0244%" height="15" fill="rgb(235,172,48)" fg:x="5975" fg:w="54"/><text x="2.9541%" y="1391.50"></text></g><g><title>std::io::Write::write_all (54 samples, 0.02%)</title><rect x="2.7041%" y="1365" width="0.0244%" height="15" fill="rgb(249,201,17)" fg:x="5975" fg:w="54"/><text x="2.9541%" y="1375.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (54 samples, 0.02%)</title><rect x="2.7041%" y="1349" width="0.0244%" height="15" fill="rgb(219,208,6)" fg:x="5975" fg:w="54"/><text x="2.9541%" y="1359.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (54 samples, 0.02%)</title><rect x="2.7041%" y="1333" width="0.0244%" height="15" fill="rgb(248,31,23)" fg:x="5975" fg:w="54"/><text x="2.9541%" y="1343.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (55 samples, 0.02%)</title><rect x="2.7041%" y="1445" width="0.0249%" height="15" fill="rgb(245,15,42)" fg:x="5975" fg:w="55"/><text x="2.9541%" y="1455.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[u8]&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (55 samples, 0.02%)</title><rect x="2.7041%" y="1429" width="0.0249%" height="15" fill="rgb(222,217,39)" fg:x="5975" fg:w="55"/><text x="2.9541%" y="1439.50"></text></g><g><title>bitcoin::consensus::encode::consensus_encode_with_size (55 samples, 0.02%)</title><rect x="2.7041%" y="1413" width="0.0249%" height="15" fill="rgb(210,219,27)" fg:x="5975" fg:w="55"/><text x="2.9541%" y="1423.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxOut as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (58 samples, 0.03%)</title><rect x="2.7041%" y="1461" width="0.0262%" height="15" fill="rgb(252,166,36)" fg:x="5975" fg:w="58"/><text x="2.9541%" y="1471.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxOut&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (60 samples, 0.03%)</title><rect x="2.7041%" y="1477" width="0.0272%" height="15" fill="rgb(245,132,34)" fg:x="5975" fg:w="60"/><text x="2.9541%" y="1487.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (23 samples, 0.01%)</title><rect x="2.7317%" y="1413" width="0.0104%" height="15" fill="rgb(236,54,3)" fg:x="6036" fg:w="23"/><text x="2.9817%" y="1423.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (24 samples, 0.01%)</title><rect x="2.7317%" y="1445" width="0.0109%" height="15" fill="rgb(241,173,43)" fg:x="6036" fg:w="24"/><text x="2.9817%" y="1455.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (24 samples, 0.01%)</title><rect x="2.7317%" y="1429" width="0.0109%" height="15" fill="rgb(215,190,9)" fg:x="6036" fg:w="24"/><text x="2.9817%" y="1439.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Txid as bitcoin_hashes::Hash&gt;::from_engine (51 samples, 0.02%)</title><rect x="2.7313%" y="1477" width="0.0231%" height="15" fill="rgb(242,101,16)" fg:x="6035" fg:w="51"/><text x="2.9813%" y="1487.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (50 samples, 0.02%)</title><rect x="2.7317%" y="1461" width="0.0226%" height="15" fill="rgb(223,190,21)" fg:x="6036" fg:w="50"/><text x="2.9817%" y="1471.50"></text></g><g><title>bitcoin_hashes::Hash::hash (26 samples, 0.01%)</title><rect x="2.7426%" y="1445" width="0.0118%" height="15" fill="rgb(215,228,25)" fg:x="6060" fg:w="26"/><text x="2.9926%" y="1455.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (26 samples, 0.01%)</title><rect x="2.7426%" y="1429" width="0.0118%" height="15" fill="rgb(225,36,22)" fg:x="6060" fg:w="26"/><text x="2.9926%" y="1439.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (25 samples, 0.01%)</title><rect x="2.7430%" y="1413" width="0.0113%" height="15" fill="rgb(251,106,46)" fg:x="6061" fg:w="25"/><text x="2.9930%" y="1423.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (125 samples, 0.06%)</title><rect x="2.6991%" y="1557" width="0.0566%" height="15" fill="rgb(208,90,1)" fg:x="5964" fg:w="125"/><text x="2.9491%" y="1567.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (123 samples, 0.06%)</title><rect x="2.7000%" y="1541" width="0.0557%" height="15" fill="rgb(243,10,4)" fg:x="5966" fg:w="123"/><text x="2.9500%" y="1551.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (123 samples, 0.06%)</title><rect x="2.7000%" y="1525" width="0.0557%" height="15" fill="rgb(212,137,27)" fg:x="5966" fg:w="123"/><text x="2.9500%" y="1535.50"></text></g><g><title>bitcoin::blockdata::block::Block::compute_merkle_root::{{closure}} (123 samples, 0.06%)</title><rect x="2.7000%" y="1509" width="0.0557%" height="15" fill="rgb(231,220,49)" fg:x="5966" fg:w="123"/><text x="2.9500%" y="1519.50"></text></g><g><title>bitcoin::blockdata::transaction::Transaction::txid (122 samples, 0.06%)</title><rect x="2.7005%" y="1493" width="0.0552%" height="15" fill="rgb(237,96,20)" fg:x="5967" fg:w="122"/><text x="2.9505%" y="1503.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (40 samples, 0.02%)</title><rect x="2.7589%" y="1541" width="0.0181%" height="15" fill="rgb(239,229,30)" fg:x="6096" fg:w="40"/><text x="3.0089%" y="1551.50"></text></g><g><title>&lt;[u8: 32] as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (40 samples, 0.02%)</title><rect x="2.7589%" y="1525" width="0.0181%" height="15" fill="rgb(219,65,33)" fg:x="6096" fg:w="40"/><text x="3.0089%" y="1535.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (40 samples, 0.02%)</title><rect x="2.7589%" y="1509" width="0.0181%" height="15" fill="rgb(243,134,7)" fg:x="6096" fg:w="40"/><text x="3.0089%" y="1519.50"></text></g><g><title>std::io::Write::write_all (40 samples, 0.02%)</title><rect x="2.7589%" y="1493" width="0.0181%" height="15" fill="rgb(216,177,54)" fg:x="6096" fg:w="40"/><text x="3.0089%" y="1503.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (39 samples, 0.02%)</title><rect x="2.7593%" y="1477" width="0.0177%" height="15" fill="rgb(211,160,20)" fg:x="6097" fg:w="39"/><text x="3.0093%" y="1487.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (39 samples, 0.02%)</title><rect x="2.7593%" y="1461" width="0.0177%" height="15" fill="rgb(239,85,39)" fg:x="6097" fg:w="39"/><text x="3.0093%" y="1471.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (38 samples, 0.02%)</title><rect x="2.7598%" y="1445" width="0.0172%" height="15" fill="rgb(232,125,22)" fg:x="6098" fg:w="38"/><text x="3.0098%" y="1455.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (29 samples, 0.01%)</title><rect x="2.7774%" y="1493" width="0.0131%" height="15" fill="rgb(244,57,34)" fg:x="6137" fg:w="29"/><text x="3.0274%" y="1503.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (31 samples, 0.01%)</title><rect x="2.7774%" y="1509" width="0.0140%" height="15" fill="rgb(214,203,32)" fg:x="6137" fg:w="31"/><text x="3.0274%" y="1519.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (35 samples, 0.02%)</title><rect x="2.7774%" y="1525" width="0.0158%" height="15" fill="rgb(207,58,43)" fg:x="6137" fg:w="35"/><text x="3.0274%" y="1535.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (31 samples, 0.01%)</title><rect x="2.7942%" y="1477" width="0.0140%" height="15" fill="rgb(215,193,15)" fg:x="6174" fg:w="31"/><text x="3.0442%" y="1487.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (72 samples, 0.03%)</title><rect x="2.7774%" y="1541" width="0.0326%" height="15" fill="rgb(232,15,44)" fg:x="6137" fg:w="72"/><text x="3.0274%" y="1551.50"></text></g><g><title>bitcoin_hashes::Hash::hash (37 samples, 0.02%)</title><rect x="2.7933%" y="1525" width="0.0167%" height="15" fill="rgb(212,3,48)" fg:x="6172" fg:w="37"/><text x="3.0433%" y="1535.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (36 samples, 0.02%)</title><rect x="2.7937%" y="1509" width="0.0163%" height="15" fill="rgb(218,128,7)" fg:x="6173" fg:w="36"/><text x="3.0437%" y="1519.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (36 samples, 0.02%)</title><rect x="2.7937%" y="1493" width="0.0163%" height="15" fill="rgb(226,216,39)" fg:x="6173" fg:w="36"/><text x="3.0437%" y="1503.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (31 samples, 0.01%)</title><rect x="2.8177%" y="1525" width="0.0140%" height="15" fill="rgb(243,47,51)" fg:x="6226" fg:w="31"/><text x="3.0677%" y="1535.50"></text></g><g><title>bitcoin::util::hash::merkle_root_r (210 samples, 0.10%)</title><rect x="2.7562%" y="1557" width="0.0950%" height="15" fill="rgb(241,183,40)" fg:x="6090" fg:w="210"/><text x="3.0062%" y="1567.50"></text></g><g><title>bitcoin::util::hash::merkle_root_r (91 samples, 0.04%)</title><rect x="2.8100%" y="1541" width="0.0412%" height="15" fill="rgb(231,217,32)" fg:x="6209" fg:w="91"/><text x="3.0600%" y="1551.50"></text></g><g><title>bitcoin::util::hash::merkle_root_r (43 samples, 0.02%)</title><rect x="2.8317%" y="1525" width="0.0195%" height="15" fill="rgb(229,61,38)" fg:x="6257" fg:w="43"/><text x="3.0817%" y="1535.50"></text></g><g><title>bitcoin::util::hash::bitcoin_merkle_root (956 samples, 0.43%)</title><rect x="2.4199%" y="1573" width="0.4327%" height="15" fill="rgb(225,210,5)" fg:x="5347" fg:w="956"/><text x="2.6699%" y="1583.50"></text></g><g><title>bitcoin::blockdata::block::Block::check_merkle_root (957 samples, 0.43%)</title><rect x="2.4199%" y="1605" width="0.4331%" height="15" fill="rgb(231,79,45)" fg:x="5347" fg:w="957"/><text x="2.6699%" y="1615.50"></text></g><g><title>bitcoin::blockdata::block::Block::compute_merkle_root (957 samples, 0.43%)</title><rect x="2.4199%" y="1589" width="0.4331%" height="15" fill="rgb(224,100,7)" fg:x="5347" fg:w="957"/><text x="2.6699%" y="1599.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::WitnessCommitment as bitcoin_hashes::Hash&gt;::from_engine (33 samples, 0.01%)</title><rect x="2.8539%" y="1573" width="0.0149%" height="15" fill="rgb(241,198,18)" fg:x="6306" fg:w="33"/><text x="3.1039%" y="1583.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (33 samples, 0.01%)</title><rect x="2.8539%" y="1557" width="0.0149%" height="15" fill="rgb(252,97,53)" fg:x="6306" fg:w="33"/><text x="3.1039%" y="1567.50"></text></g><g><title>bitcoin::blockdata::block::Block::compute_witness_commitment (49 samples, 0.02%)</title><rect x="2.8535%" y="1589" width="0.0222%" height="15" fill="rgb(220,88,7)" fg:x="6305" fg:w="49"/><text x="3.1035%" y="1599.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (54 samples, 0.02%)</title><rect x="2.8779%" y="1461" width="0.0244%" height="15" fill="rgb(213,176,14)" fg:x="6359" fg:w="54"/><text x="3.1279%" y="1471.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (24 samples, 0.01%)</title><rect x="2.8915%" y="1445" width="0.0109%" height="15" fill="rgb(246,73,7)" fg:x="6389" fg:w="24"/><text x="3.1415%" y="1455.50"></text></g><g><title>&lt;[u8: 32] as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (58 samples, 0.03%)</title><rect x="2.8765%" y="1541" width="0.0262%" height="15" fill="rgb(245,64,36)" fg:x="6356" fg:w="58"/><text x="3.1265%" y="1551.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (58 samples, 0.03%)</title><rect x="2.8765%" y="1525" width="0.0262%" height="15" fill="rgb(245,80,10)" fg:x="6356" fg:w="58"/><text x="3.1265%" y="1535.50"></text></g><g><title>std::io::Write::write_all (58 samples, 0.03%)</title><rect x="2.8765%" y="1509" width="0.0262%" height="15" fill="rgb(232,107,50)" fg:x="6356" fg:w="58"/><text x="3.1265%" y="1519.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (56 samples, 0.03%)</title><rect x="2.8774%" y="1493" width="0.0253%" height="15" fill="rgb(253,3,0)" fg:x="6358" fg:w="56"/><text x="3.1274%" y="1503.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (56 samples, 0.03%)</title><rect x="2.8774%" y="1477" width="0.0253%" height="15" fill="rgb(212,99,53)" fg:x="6358" fg:w="56"/><text x="3.1274%" y="1487.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (61 samples, 0.03%)</title><rect x="2.8765%" y="1557" width="0.0276%" height="15" fill="rgb(249,111,54)" fg:x="6356" fg:w="61"/><text x="3.1265%" y="1567.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (59 samples, 0.03%)</title><rect x="2.9073%" y="1509" width="0.0267%" height="15" fill="rgb(249,55,30)" fg:x="6424" fg:w="59"/><text x="3.1573%" y="1519.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (62 samples, 0.03%)</title><rect x="2.9069%" y="1525" width="0.0281%" height="15" fill="rgb(237,47,42)" fg:x="6423" fg:w="62"/><text x="3.1569%" y="1535.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (69 samples, 0.03%)</title><rect x="2.9055%" y="1541" width="0.0312%" height="15" fill="rgb(211,20,18)" fg:x="6420" fg:w="69"/><text x="3.1555%" y="1551.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (53 samples, 0.02%)</title><rect x="2.9367%" y="1509" width="0.0240%" height="15" fill="rgb(231,203,46)" fg:x="6489" fg:w="53"/><text x="3.1867%" y="1519.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (52 samples, 0.02%)</title><rect x="2.9372%" y="1493" width="0.0235%" height="15" fill="rgb(237,142,3)" fg:x="6490" fg:w="52"/><text x="3.1872%" y="1503.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (125 samples, 0.06%)</title><rect x="2.9046%" y="1557" width="0.0566%" height="15" fill="rgb(241,107,1)" fg:x="6418" fg:w="125"/><text x="3.1546%" y="1567.50"></text></g><g><title>bitcoin_hashes::Hash::hash (54 samples, 0.02%)</title><rect x="2.9367%" y="1541" width="0.0244%" height="15" fill="rgb(229,83,13)" fg:x="6489" fg:w="54"/><text x="3.1867%" y="1551.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (54 samples, 0.02%)</title><rect x="2.9367%" y="1525" width="0.0244%" height="15" fill="rgb(241,91,40)" fg:x="6489" fg:w="54"/><text x="3.1867%" y="1535.50"></text></g><g><title>&lt;[u8: 32] as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (27 samples, 0.01%)</title><rect x="2.9702%" y="1333" width="0.0122%" height="15" fill="rgb(225,3,45)" fg:x="6563" fg:w="27"/><text x="3.2202%" y="1343.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (27 samples, 0.01%)</title><rect x="2.9702%" y="1317" width="0.0122%" height="15" fill="rgb(244,223,14)" fg:x="6563" fg:w="27"/><text x="3.2202%" y="1327.50"></text></g><g><title>std::io::Write::write_all (26 samples, 0.01%)</title><rect x="2.9707%" y="1301" width="0.0118%" height="15" fill="rgb(224,124,37)" fg:x="6564" fg:w="26"/><text x="3.2207%" y="1311.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (25 samples, 0.01%)</title><rect x="2.9711%" y="1285" width="0.0113%" height="15" fill="rgb(251,171,30)" fg:x="6565" fg:w="25"/><text x="3.2211%" y="1295.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (25 samples, 0.01%)</title><rect x="2.9711%" y="1269" width="0.0113%" height="15" fill="rgb(236,46,54)" fg:x="6565" fg:w="25"/><text x="3.2211%" y="1279.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Txid as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (28 samples, 0.01%)</title><rect x="2.9702%" y="1365" width="0.0127%" height="15" fill="rgb(245,213,5)" fg:x="6563" fg:w="28"/><text x="3.2202%" y="1375.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (28 samples, 0.01%)</title><rect x="2.9702%" y="1349" width="0.0127%" height="15" fill="rgb(230,144,27)" fg:x="6563" fg:w="28"/><text x="3.2202%" y="1359.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::OutPoint as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (36 samples, 0.02%)</title><rect x="2.9702%" y="1381" width="0.0163%" height="15" fill="rgb(220,86,6)" fg:x="6563" fg:w="36"/><text x="3.2202%" y="1391.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxIn as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (60 samples, 0.03%)</title><rect x="2.9625%" y="1397" width="0.0272%" height="15" fill="rgb(240,20,13)" fg:x="6546" fg:w="60"/><text x="3.2125%" y="1407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxIn&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (71 samples, 0.03%)</title><rect x="2.9621%" y="1413" width="0.0321%" height="15" fill="rgb(217,89,34)" fg:x="6545" fg:w="71"/><text x="3.2121%" y="1423.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (28 samples, 0.01%)</title><rect x="3.0132%" y="1237" width="0.0127%" height="15" fill="rgb(229,13,5)" fg:x="6658" fg:w="28"/><text x="3.2632%" y="1247.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (95 samples, 0.04%)</title><rect x="2.9992%" y="1253" width="0.0430%" height="15" fill="rgb(244,67,35)" fg:x="6627" fg:w="95"/><text x="3.2492%" y="1263.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (36 samples, 0.02%)</title><rect x="3.0259%" y="1237" width="0.0163%" height="15" fill="rgb(221,40,2)" fg:x="6686" fg:w="36"/><text x="3.2759%" y="1247.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (118 samples, 0.05%)</title><rect x="2.9947%" y="1333" width="0.0534%" height="15" fill="rgb(237,157,21)" fg:x="6617" fg:w="118"/><text x="3.2447%" y="1343.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (118 samples, 0.05%)</title><rect x="2.9947%" y="1317" width="0.0534%" height="15" fill="rgb(222,94,11)" fg:x="6617" fg:w="118"/><text x="3.2447%" y="1327.50"></text></g><g><title>std::io::Write::write_all (118 samples, 0.05%)</title><rect x="2.9947%" y="1301" width="0.0534%" height="15" fill="rgb(249,113,6)" fg:x="6617" fg:w="118"/><text x="3.2447%" y="1311.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (114 samples, 0.05%)</title><rect x="2.9965%" y="1285" width="0.0516%" height="15" fill="rgb(238,137,36)" fg:x="6621" fg:w="114"/><text x="3.2465%" y="1295.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (112 samples, 0.05%)</title><rect x="2.9974%" y="1269" width="0.0507%" height="15" fill="rgb(210,102,26)" fg:x="6623" fg:w="112"/><text x="3.2474%" y="1279.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (135 samples, 0.06%)</title><rect x="2.9942%" y="1381" width="0.0611%" height="15" fill="rgb(218,30,30)" fg:x="6616" fg:w="135"/><text x="3.2442%" y="1391.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[u8]&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (135 samples, 0.06%)</title><rect x="2.9942%" y="1365" width="0.0611%" height="15" fill="rgb(214,67,26)" fg:x="6616" fg:w="135"/><text x="3.2442%" y="1375.50"></text></g><g><title>bitcoin::consensus::encode::consensus_encode_with_size (135 samples, 0.06%)</title><rect x="2.9942%" y="1349" width="0.0611%" height="15" fill="rgb(251,9,53)" fg:x="6616" fg:w="135"/><text x="3.2442%" y="1359.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxOut as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (147 samples, 0.07%)</title><rect x="2.9942%" y="1397" width="0.0665%" height="15" fill="rgb(228,204,25)" fg:x="6616" fg:w="147"/><text x="3.2442%" y="1407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxOut&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (153 samples, 0.07%)</title><rect x="2.9942%" y="1413" width="0.0692%" height="15" fill="rgb(207,153,8)" fg:x="6616" fg:w="153"/><text x="3.2442%" y="1423.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (47 samples, 0.02%)</title><rect x="3.1259%" y="1317" width="0.0213%" height="15" fill="rgb(242,9,16)" fg:x="6907" fg:w="47"/><text x="3.3759%" y="1327.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (254 samples, 0.11%)</title><rect x="3.0725%" y="1333" width="0.1150%" height="15" fill="rgb(217,211,10)" fg:x="6789" fg:w="254"/><text x="3.3225%" y="1343.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (89 samples, 0.04%)</title><rect x="3.1472%" y="1317" width="0.0403%" height="15" fill="rgb(219,228,52)" fg:x="6954" fg:w="89"/><text x="3.3972%" y="1327.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (297 samples, 0.13%)</title><rect x="3.0684%" y="1365" width="0.1344%" height="15" fill="rgb(231,92,29)" fg:x="6780" fg:w="297"/><text x="3.3184%" y="1375.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (296 samples, 0.13%)</title><rect x="3.0689%" y="1349" width="0.1340%" height="15" fill="rgb(232,8,23)" fg:x="6781" fg:w="296"/><text x="3.3189%" y="1359.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (27 samples, 0.01%)</title><rect x="3.1906%" y="1333" width="0.0122%" height="15" fill="rgb(216,211,34)" fg:x="7050" fg:w="27"/><text x="3.4406%" y="1343.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.01%)</title><rect x="3.1906%" y="1317" width="0.0122%" height="15" fill="rgb(236,151,0)" fg:x="7050" fg:w="27"/><text x="3.4406%" y="1327.50"></text></g><g><title>[libc.so.6] (27 samples, 0.01%)</title><rect x="3.1906%" y="1301" width="0.0122%" height="15" fill="rgb(209,168,3)" fg:x="7050" fg:w="27"/><text x="3.4406%" y="1311.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (301 samples, 0.14%)</title><rect x="3.0671%" y="1397" width="0.1362%" height="15" fill="rgb(208,129,28)" fg:x="6777" fg:w="301"/><text x="3.3171%" y="1407.50"></text></g><g><title>std::io::Write::write_all (301 samples, 0.14%)</title><rect x="3.0671%" y="1381" width="0.1362%" height="15" fill="rgb(229,78,22)" fg:x="6777" fg:w="301"/><text x="3.3171%" y="1391.50"></text></g><g><title>&lt;bitcoin::blockdata::witness::Witness as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (313 samples, 0.14%)</title><rect x="3.0666%" y="1413" width="0.1417%" height="15" fill="rgb(228,187,13)" fg:x="6776" fg:w="313"/><text x="3.3166%" y="1423.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::Transaction as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (555 samples, 0.25%)</title><rect x="2.9621%" y="1429" width="0.2512%" height="15" fill="rgb(240,119,24)" fg:x="6545" fg:w="555"/><text x="3.2121%" y="1439.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (28 samples, 0.01%)</title><rect x="3.2363%" y="1349" width="0.0127%" height="15" fill="rgb(209,194,42)" fg:x="7151" fg:w="28"/><text x="3.4863%" y="1359.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (104 samples, 0.05%)</title><rect x="3.2187%" y="1365" width="0.0471%" height="15" fill="rgb(247,200,46)" fg:x="7112" fg:w="104"/><text x="3.4687%" y="1375.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (37 samples, 0.02%)</title><rect x="3.2490%" y="1349" width="0.0167%" height="15" fill="rgb(218,76,16)" fg:x="7179" fg:w="37"/><text x="3.4990%" y="1359.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (117 samples, 0.05%)</title><rect x="3.2164%" y="1381" width="0.0530%" height="15" fill="rgb(225,21,48)" fg:x="7107" fg:w="117"/><text x="3.4664%" y="1391.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (120 samples, 0.05%)</title><rect x="3.2160%" y="1397" width="0.0543%" height="15" fill="rgb(239,223,50)" fg:x="7106" fg:w="120"/><text x="3.4660%" y="1407.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (91 samples, 0.04%)</title><rect x="3.2725%" y="1349" width="0.0412%" height="15" fill="rgb(244,45,21)" fg:x="7231" fg:w="91"/><text x="3.5225%" y="1359.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (36 samples, 0.02%)</title><rect x="3.2974%" y="1333" width="0.0163%" height="15" fill="rgb(232,33,43)" fg:x="7286" fg:w="36"/><text x="3.5474%" y="1343.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (95 samples, 0.04%)</title><rect x="3.2712%" y="1365" width="0.0430%" height="15" fill="rgb(209,8,3)" fg:x="7228" fg:w="95"/><text x="3.5212%" y="1375.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (98 samples, 0.04%)</title><rect x="3.2707%" y="1381" width="0.0444%" height="15" fill="rgb(214,25,53)" fg:x="7227" fg:w="98"/><text x="3.5207%" y="1391.50"></text></g><g><title>bitcoin_hashes::Hash::hash (100 samples, 0.05%)</title><rect x="3.2703%" y="1397" width="0.0453%" height="15" fill="rgb(254,186,54)" fg:x="7226" fg:w="100"/><text x="3.5203%" y="1407.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (784 samples, 0.35%)</title><rect x="2.9612%" y="1557" width="0.3548%" height="15" fill="rgb(208,174,49)" fg:x="6543" fg:w="784"/><text x="3.2112%" y="1567.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (783 samples, 0.35%)</title><rect x="2.9616%" y="1541" width="0.3544%" height="15" fill="rgb(233,191,51)" fg:x="6544" fg:w="783"/><text x="3.2116%" y="1551.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (783 samples, 0.35%)</title><rect x="2.9616%" y="1525" width="0.3544%" height="15" fill="rgb(222,134,10)" fg:x="6544" fg:w="783"/><text x="3.2116%" y="1535.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (783 samples, 0.35%)</title><rect x="2.9616%" y="1509" width="0.3544%" height="15" fill="rgb(230,226,20)" fg:x="6544" fg:w="783"/><text x="3.2116%" y="1519.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (783 samples, 0.35%)</title><rect x="2.9616%" y="1493" width="0.3544%" height="15" fill="rgb(251,111,25)" fg:x="6544" fg:w="783"/><text x="3.2116%" y="1503.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (783 samples, 0.35%)</title><rect x="2.9616%" y="1477" width="0.3544%" height="15" fill="rgb(224,40,46)" fg:x="6544" fg:w="783"/><text x="3.2116%" y="1487.50"></text></g><g><title>bitcoin::blockdata::block::Block::witness_root::{{closure}} (783 samples, 0.35%)</title><rect x="2.9616%" y="1461" width="0.3544%" height="15" fill="rgb(236,108,47)" fg:x="6544" fg:w="783"/><text x="3.2116%" y="1471.50"></text></g><g><title>bitcoin::blockdata::transaction::Transaction::wtxid (783 samples, 0.35%)</title><rect x="2.9616%" y="1445" width="0.3544%" height="15" fill="rgb(234,93,0)" fg:x="6544" fg:w="783"/><text x="3.2116%" y="1455.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Wtxid as bitcoin_hashes::Hash&gt;::from_engine (227 samples, 0.10%)</title><rect x="3.2133%" y="1429" width="0.1027%" height="15" fill="rgb(224,213,32)" fg:x="7100" fg:w="227"/><text x="3.4633%" y="1439.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (222 samples, 0.10%)</title><rect x="3.2155%" y="1413" width="0.1005%" height="15" fill="rgb(251,11,48)" fg:x="7105" fg:w="222"/><text x="3.4655%" y="1423.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::Transaction as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (24 samples, 0.01%)</title><rect x="3.3173%" y="1477" width="0.0109%" height="15" fill="rgb(236,173,5)" fg:x="7330" fg:w="24"/><text x="3.5673%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.02%)</title><rect x="3.3160%" y="1557" width="0.0186%" height="15" fill="rgb(230,95,12)" fg:x="7327" fg:w="41"/><text x="3.5660%" y="1567.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (40 samples, 0.02%)</title><rect x="3.3164%" y="1541" width="0.0181%" height="15" fill="rgb(232,209,1)" fg:x="7328" fg:w="40"/><text x="3.5664%" y="1551.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (40 samples, 0.02%)</title><rect x="3.3164%" y="1525" width="0.0181%" height="15" fill="rgb(232,6,1)" fg:x="7328" fg:w="40"/><text x="3.5664%" y="1535.50"></text></g><g><title>bitcoin::blockdata::block::Block::witness_root::{{closure}} (40 samples, 0.02%)</title><rect x="3.3164%" y="1509" width="0.0181%" height="15" fill="rgb(210,224,50)" fg:x="7328" fg:w="40"/><text x="3.5664%" y="1519.50"></text></g><g><title>bitcoin::blockdata::transaction::Transaction::wtxid (39 samples, 0.02%)</title><rect x="3.3169%" y="1493" width="0.0177%" height="15" fill="rgb(228,127,35)" fg:x="7329" fg:w="39"/><text x="3.5669%" y="1503.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (36 samples, 0.02%)</title><rect x="3.3354%" y="1445" width="0.0163%" height="15" fill="rgb(245,102,45)" fg:x="7370" fg:w="36"/><text x="3.5854%" y="1455.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (37 samples, 0.02%)</title><rect x="3.3354%" y="1541" width="0.0167%" height="15" fill="rgb(214,1,49)" fg:x="7370" fg:w="37"/><text x="3.5854%" y="1551.50"></text></g><g><title>&lt;[u8: 32] as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (37 samples, 0.02%)</title><rect x="3.3354%" y="1525" width="0.0167%" height="15" fill="rgb(226,163,40)" fg:x="7370" fg:w="37"/><text x="3.5854%" y="1535.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (37 samples, 0.02%)</title><rect x="3.3354%" y="1509" width="0.0167%" height="15" fill="rgb(239,212,28)" fg:x="7370" fg:w="37"/><text x="3.5854%" y="1519.50"></text></g><g><title>std::io::Write::write_all (37 samples, 0.02%)</title><rect x="3.3354%" y="1493" width="0.0167%" height="15" fill="rgb(220,20,13)" fg:x="7370" fg:w="37"/><text x="3.5854%" y="1503.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (37 samples, 0.02%)</title><rect x="3.3354%" y="1477" width="0.0167%" height="15" fill="rgb(210,164,35)" fg:x="7370" fg:w="37"/><text x="3.5854%" y="1487.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (37 samples, 0.02%)</title><rect x="3.3354%" y="1461" width="0.0167%" height="15" fill="rgb(248,109,41)" fg:x="7370" fg:w="37"/><text x="3.5854%" y="1471.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (33 samples, 0.01%)</title><rect x="3.3531%" y="1493" width="0.0149%" height="15" fill="rgb(238,23,50)" fg:x="7409" fg:w="33"/><text x="3.6031%" y="1503.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (37 samples, 0.02%)</title><rect x="3.3526%" y="1525" width="0.0167%" height="15" fill="rgb(211,48,49)" fg:x="7408" fg:w="37"/><text x="3.6026%" y="1535.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (36 samples, 0.02%)</title><rect x="3.3531%" y="1509" width="0.0163%" height="15" fill="rgb(223,36,21)" fg:x="7409" fg:w="36"/><text x="3.6031%" y="1519.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (23 samples, 0.01%)</title><rect x="3.3698%" y="1477" width="0.0104%" height="15" fill="rgb(207,123,46)" fg:x="7446" fg:w="23"/><text x="3.6198%" y="1487.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (63 samples, 0.03%)</title><rect x="3.3522%" y="1541" width="0.0285%" height="15" fill="rgb(240,218,32)" fg:x="7407" fg:w="63"/><text x="3.6022%" y="1551.50"></text></g><g><title>bitcoin_hashes::Hash::hash (25 samples, 0.01%)</title><rect x="3.3694%" y="1525" width="0.0113%" height="15" fill="rgb(252,5,43)" fg:x="7445" fg:w="25"/><text x="3.6194%" y="1535.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (25 samples, 0.01%)</title><rect x="3.3694%" y="1509" width="0.0113%" height="15" fill="rgb(252,84,19)" fg:x="7445" fg:w="25"/><text x="3.6194%" y="1519.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (25 samples, 0.01%)</title><rect x="3.3694%" y="1493" width="0.0113%" height="15" fill="rgb(243,152,39)" fg:x="7445" fg:w="25"/><text x="3.6194%" y="1503.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (32 samples, 0.01%)</title><rect x="3.3870%" y="1525" width="0.0145%" height="15" fill="rgb(234,160,15)" fg:x="7484" fg:w="32"/><text x="3.6370%" y="1535.50"></text></g><g><title>bitcoin_hashes::Hash::hash (23 samples, 0.01%)</title><rect x="3.3911%" y="1509" width="0.0104%" height="15" fill="rgb(237,34,20)" fg:x="7493" fg:w="23"/><text x="3.6411%" y="1519.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (23 samples, 0.01%)</title><rect x="3.3911%" y="1493" width="0.0104%" height="15" fill="rgb(229,97,13)" fg:x="7493" fg:w="23"/><text x="3.6411%" y="1503.50"></text></g><g><title>bitcoin::util::hash::merkle_root_r (195 samples, 0.09%)</title><rect x="3.3345%" y="1557" width="0.0883%" height="15" fill="rgb(234,71,50)" fg:x="7368" fg:w="195"/><text x="3.5845%" y="1567.50"></text></g><g><title>bitcoin::util::hash::merkle_root_r (93 samples, 0.04%)</title><rect x="3.3807%" y="1541" width="0.0421%" height="15" fill="rgb(253,155,4)" fg:x="7470" fg:w="93"/><text x="3.6307%" y="1551.50"></text></g><g><title>bitcoin::util::hash::merkle_root_r (47 samples, 0.02%)</title><rect x="3.4015%" y="1525" width="0.0213%" height="15" fill="rgb(222,185,37)" fg:x="7516" fg:w="47"/><text x="3.6515%" y="1535.50"></text></g><g><title>bitcoin::util::hash::bitcoin_merkle_root (1,211 samples, 0.55%)</title><rect x="2.8761%" y="1573" width="0.5481%" height="15" fill="rgb(251,177,13)" fg:x="6355" fg:w="1211"/><text x="3.1261%" y="1583.50"></text></g><g><title>bitcoin::blockdata::block::Block::witness_root (1,213 samples, 0.55%)</title><rect x="2.8756%" y="1589" width="0.5490%" height="15" fill="rgb(250,179,40)" fg:x="6354" fg:w="1213"/><text x="3.1256%" y="1599.50"></text></g><g><title>bitcoin::blockdata::block::Block::check_witness_commitment (1,274 samples, 0.58%)</title><rect x="2.8530%" y="1605" width="0.5766%" height="15" fill="rgb(242,44,2)" fg:x="6304" fg:w="1274"/><text x="3.1030%" y="1615.50"></text></g><g><title>&lt;bitcoin::blockdata::block::BlockHeader as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (27 samples, 0.01%)</title><rect x="3.4305%" y="1573" width="0.0122%" height="15" fill="rgb(216,177,13)" fg:x="7580" fg:w="27"/><text x="3.6805%" y="1583.50"></text></g><g><title>bitcoin::blockdata::block::BlockHeader::block_hash (63 samples, 0.03%)</title><rect x="3.4305%" y="1589" width="0.0285%" height="15" fill="rgb(216,106,43)" fg:x="7580" fg:w="63"/><text x="3.6805%" y="1599.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::BlockHash as bitcoin_hashes::Hash&gt;::from_engine (36 samples, 0.02%)</title><rect x="3.4427%" y="1573" width="0.0163%" height="15" fill="rgb(216,183,2)" fg:x="7607" fg:w="36"/><text x="3.6927%" y="1583.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (35 samples, 0.02%)</title><rect x="3.4432%" y="1557" width="0.0158%" height="15" fill="rgb(249,75,3)" fg:x="7608" fg:w="35"/><text x="3.6932%" y="1567.50"></text></g><g><title>bitcoin::blockdata::block::BlockHeader::validate_pow (67 samples, 0.03%)</title><rect x="3.4296%" y="1605" width="0.0303%" height="15" fill="rgb(219,67,39)" fg:x="7578" fg:w="67"/><text x="3.6796%" y="1615.50"></text></g><g><title>utreexo_wallet::blockchain::chain_state::ChainState&lt;PersistedState&gt;::get_next_required_work (34 samples, 0.02%)</title><rect x="3.4671%" y="1605" width="0.0154%" height="15" fill="rgb(253,228,2)" fg:x="7661" fg:w="34"/><text x="3.7171%" y="1615.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (23 samples, 0.01%)</title><rect x="3.4857%" y="1573" width="0.0104%" height="15" fill="rgb(235,138,27)" fg:x="7702" fg:w="23"/><text x="3.7357%" y="1583.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (23 samples, 0.01%)</title><rect x="3.4857%" y="1557" width="0.0104%" height="15" fill="rgb(236,97,51)" fg:x="7702" fg:w="23"/><text x="3.7357%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (28 samples, 0.01%)</title><rect x="3.4852%" y="1589" width="0.0127%" height="15" fill="rgb(240,80,30)" fg:x="7701" fg:w="28"/><text x="3.7352%" y="1599.50"></text></g><g><title>bitcoin::blockdata::block::Block::block_hash (59 samples, 0.03%)</title><rect x="3.4979%" y="1589" width="0.0267%" height="15" fill="rgb(230,178,19)" fg:x="7729" fg:w="59"/><text x="3.7479%" y="1599.50"></text></g><g><title>bitcoin::blockdata::block::BlockHeader::block_hash (59 samples, 0.03%)</title><rect x="3.4979%" y="1573" width="0.0267%" height="15" fill="rgb(210,190,27)" fg:x="7729" fg:w="59"/><text x="3.7479%" y="1583.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::BlockHash as bitcoin_hashes::Hash&gt;::from_engine (37 samples, 0.02%)</title><rect x="3.5079%" y="1557" width="0.0167%" height="15" fill="rgb(222,107,31)" fg:x="7751" fg:w="37"/><text x="3.7579%" y="1567.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (37 samples, 0.02%)</title><rect x="3.5079%" y="1541" width="0.0167%" height="15" fill="rgb(216,127,34)" fg:x="7751" fg:w="37"/><text x="3.7579%" y="1551.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (24 samples, 0.01%)</title><rect x="3.5477%" y="1445" width="0.0109%" height="15" fill="rgb(234,116,52)" fg:x="7839" fg:w="24"/><text x="3.7977%" y="1455.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (24 samples, 0.01%)</title><rect x="3.5477%" y="1429" width="0.0109%" height="15" fill="rgb(222,124,15)" fg:x="7839" fg:w="24"/><text x="3.7977%" y="1439.50"></text></g><g><title>&lt;[u8: 32] as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (30 samples, 0.01%)</title><rect x="3.5454%" y="1493" width="0.0136%" height="15" fill="rgb(231,179,28)" fg:x="7834" fg:w="30"/><text x="3.7954%" y="1503.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (30 samples, 0.01%)</title><rect x="3.5454%" y="1477" width="0.0136%" height="15" fill="rgb(226,93,45)" fg:x="7834" fg:w="30"/><text x="3.7954%" y="1487.50"></text></g><g><title>std::io::Write::write_all (30 samples, 0.01%)</title><rect x="3.5454%" y="1461" width="0.0136%" height="15" fill="rgb(215,8,51)" fg:x="7834" fg:w="30"/><text x="3.7954%" y="1471.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Txid as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (36 samples, 0.02%)</title><rect x="3.5450%" y="1525" width="0.0163%" height="15" fill="rgb(223,106,5)" fg:x="7833" fg:w="36"/><text x="3.7950%" y="1535.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (36 samples, 0.02%)</title><rect x="3.5450%" y="1509" width="0.0163%" height="15" fill="rgb(250,191,5)" fg:x="7833" fg:w="36"/><text x="3.7950%" y="1519.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::OutPoint as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (50 samples, 0.02%)</title><rect x="3.5450%" y="1541" width="0.0226%" height="15" fill="rgb(242,132,44)" fg:x="7833" fg:w="50"/><text x="3.7950%" y="1551.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxIn as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (84 samples, 0.04%)</title><rect x="3.5355%" y="1557" width="0.0380%" height="15" fill="rgb(251,152,29)" fg:x="7812" fg:w="84"/><text x="3.7855%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxIn&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (98 samples, 0.04%)</title><rect x="3.5350%" y="1573" width="0.0444%" height="15" fill="rgb(218,179,5)" fg:x="7811" fg:w="98"/><text x="3.7850%" y="1583.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (50 samples, 0.02%)</title><rect x="3.6323%" y="1397" width="0.0226%" height="15" fill="rgb(227,67,19)" fg:x="8026" fg:w="50"/><text x="3.8823%" y="1407.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (232 samples, 0.10%)</title><rect x="3.5893%" y="1413" width="0.1050%" height="15" fill="rgb(233,119,31)" fg:x="7931" fg:w="232"/><text x="3.8393%" y="1423.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (87 samples, 0.04%)</title><rect x="3.6550%" y="1397" width="0.0394%" height="15" fill="rgb(241,120,22)" fg:x="8076" fg:w="87"/><text x="3.9050%" y="1407.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (268 samples, 0.12%)</title><rect x="3.5816%" y="1493" width="0.1213%" height="15" fill="rgb(224,102,30)" fg:x="7914" fg:w="268"/><text x="3.8316%" y="1503.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (268 samples, 0.12%)</title><rect x="3.5816%" y="1477" width="0.1213%" height="15" fill="rgb(210,164,37)" fg:x="7914" fg:w="268"/><text x="3.8316%" y="1487.50"></text></g><g><title>std::io::Write::write_all (268 samples, 0.12%)</title><rect x="3.5816%" y="1461" width="0.1213%" height="15" fill="rgb(226,191,16)" fg:x="7914" fg:w="268"/><text x="3.8316%" y="1471.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (263 samples, 0.12%)</title><rect x="3.5839%" y="1445" width="0.1190%" height="15" fill="rgb(214,40,45)" fg:x="7919" fg:w="263"/><text x="3.8339%" y="1455.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (260 samples, 0.12%)</title><rect x="3.5853%" y="1429" width="0.1177%" height="15" fill="rgb(244,29,26)" fg:x="7922" fg:w="260"/><text x="3.8353%" y="1439.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (297 samples, 0.13%)</title><rect x="3.5798%" y="1541" width="0.1344%" height="15" fill="rgb(216,16,5)" fg:x="7910" fg:w="297"/><text x="3.8298%" y="1551.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[u8]&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (297 samples, 0.13%)</title><rect x="3.5798%" y="1525" width="0.1344%" height="15" fill="rgb(249,76,35)" fg:x="7910" fg:w="297"/><text x="3.8298%" y="1535.50"></text></g><g><title>bitcoin::consensus::encode::consensus_encode_with_size (297 samples, 0.13%)</title><rect x="3.5798%" y="1509" width="0.1344%" height="15" fill="rgb(207,11,44)" fg:x="7910" fg:w="297"/><text x="3.8298%" y="1519.50"></text></g><g><title>&lt;bitcoin::consensus::encode::VarInt as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (25 samples, 0.01%)</title><rect x="3.7029%" y="1493" width="0.0113%" height="15" fill="rgb(228,190,49)" fg:x="8182" fg:w="25"/><text x="3.9529%" y="1503.50"></text></g><g><title>&lt;u8 as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (25 samples, 0.01%)</title><rect x="3.7029%" y="1477" width="0.0113%" height="15" fill="rgb(214,173,12)" fg:x="8182" fg:w="25"/><text x="3.9529%" y="1487.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_u8 (25 samples, 0.01%)</title><rect x="3.7029%" y="1461" width="0.0113%" height="15" fill="rgb(218,26,35)" fg:x="8182" fg:w="25"/><text x="3.9529%" y="1471.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (25 samples, 0.01%)</title><rect x="3.7029%" y="1445" width="0.0113%" height="15" fill="rgb(220,200,19)" fg:x="8182" fg:w="25"/><text x="3.9529%" y="1455.50"></text></g><g><title>std::io::Write::write_all (25 samples, 0.01%)</title><rect x="3.7029%" y="1429" width="0.0113%" height="15" fill="rgb(239,95,49)" fg:x="8182" fg:w="25"/><text x="3.9529%" y="1439.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxOut as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (315 samples, 0.14%)</title><rect x="3.5798%" y="1557" width="0.1426%" height="15" fill="rgb(235,85,53)" fg:x="7910" fg:w="315"/><text x="3.8298%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxOut&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (331 samples, 0.15%)</title><rect x="3.5794%" y="1573" width="0.1498%" height="15" fill="rgb(233,133,31)" fg:x="7909" fg:w="331"/><text x="3.8294%" y="1583.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (48 samples, 0.02%)</title><rect x="3.7830%" y="1493" width="0.0217%" height="15" fill="rgb(218,25,20)" fg:x="8359" fg:w="48"/><text x="4.0330%" y="1503.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (219 samples, 0.10%)</title><rect x="3.7396%" y="1509" width="0.0991%" height="15" fill="rgb(252,210,38)" fg:x="8263" fg:w="219"/><text x="3.9896%" y="1519.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (75 samples, 0.03%)</title><rect x="3.8048%" y="1493" width="0.0339%" height="15" fill="rgb(242,134,21)" fg:x="8407" fg:w="75"/><text x="4.0548%" y="1503.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (233 samples, 0.11%)</title><rect x="3.7378%" y="1525" width="0.1054%" height="15" fill="rgb(213,28,48)" fg:x="8259" fg:w="233"/><text x="3.9878%" y="1535.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (240 samples, 0.11%)</title><rect x="3.7364%" y="1541" width="0.1086%" height="15" fill="rgb(250,196,2)" fg:x="8256" fg:w="240"/><text x="3.9864%" y="1551.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (44 samples, 0.02%)</title><rect x="3.8903%" y="1477" width="0.0199%" height="15" fill="rgb(227,5,17)" fg:x="8596" fg:w="44"/><text x="4.1403%" y="1487.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (213 samples, 0.10%)</title><rect x="3.8491%" y="1493" width="0.0964%" height="15" fill="rgb(221,226,24)" fg:x="8505" fg:w="213"/><text x="4.0991%" y="1503.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (78 samples, 0.04%)</title><rect x="3.9102%" y="1477" width="0.0353%" height="15" fill="rgb(211,5,48)" fg:x="8640" fg:w="78"/><text x="4.1602%" y="1487.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (225 samples, 0.10%)</title><rect x="3.8473%" y="1509" width="0.1018%" height="15" fill="rgb(219,150,6)" fg:x="8501" fg:w="225"/><text x="4.0973%" y="1519.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (233 samples, 0.11%)</title><rect x="3.8459%" y="1525" width="0.1054%" height="15" fill="rgb(251,46,16)" fg:x="8498" fg:w="233"/><text x="4.0959%" y="1535.50"></text></g><g><title>bitcoin_hashes::Hash::hash (240 samples, 0.11%)</title><rect x="3.8450%" y="1541" width="0.1086%" height="15" fill="rgb(220,204,40)" fg:x="8496" fg:w="240"/><text x="4.0950%" y="1551.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Txid as bitcoin_hashes::Hash&gt;::from_engine (488 samples, 0.22%)</title><rect x="3.7346%" y="1573" width="0.2209%" height="15" fill="rgb(211,85,2)" fg:x="8252" fg:w="488"/><text x="3.9846%" y="1583.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (485 samples, 0.22%)</title><rect x="3.7360%" y="1557" width="0.2195%" height="15" fill="rgb(229,17,7)" fg:x="8255" fg:w="485"/><text x="3.9860%" y="1567.50"></text></g><g><title>bitcoin::blockdata::transaction::Transaction::txid (954 samples, 0.43%)</title><rect x="3.5301%" y="1589" width="0.4318%" height="15" fill="rgb(239,72,28)" fg:x="7800" fg:w="954"/><text x="3.7801%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (30 samples, 0.01%)</title><rect x="3.9699%" y="1477" width="0.0136%" height="15" fill="rgb(230,47,54)" fg:x="8772" fg:w="30"/><text x="4.2199%" y="1487.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (30 samples, 0.01%)</title><rect x="3.9699%" y="1461" width="0.0136%" height="15" fill="rgb(214,50,8)" fg:x="8772" fg:w="30"/><text x="4.2199%" y="1471.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (30 samples, 0.01%)</title><rect x="3.9699%" y="1445" width="0.0136%" height="15" fill="rgb(216,198,43)" fg:x="8772" fg:w="30"/><text x="4.2199%" y="1455.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.01%)</title><rect x="3.9699%" y="1429" width="0.0136%" height="15" fill="rgb(234,20,35)" fg:x="8772" fg:w="30"/><text x="4.2199%" y="1439.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.01%)</title><rect x="3.9699%" y="1413" width="0.0136%" height="15" fill="rgb(254,45,19)" fg:x="8772" fg:w="30"/><text x="4.2199%" y="1423.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.01%)</title><rect x="3.9699%" y="1397" width="0.0136%" height="15" fill="rgb(219,14,44)" fg:x="8772" fg:w="30"/><text x="4.2199%" y="1407.50"></text></g><g><title>malloc (29 samples, 0.01%)</title><rect x="3.9704%" y="1381" width="0.0131%" height="15" fill="rgb(217,220,26)" fg:x="8773" fg:w="29"/><text x="4.2204%" y="1391.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (64 samples, 0.03%)</title><rect x="3.9699%" y="1557" width="0.0290%" height="15" fill="rgb(213,158,28)" fg:x="8772" fg:w="64"/><text x="4.2199%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (64 samples, 0.03%)</title><rect x="3.9699%" y="1541" width="0.0290%" height="15" fill="rgb(252,51,52)" fg:x="8772" fg:w="64"/><text x="4.2199%" y="1551.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (64 samples, 0.03%)</title><rect x="3.9699%" y="1525" width="0.0290%" height="15" fill="rgb(246,89,16)" fg:x="8772" fg:w="64"/><text x="4.2199%" y="1535.50"></text></g><g><title>alloc::slice::hack::to_vec (64 samples, 0.03%)</title><rect x="3.9699%" y="1509" width="0.0290%" height="15" fill="rgb(216,158,49)" fg:x="8772" fg:w="64"/><text x="4.2199%" y="1519.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (64 samples, 0.03%)</title><rect x="3.9699%" y="1493" width="0.0290%" height="15" fill="rgb(236,107,19)" fg:x="8772" fg:w="64"/><text x="4.2199%" y="1503.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (34 samples, 0.02%)</title><rect x="3.9835%" y="1477" width="0.0154%" height="15" fill="rgb(228,185,30)" fg:x="8802" fg:w="34"/><text x="4.2335%" y="1487.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.02%)</title><rect x="3.9835%" y="1461" width="0.0154%" height="15" fill="rgb(246,134,8)" fg:x="8802" fg:w="34"/><text x="4.2335%" y="1471.50"></text></g><g><title>[libc.so.6] (34 samples, 0.02%)</title><rect x="3.9835%" y="1445" width="0.0154%" height="15" fill="rgb(214,143,50)" fg:x="8802" fg:w="34"/><text x="4.2335%" y="1455.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.01%)</title><rect x="4.0016%" y="1493" width="0.0140%" height="15" fill="rgb(228,75,8)" fg:x="8842" fg:w="31"/><text x="4.2516%" y="1503.50"></text></g><g><title>core::ptr::read (24 samples, 0.01%)</title><rect x="4.0048%" y="1477" width="0.0109%" height="15" fill="rgb(207,175,4)" fg:x="8849" fg:w="24"/><text x="4.2548%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.03%)</title><rect x="4.0016%" y="1541" width="0.0281%" height="15" fill="rgb(205,108,24)" fg:x="8842" fg:w="62"/><text x="4.2516%" y="1551.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (62 samples, 0.03%)</title><rect x="4.0016%" y="1525" width="0.0281%" height="15" fill="rgb(244,120,49)" fg:x="8842" fg:w="62"/><text x="4.2516%" y="1535.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (62 samples, 0.03%)</title><rect x="4.0016%" y="1509" width="0.0281%" height="15" fill="rgb(223,47,38)" fg:x="8842" fg:w="62"/><text x="4.2516%" y="1519.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (31 samples, 0.01%)</title><rect x="4.0157%" y="1493" width="0.0140%" height="15" fill="rgb(229,179,11)" fg:x="8873" fg:w="31"/><text x="4.2657%" y="1503.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (25 samples, 0.01%)</title><rect x="4.0184%" y="1477" width="0.0113%" height="15" fill="rgb(231,122,1)" fg:x="8879" fg:w="25"/><text x="4.2684%" y="1487.50"></text></g><g><title>rustreexo::accumulator::proof::Proof::calculate_hashes::{{closure}} (25 samples, 0.01%)</title><rect x="4.0184%" y="1461" width="0.0113%" height="15" fill="rgb(245,119,9)" fg:x="8879" fg:w="25"/><text x="4.2684%" y="1471.50"></text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.03%)</title><rect x="4.0016%" y="1557" width="0.0285%" height="15" fill="rgb(241,163,25)" fg:x="8842" fg:w="63"/><text x="4.2516%" y="1567.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort::{{closure}} (548 samples, 0.25%)</title><rect x="4.2143%" y="1509" width="0.2480%" height="15" fill="rgb(217,214,3)" fg:x="9312" fg:w="548"/><text x="4.4643%" y="1519.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (U,T)&gt;::lt (548 samples, 0.25%)</title><rect x="4.2143%" y="1493" width="0.2480%" height="15" fill="rgb(240,86,28)" fg:x="9312" fg:w="548"/><text x="4.4643%" y="1503.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::ne (514 samples, 0.23%)</title><rect x="4.2297%" y="1477" width="0.2326%" height="15" fill="rgb(215,47,9)" fg:x="9346" fg:w="514"/><text x="4.4797%" y="1487.50"></text></g><g><title>alloc::slice::merge (48 samples, 0.02%)</title><rect x="4.4660%" y="1509" width="0.0217%" height="15" fill="rgb(252,25,45)" fg:x="9868" fg:w="48"/><text x="4.7160%" y="1519.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.01%)</title><rect x="4.4759%" y="1493" width="0.0118%" height="15" fill="rgb(251,164,9)" fg:x="9890" fg:w="26"/><text x="4.7259%" y="1503.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (79 samples, 0.04%)</title><rect x="4.4976%" y="1445" width="0.0358%" height="15" fill="rgb(233,194,0)" fg:x="9938" fg:w="79"/><text x="4.7476%" y="1455.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (79 samples, 0.04%)</title><rect x="4.4976%" y="1429" width="0.0358%" height="15" fill="rgb(249,111,24)" fg:x="9938" fg:w="79"/><text x="4.7476%" y="1439.50"></text></g><g><title>alloc::alloc::alloc (79 samples, 0.04%)</title><rect x="4.4976%" y="1413" width="0.0358%" height="15" fill="rgb(250,223,3)" fg:x="9938" fg:w="79"/><text x="4.7476%" y="1423.50"></text></g><g><title>malloc (77 samples, 0.03%)</title><rect x="4.4986%" y="1397" width="0.0348%" height="15" fill="rgb(236,178,37)" fg:x="9940" fg:w="77"/><text x="4.7486%" y="1407.50"></text></g><g><title>[libc.so.6] (44 samples, 0.02%)</title><rect x="4.5135%" y="1381" width="0.0199%" height="15" fill="rgb(241,158,50)" fg:x="9973" fg:w="44"/><text x="4.7635%" y="1391.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (80 samples, 0.04%)</title><rect x="4.4976%" y="1509" width="0.0362%" height="15" fill="rgb(213,121,41)" fg:x="9938" fg:w="80"/><text x="4.7476%" y="1519.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (80 samples, 0.04%)</title><rect x="4.4976%" y="1493" width="0.0362%" height="15" fill="rgb(240,92,3)" fg:x="9938" fg:w="80"/><text x="4.7476%" y="1503.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (80 samples, 0.04%)</title><rect x="4.4976%" y="1477" width="0.0362%" height="15" fill="rgb(205,123,3)" fg:x="9938" fg:w="80"/><text x="4.7476%" y="1487.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (80 samples, 0.04%)</title><rect x="4.4976%" y="1461" width="0.0362%" height="15" fill="rgb(205,97,47)" fg:x="9938" fg:w="80"/><text x="4.7476%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u64,bitcoin_hashes::sha256::Hash)&gt;&gt; (44 samples, 0.02%)</title><rect x="4.5339%" y="1509" width="0.0199%" height="15" fill="rgb(247,152,14)" fg:x="10018" fg:w="44"/><text x="4.7839%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u64,bitcoin_hashes::sha256::Hash)&gt;&gt; (44 samples, 0.02%)</title><rect x="4.5339%" y="1493" width="0.0199%" height="15" fill="rgb(248,195,53)" fg:x="10018" fg:w="44"/><text x="4.7839%" y="1503.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.02%)</title><rect x="4.5339%" y="1477" width="0.0199%" height="15" fill="rgb(226,201,16)" fg:x="10018" fg:w="44"/><text x="4.7839%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (43 samples, 0.02%)</title><rect x="4.5343%" y="1461" width="0.0195%" height="15" fill="rgb(205,98,0)" fg:x="10019" fg:w="43"/><text x="4.7843%" y="1471.50"></text></g><g><title>alloc::alloc::dealloc (43 samples, 0.02%)</title><rect x="4.5343%" y="1445" width="0.0195%" height="15" fill="rgb(214,191,48)" fg:x="10019" fg:w="43"/><text x="4.7843%" y="1455.50"></text></g><g><title>cfree (39 samples, 0.02%)</title><rect x="4.5361%" y="1429" width="0.0177%" height="15" fill="rgb(237,112,39)" fg:x="10023" fg:w="39"/><text x="4.7861%" y="1439.50"></text></g><g><title>[libc.so.6] (32 samples, 0.01%)</title><rect x="4.5393%" y="1413" width="0.0145%" height="15" fill="rgb(247,203,27)" fg:x="10030" fg:w="32"/><text x="4.7893%" y="1423.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort (1,119 samples, 0.51%)</title><rect x="4.0519%" y="1541" width="0.5064%" height="15" fill="rgb(235,124,28)" fg:x="8953" fg:w="1119"/><text x="4.3019%" y="1551.50"></text></g><g><title>alloc::slice::merge_sort (1,119 samples, 0.51%)</title><rect x="4.0519%" y="1525" width="0.5064%" height="15" fill="rgb(208,207,46)" fg:x="8953" fg:w="1119"/><text x="4.3019%" y="1535.50"></text></g><g><title>rustreexo::accumulator::proof::Proof::sorted_push (1,147 samples, 0.52%)</title><rect x="4.0519%" y="1557" width="0.5191%" height="15" fill="rgb(234,176,4)" fg:x="8953" fg:w="1147"/><text x="4.3019%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (28 samples, 0.01%)</title><rect x="4.5583%" y="1541" width="0.0127%" height="15" fill="rgb(230,133,28)" fg:x="10072" fg:w="28"/><text x="4.8083%" y="1551.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::chain_update (42 samples, 0.02%)</title><rect x="4.5714%" y="1541" width="0.0190%" height="15" fill="rgb(211,137,40)" fg:x="10101" fg:w="42"/><text x="4.8214%" y="1551.50"></text></g><g><title>[libc.so.6] (27 samples, 0.01%)</title><rect x="4.5782%" y="1525" width="0.0122%" height="15" fill="rgb(254,35,13)" fg:x="10116" fg:w="27"/><text x="4.8282%" y="1535.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (26 samples, 0.01%)</title><rect x="4.6280%" y="1365" width="0.0118%" height="15" fill="rgb(225,49,51)" fg:x="10226" fg:w="26"/><text x="4.8780%" y="1375.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (26 samples, 0.01%)</title><rect x="4.6280%" y="1349" width="0.0118%" height="15" fill="rgb(251,10,15)" fg:x="10226" fg:w="26"/><text x="4.8780%" y="1359.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi64 (32 samples, 0.01%)</title><rect x="4.6398%" y="1349" width="0.0145%" height="15" fill="rgb(228,207,15)" fg:x="10252" fg:w="32"/><text x="4.8898%" y="1359.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_srli_epi64 (43 samples, 0.02%)</title><rect x="4.6601%" y="1349" width="0.0195%" height="15" fill="rgb(241,99,19)" fg:x="10297" fg:w="43"/><text x="4.9101%" y="1359.50"></text></g><g><title>sha2::sha512::x86::sha512_update_x_avx (146 samples, 0.07%)</title><rect x="4.6398%" y="1365" width="0.0661%" height="15" fill="rgb(207,104,49)" fg:x="10252" fg:w="146"/><text x="4.8898%" y="1375.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (58 samples, 0.03%)</title><rect x="4.6796%" y="1349" width="0.0262%" height="15" fill="rgb(234,99,18)" fg:x="10340" fg:w="58"/><text x="4.9296%" y="1359.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (40 samples, 0.02%)</title><rect x="4.7294%" y="1349" width="0.0181%" height="15" fill="rgb(213,191,49)" fg:x="10450" fg:w="40"/><text x="4.9794%" y="1359.50"></text></g><g><title>sha2::sha512::x86::rounds_0_63_avx (350 samples, 0.16%)</title><rect x="4.6112%" y="1381" width="0.1584%" height="15" fill="rgb(210,226,19)" fg:x="10189" fg:w="350"/><text x="4.8612%" y="1391.50"></text></g><g><title>sha2::sha512::x86::sha_round (141 samples, 0.06%)</title><rect x="4.7058%" y="1365" width="0.0638%" height="15" fill="rgb(229,97,18)" fg:x="10398" fg:w="141"/><text x="4.9558%" y="1375.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (49 samples, 0.02%)</title><rect x="4.7475%" y="1349" width="0.0222%" height="15" fill="rgb(211,167,15)" fg:x="10490" fg:w="49"/><text x="4.9975%" y="1359.50"></text></g><g><title>&lt;sha2::core_api::Sha512VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core::{{closure}} (460 samples, 0.21%)</title><rect x="4.5918%" y="1429" width="0.2082%" height="15" fill="rgb(210,169,34)" fg:x="10146" fg:w="460"/><text x="4.8418%" y="1439.50"></text></g><g><title>sha2::sha512::x86::sha512_compress_x86_64_avx2 (458 samples, 0.21%)</title><rect x="4.5927%" y="1413" width="0.2073%" height="15" fill="rgb(241,121,31)" fg:x="10148" fg:w="458"/><text x="4.8427%" y="1423.50"></text></g><g><title>sha2::sha512::x86::sha512_compress_x86_64_avx (444 samples, 0.20%)</title><rect x="4.5990%" y="1397" width="0.2009%" height="15" fill="rgb(232,40,11)" fg:x="10162" fg:w="444"/><text x="4.8490%" y="1407.50"></text></g><g><title>sha2::sha512::x86::rounds_64_79 (67 samples, 0.03%)</title><rect x="4.7696%" y="1381" width="0.0303%" height="15" fill="rgb(205,86,26)" fg:x="10539" fg:w="67"/><text x="5.0196%" y="1391.50"></text></g><g><title>sha2::sha512::x86::sha_round (66 samples, 0.03%)</title><rect x="4.7701%" y="1365" width="0.0299%" height="15" fill="rgb(231,126,28)" fg:x="10540" fg:w="66"/><text x="5.0201%" y="1375.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (35 samples, 0.02%)</title><rect x="4.7841%" y="1349" width="0.0158%" height="15" fill="rgb(219,221,18)" fg:x="10571" fg:w="35"/><text x="5.0341%" y="1359.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (466 samples, 0.21%)</title><rect x="4.5904%" y="1509" width="0.2109%" height="15" fill="rgb(211,40,0)" fg:x="10143" fg:w="466"/><text x="4.8404%" y="1519.50"></text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (466 samples, 0.21%)</title><rect x="4.5904%" y="1493" width="0.2109%" height="15" fill="rgb(239,85,43)" fg:x="10143" fg:w="466"/><text x="4.8404%" y="1503.50"></text></g><g><title>&lt;sha2::core_api::Sha512VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (466 samples, 0.21%)</title><rect x="4.5904%" y="1477" width="0.2109%" height="15" fill="rgb(231,55,21)" fg:x="10143" fg:w="466"/><text x="4.8404%" y="1487.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len128_padding_be (466 samples, 0.21%)</title><rect x="4.5904%" y="1461" width="0.2109%" height="15" fill="rgb(225,184,43)" fg:x="10143" fg:w="466"/><text x="4.8404%" y="1471.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (466 samples, 0.21%)</title><rect x="4.5904%" y="1445" width="0.2109%" height="15" fill="rgb(251,158,41)" fg:x="10143" fg:w="466"/><text x="4.8404%" y="1455.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (486 samples, 0.22%)</title><rect x="4.5904%" y="1541" width="0.2199%" height="15" fill="rgb(234,159,37)" fg:x="10143" fg:w="486"/><text x="4.8404%" y="1551.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (486 samples, 0.22%)</title><rect x="4.5904%" y="1525" width="0.2199%" height="15" fill="rgb(216,204,22)" fg:x="10143" fg:w="486"/><text x="4.8404%" y="1535.50"></text></g><g><title>rustreexo::accumulator::types::parent_hash (542 samples, 0.25%)</title><rect x="4.5710%" y="1557" width="0.2453%" height="15" fill="rgb(214,17,3)" fg:x="10100" fg:w="542"/><text x="4.8210%" y="1567.50"></text></g><g><title>rustreexo::accumulator::proof::Proof::verify (1,880 samples, 0.85%)</title><rect x="3.9663%" y="1589" width="0.8508%" height="15" fill="rgb(212,111,17)" fg:x="8764" fg:w="1880"/><text x="4.2163%" y="1599.50"></text></g><g><title>rustreexo::accumulator::proof::Proof::calculate_hashes (1,877 samples, 0.85%)</title><rect x="3.9677%" y="1573" width="0.8495%" height="15" fill="rgb(221,157,24)" fg:x="8767" fg:w="1877"/><text x="4.2177%" y="1583.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (40 samples, 0.02%)</title><rect x="4.8362%" y="1557" width="0.0181%" height="15" fill="rgb(252,16,13)" fg:x="10686" fg:w="40"/><text x="5.0862%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (40 samples, 0.02%)</title><rect x="4.8362%" y="1541" width="0.0181%" height="15" fill="rgb(221,62,2)" fg:x="10686" fg:w="40"/><text x="5.0862%" y="1551.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (40 samples, 0.02%)</title><rect x="4.8362%" y="1525" width="0.0181%" height="15" fill="rgb(247,87,22)" fg:x="10686" fg:w="40"/><text x="5.0862%" y="1535.50"></text></g><g><title>alloc::slice::hack::to_vec (40 samples, 0.02%)</title><rect x="4.8362%" y="1509" width="0.0181%" height="15" fill="rgb(215,73,9)" fg:x="10686" fg:w="40"/><text x="5.0862%" y="1519.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (40 samples, 0.02%)</title><rect x="4.8362%" y="1493" width="0.0181%" height="15" fill="rgb(207,175,33)" fg:x="10686" fg:w="40"/><text x="5.0862%" y="1503.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (27 samples, 0.01%)</title><rect x="4.8421%" y="1477" width="0.0122%" height="15" fill="rgb(243,129,54)" fg:x="10699" fg:w="27"/><text x="5.0921%" y="1487.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.01%)</title><rect x="4.8421%" y="1461" width="0.0122%" height="15" fill="rgb(227,119,45)" fg:x="10699" fg:w="27"/><text x="5.0921%" y="1471.50"></text></g><g><title>[libc.so.6] (27 samples, 0.01%)</title><rect x="4.8421%" y="1445" width="0.0122%" height="15" fill="rgb(205,109,36)" fg:x="10699" fg:w="27"/><text x="5.0921%" y="1455.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.01%)</title><rect x="4.8556%" y="1493" width="0.0131%" height="15" fill="rgb(205,6,39)" fg:x="10729" fg:w="29"/><text x="5.1056%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.03%)</title><rect x="4.8556%" y="1557" width="0.0267%" height="15" fill="rgb(221,32,16)" fg:x="10729" fg:w="59"/><text x="5.1056%" y="1567.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.03%)</title><rect x="4.8556%" y="1541" width="0.0267%" height="15" fill="rgb(228,144,50)" fg:x="10729" fg:w="59"/><text x="5.1056%" y="1551.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (59 samples, 0.03%)</title><rect x="4.8556%" y="1525" width="0.0267%" height="15" fill="rgb(229,201,53)" fg:x="10729" fg:w="59"/><text x="5.1056%" y="1535.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (59 samples, 0.03%)</title><rect x="4.8556%" y="1509" width="0.0267%" height="15" fill="rgb(249,153,27)" fg:x="10729" fg:w="59"/><text x="5.1056%" y="1519.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (30 samples, 0.01%)</title><rect x="4.8688%" y="1493" width="0.0136%" height="15" fill="rgb(227,106,25)" fg:x="10758" fg:w="30"/><text x="5.1188%" y="1503.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (27 samples, 0.01%)</title><rect x="4.8701%" y="1477" width="0.0122%" height="15" fill="rgb(230,65,29)" fg:x="10761" fg:w="27"/><text x="5.1201%" y="1487.50"></text></g><g><title>rustreexo::accumulator::proof::Proof::calculate_hashes::{{closure}} (27 samples, 0.01%)</title><rect x="4.8701%" y="1461" width="0.0122%" height="15" fill="rgb(221,57,46)" fg:x="10761" fg:w="27"/><text x="5.1201%" y="1471.50"></text></g><g><title>rustreexo::accumulator::util::detect_row (26 samples, 0.01%)</title><rect x="4.8706%" y="1445" width="0.0118%" height="15" fill="rgb(229,161,17)" fg:x="10762" fg:w="26"/><text x="5.1206%" y="1455.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort::{{closure}} (577 samples, 0.26%)</title><rect x="5.0706%" y="1509" width="0.2611%" height="15" fill="rgb(222,213,11)" fg:x="11204" fg:w="577"/><text x="5.3206%" y="1519.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (U,T)&gt;::lt (577 samples, 0.26%)</title><rect x="5.0706%" y="1493" width="0.2611%" height="15" fill="rgb(235,35,13)" fg:x="11204" fg:w="577"/><text x="5.3206%" y="1503.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::ne (546 samples, 0.25%)</title><rect x="5.0846%" y="1477" width="0.2471%" height="15" fill="rgb(233,158,34)" fg:x="11235" fg:w="546"/><text x="5.3346%" y="1487.50"></text></g><g><title>alloc::slice::merge (41 samples, 0.02%)</title><rect x="5.3367%" y="1509" width="0.0186%" height="15" fill="rgb(215,151,48)" fg:x="11792" fg:w="41"/><text x="5.5867%" y="1519.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.01%)</title><rect x="5.3449%" y="1493" width="0.0104%" height="15" fill="rgb(229,84,14)" fg:x="11810" fg:w="23"/><text x="5.5949%" y="1503.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (28 samples, 0.01%)</title><rect x="5.3553%" y="1509" width="0.0127%" height="15" fill="rgb(229,68,14)" fg:x="11833" fg:w="28"/><text x="5.6053%" y="1519.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.02%)</title><rect x="5.3679%" y="1445" width="0.0167%" height="15" fill="rgb(243,106,26)" fg:x="11861" fg:w="37"/><text x="5.6179%" y="1455.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.02%)</title><rect x="5.3679%" y="1429" width="0.0167%" height="15" fill="rgb(206,45,38)" fg:x="11861" fg:w="37"/><text x="5.6179%" y="1439.50"></text></g><g><title>alloc::alloc::alloc (37 samples, 0.02%)</title><rect x="5.3679%" y="1413" width="0.0167%" height="15" fill="rgb(226,6,15)" fg:x="11861" fg:w="37"/><text x="5.6179%" y="1423.50"></text></g><g><title>malloc (34 samples, 0.02%)</title><rect x="5.3693%" y="1397" width="0.0154%" height="15" fill="rgb(232,22,54)" fg:x="11864" fg:w="34"/><text x="5.6193%" y="1407.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (39 samples, 0.02%)</title><rect x="5.3679%" y="1509" width="0.0177%" height="15" fill="rgb(229,222,32)" fg:x="11861" fg:w="39"/><text x="5.6179%" y="1519.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (39 samples, 0.02%)</title><rect x="5.3679%" y="1493" width="0.0177%" height="15" fill="rgb(228,62,29)" fg:x="11861" fg:w="39"/><text x="5.6179%" y="1503.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (39 samples, 0.02%)</title><rect x="5.3679%" y="1477" width="0.0177%" height="15" fill="rgb(251,103,34)" fg:x="11861" fg:w="39"/><text x="5.6179%" y="1487.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (39 samples, 0.02%)</title><rect x="5.3679%" y="1461" width="0.0177%" height="15" fill="rgb(233,12,30)" fg:x="11861" fg:w="39"/><text x="5.6179%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u64,bitcoin_hashes::sha256::Hash)&gt;&gt; (31 samples, 0.01%)</title><rect x="5.3856%" y="1509" width="0.0140%" height="15" fill="rgb(238,52,0)" fg:x="11900" fg:w="31"/><text x="5.6356%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u64,bitcoin_hashes::sha256::Hash)&gt;&gt; (31 samples, 0.01%)</title><rect x="5.3856%" y="1493" width="0.0140%" height="15" fill="rgb(223,98,5)" fg:x="11900" fg:w="31"/><text x="5.6356%" y="1503.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.01%)</title><rect x="5.3856%" y="1477" width="0.0140%" height="15" fill="rgb(228,75,37)" fg:x="11900" fg:w="31"/><text x="5.6356%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (28 samples, 0.01%)</title><rect x="5.3869%" y="1461" width="0.0127%" height="15" fill="rgb(205,115,49)" fg:x="11903" fg:w="28"/><text x="5.6369%" y="1471.50"></text></g><g><title>alloc::alloc::dealloc (28 samples, 0.01%)</title><rect x="5.3869%" y="1445" width="0.0127%" height="15" fill="rgb(250,154,43)" fg:x="11903" fg:w="28"/><text x="5.6369%" y="1455.50"></text></g><g><title>cfree (27 samples, 0.01%)</title><rect x="5.3874%" y="1429" width="0.0122%" height="15" fill="rgb(226,43,29)" fg:x="11904" fg:w="27"/><text x="5.6374%" y="1439.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort (1,108 samples, 0.50%)</title><rect x="4.9054%" y="1541" width="0.5014%" height="15" fill="rgb(249,228,39)" fg:x="10839" fg:w="1108"/><text x="5.1554%" y="1551.50"></text></g><g><title>alloc::slice::merge_sort (1,108 samples, 0.50%)</title><rect x="4.9054%" y="1525" width="0.5014%" height="15" fill="rgb(216,79,43)" fg:x="10839" fg:w="1108"/><text x="5.1554%" y="1535.50"></text></g><g><title>rustreexo::accumulator::proof::Proof::sorted_push (1,127 samples, 0.51%)</title><rect x="4.9050%" y="1557" width="0.5100%" height="15" fill="rgb(228,95,12)" fg:x="10838" fg:w="1127"/><text x="5.1550%" y="1567.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::chain_update (38 samples, 0.02%)</title><rect x="5.4159%" y="1541" width="0.0172%" height="15" fill="rgb(249,221,15)" fg:x="11967" fg:w="38"/><text x="5.6659%" y="1551.50"></text></g><g><title>[libc.so.6] (28 samples, 0.01%)</title><rect x="5.4204%" y="1525" width="0.0127%" height="15" fill="rgb(233,34,13)" fg:x="11977" fg:w="28"/><text x="5.6704%" y="1535.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (23 samples, 0.01%)</title><rect x="5.4684%" y="1365" width="0.0104%" height="15" fill="rgb(214,103,39)" fg:x="12083" fg:w="23"/><text x="5.7184%" y="1375.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (23 samples, 0.01%)</title><rect x="5.4684%" y="1349" width="0.0104%" height="15" fill="rgb(251,126,39)" fg:x="12083" fg:w="23"/><text x="5.7184%" y="1359.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi64 (36 samples, 0.02%)</title><rect x="5.4788%" y="1349" width="0.0163%" height="15" fill="rgb(214,216,36)" fg:x="12106" fg:w="36"/><text x="5.7288%" y="1359.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_srli_epi64 (35 samples, 0.02%)</title><rect x="5.5005%" y="1349" width="0.0158%" height="15" fill="rgb(220,221,8)" fg:x="12154" fg:w="35"/><text x="5.7505%" y="1359.50"></text></g><g><title>sha2::sha512::x86::sha512_update_x_avx (137 samples, 0.06%)</title><rect x="5.4788%" y="1365" width="0.0620%" height="15" fill="rgb(240,216,3)" fg:x="12106" fg:w="137"/><text x="5.7288%" y="1375.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (54 samples, 0.02%)</title><rect x="5.5164%" y="1349" width="0.0244%" height="15" fill="rgb(232,218,17)" fg:x="12189" fg:w="54"/><text x="5.7664%" y="1359.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (38 samples, 0.02%)</title><rect x="5.5612%" y="1349" width="0.0172%" height="15" fill="rgb(229,163,45)" fg:x="12288" fg:w="38"/><text x="5.8112%" y="1359.50"></text></g><g><title>sha2::sha512::x86::rounds_0_63_avx (300 samples, 0.14%)</title><rect x="5.4548%" y="1381" width="0.1358%" height="15" fill="rgb(231,110,42)" fg:x="12053" fg:w="300"/><text x="5.7048%" y="1391.50"></text></g><g><title>sha2::sha512::x86::sha_round (110 samples, 0.05%)</title><rect x="5.5408%" y="1365" width="0.0498%" height="15" fill="rgb(208,170,48)" fg:x="12243" fg:w="110"/><text x="5.7908%" y="1375.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (27 samples, 0.01%)</title><rect x="5.5784%" y="1349" width="0.0122%" height="15" fill="rgb(239,116,25)" fg:x="12326" fg:w="27"/><text x="5.8284%" y="1359.50"></text></g><g><title>&lt;sha2::core_api::Sha512VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core::{{closure}} (397 samples, 0.18%)</title><rect x="5.4345%" y="1429" width="0.1797%" height="15" fill="rgb(219,200,50)" fg:x="12008" fg:w="397"/><text x="5.6845%" y="1439.50"></text></g><g><title>sha2::sha512::x86::sha512_compress_x86_64_avx2 (395 samples, 0.18%)</title><rect x="5.4354%" y="1413" width="0.1788%" height="15" fill="rgb(245,200,0)" fg:x="12010" fg:w="395"/><text x="5.6854%" y="1423.50"></text></g><g><title>sha2::sha512::x86::sha512_compress_x86_64_avx (381 samples, 0.17%)</title><rect x="5.4417%" y="1397" width="0.1724%" height="15" fill="rgb(245,119,33)" fg:x="12024" fg:w="381"/><text x="5.6917%" y="1407.50"></text></g><g><title>sha2::sha512::x86::rounds_64_79 (52 samples, 0.02%)</title><rect x="5.5906%" y="1381" width="0.0235%" height="15" fill="rgb(231,125,12)" fg:x="12353" fg:w="52"/><text x="5.8406%" y="1391.50"></text></g><g><title>sha2::sha512::x86::sha_round (50 samples, 0.02%)</title><rect x="5.5915%" y="1365" width="0.0226%" height="15" fill="rgb(216,96,41)" fg:x="12355" fg:w="50"/><text x="5.8415%" y="1375.50"></text></g><g><title>&lt;sha2::core_api::Sha512VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (401 samples, 0.18%)</title><rect x="5.4331%" y="1477" width="0.1815%" height="15" fill="rgb(248,43,45)" fg:x="12005" fg:w="401"/><text x="5.6831%" y="1487.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len128_padding_be (399 samples, 0.18%)</title><rect x="5.4340%" y="1461" width="0.1806%" height="15" fill="rgb(217,222,7)" fg:x="12007" fg:w="399"/><text x="5.6840%" y="1471.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (399 samples, 0.18%)</title><rect x="5.4340%" y="1445" width="0.1806%" height="15" fill="rgb(233,28,6)" fg:x="12007" fg:w="399"/><text x="5.6840%" y="1455.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (405 samples, 0.18%)</title><rect x="5.4331%" y="1509" width="0.1833%" height="15" fill="rgb(231,218,15)" fg:x="12005" fg:w="405"/><text x="5.6831%" y="1519.50"></text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (405 samples, 0.18%)</title><rect x="5.4331%" y="1493" width="0.1833%" height="15" fill="rgb(226,171,48)" fg:x="12005" fg:w="405"/><text x="5.6831%" y="1503.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (428 samples, 0.19%)</title><rect x="5.4331%" y="1541" width="0.1937%" height="15" fill="rgb(235,201,9)" fg:x="12005" fg:w="428"/><text x="5.6831%" y="1551.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (428 samples, 0.19%)</title><rect x="5.4331%" y="1525" width="0.1937%" height="15" fill="rgb(217,80,15)" fg:x="12005" fg:w="428"/><text x="5.6831%" y="1535.50"></text></g><g><title>[libc.so.6] (23 samples, 0.01%)</title><rect x="5.6164%" y="1509" width="0.0104%" height="15" fill="rgb(219,152,8)" fg:x="12410" fg:w="23"/><text x="5.8664%" y="1519.50"></text></g><g><title>rustreexo::accumulator::types::parent_hash (486 samples, 0.22%)</title><rect x="5.4150%" y="1557" width="0.2199%" height="15" fill="rgb(243,107,38)" fg:x="11965" fg:w="486"/><text x="5.6650%" y="1567.50"></text></g><g><title>rustreexo::accumulator::proof::Proof::calculate_hashes (1,778 samples, 0.80%)</title><rect x="4.8312%" y="1573" width="0.8047%" height="15" fill="rgb(231,17,5)" fg:x="10675" fg:w="1778"/><text x="5.0812%" y="1583.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort::{{closure}} (68 samples, 0.03%)</title><rect x="5.6639%" y="1525" width="0.0308%" height="15" fill="rgb(209,25,54)" fg:x="12515" fg:w="68"/><text x="5.9139%" y="1535.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (U,T)&gt;::lt (68 samples, 0.03%)</title><rect x="5.6639%" y="1509" width="0.0308%" height="15" fill="rgb(219,0,2)" fg:x="12515" fg:w="68"/><text x="5.9139%" y="1519.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::ne (61 samples, 0.03%)</title><rect x="5.6671%" y="1493" width="0.0276%" height="15" fill="rgb(246,9,5)" fg:x="12522" fg:w="61"/><text x="5.9171%" y="1503.50"></text></g><g><title>alloc::slice::insert_head (33 samples, 0.01%)</title><rect x="5.6947%" y="1525" width="0.0149%" height="15" fill="rgb(226,159,4)" fg:x="12583" fg:w="33"/><text x="5.9447%" y="1535.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort::{{closure}} (27 samples, 0.01%)</title><rect x="5.7268%" y="1509" width="0.0122%" height="15" fill="rgb(219,175,34)" fg:x="12654" fg:w="27"/><text x="5.9768%" y="1519.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (U,T)&gt;::lt (27 samples, 0.01%)</title><rect x="5.7268%" y="1493" width="0.0122%" height="15" fill="rgb(236,10,46)" fg:x="12654" fg:w="27"/><text x="5.9768%" y="1503.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (74 samples, 0.03%)</title><rect x="5.7390%" y="1509" width="0.0335%" height="15" fill="rgb(240,211,16)" fg:x="12681" fg:w="74"/><text x="5.9890%" y="1519.50"></text></g><g><title>alloc::slice::merge (143 samples, 0.06%)</title><rect x="5.7096%" y="1525" width="0.0647%" height="15" fill="rgb(205,3,43)" fg:x="12616" fg:w="143"/><text x="5.9596%" y="1535.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (46 samples, 0.02%)</title><rect x="5.7857%" y="1525" width="0.0208%" height="15" fill="rgb(245,7,22)" fg:x="12784" fg:w="46"/><text x="6.0357%" y="1535.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (46 samples, 0.02%)</title><rect x="5.7857%" y="1509" width="0.0208%" height="15" fill="rgb(239,132,32)" fg:x="12784" fg:w="46"/><text x="6.0357%" y="1519.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (46 samples, 0.02%)</title><rect x="5.7857%" y="1493" width="0.0208%" height="15" fill="rgb(228,202,34)" fg:x="12784" fg:w="46"/><text x="6.0357%" y="1503.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (46 samples, 0.02%)</title><rect x="5.7857%" y="1477" width="0.0208%" height="15" fill="rgb(254,200,22)" fg:x="12784" fg:w="46"/><text x="6.0357%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 0.02%)</title><rect x="5.7857%" y="1461" width="0.0208%" height="15" fill="rgb(219,10,39)" fg:x="12784" fg:w="46"/><text x="6.0357%" y="1471.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.02%)</title><rect x="5.7857%" y="1445" width="0.0208%" height="15" fill="rgb(226,210,39)" fg:x="12784" fg:w="46"/><text x="6.0357%" y="1455.50"></text></g><g><title>alloc::alloc::alloc (46 samples, 0.02%)</title><rect x="5.7857%" y="1429" width="0.0208%" height="15" fill="rgb(208,219,16)" fg:x="12784" fg:w="46"/><text x="6.0357%" y="1439.50"></text></g><g><title>malloc (46 samples, 0.02%)</title><rect x="5.7857%" y="1413" width="0.0208%" height="15" fill="rgb(216,158,51)" fg:x="12784" fg:w="46"/><text x="6.0357%" y="1423.50"></text></g><g><title>[libc.so.6] (31 samples, 0.01%)</title><rect x="5.7925%" y="1397" width="0.0140%" height="15" fill="rgb(233,14,44)" fg:x="12799" fg:w="31"/><text x="6.0425%" y="1407.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort (393 samples, 0.18%)</title><rect x="5.6399%" y="1557" width="0.1779%" height="15" fill="rgb(237,97,39)" fg:x="12462" fg:w="393"/><text x="5.8899%" y="1567.50"></text></g><g><title>alloc::slice::merge_sort (393 samples, 0.18%)</title><rect x="5.6399%" y="1541" width="0.1779%" height="15" fill="rgb(218,198,43)" fg:x="12462" fg:w="393"/><text x="5.8899%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::dedup::{{closure}} (129 samples, 0.06%)</title><rect x="5.8336%" y="1525" width="0.0584%" height="15" fill="rgb(231,104,20)" fg:x="12890" fg:w="129"/><text x="6.0836%" y="1535.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;mut B&gt; for &amp;mut A&gt;::eq (129 samples, 0.06%)</title><rect x="5.8336%" y="1509" width="0.0584%" height="15" fill="rgb(254,36,13)" fg:x="12890" fg:w="129"/><text x="6.0836%" y="1519.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (129 samples, 0.06%)</title><rect x="5.8336%" y="1493" width="0.0584%" height="15" fill="rgb(248,14,50)" fg:x="12890" fg:w="129"/><text x="6.0836%" y="1503.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::dedup (196 samples, 0.09%)</title><rect x="5.8178%" y="1557" width="0.0887%" height="15" fill="rgb(217,107,29)" fg:x="12855" fg:w="196"/><text x="6.0678%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::dedup_by (196 samples, 0.09%)</title><rect x="5.8178%" y="1541" width="0.0887%" height="15" fill="rgb(251,169,33)" fg:x="12855" fg:w="196"/><text x="6.0678%" y="1551.50"></text></g><g><title>core::intrinsics::copy (32 samples, 0.01%)</title><rect x="5.8920%" y="1525" width="0.0145%" height="15" fill="rgb(217,108,32)" fg:x="13019" fg:w="32"/><text x="6.1420%" y="1535.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (28 samples, 0.01%)</title><rect x="5.9088%" y="1493" width="0.0127%" height="15" fill="rgb(219,66,42)" fg:x="13056" fg:w="28"/><text x="6.1588%" y="1503.50"></text></g><g><title>alloc::alloc::Global::grow_impl (28 samples, 0.01%)</title><rect x="5.9088%" y="1477" width="0.0127%" height="15" fill="rgb(206,180,7)" fg:x="13056" fg:w="28"/><text x="6.1588%" y="1487.50"></text></g><g><title>alloc::alloc::realloc (28 samples, 0.01%)</title><rect x="5.9088%" y="1461" width="0.0127%" height="15" fill="rgb(208,226,31)" fg:x="13056" fg:w="28"/><text x="6.1588%" y="1471.50"></text></g><g><title>realloc (28 samples, 0.01%)</title><rect x="5.9088%" y="1445" width="0.0127%" height="15" fill="rgb(218,26,49)" fg:x="13056" fg:w="28"/><text x="6.1588%" y="1455.50"></text></g><g><title>[libc.so.6] (27 samples, 0.01%)</title><rect x="5.9092%" y="1429" width="0.0122%" height="15" fill="rgb(233,197,48)" fg:x="13057" fg:w="27"/><text x="6.1592%" y="1439.50"></text></g><g><title>[libc.so.6] (27 samples, 0.01%)</title><rect x="5.9092%" y="1413" width="0.0122%" height="15" fill="rgb(252,181,51)" fg:x="13057" fg:w="27"/><text x="6.1592%" y="1423.50"></text></g><g><title>alloc::raw_vec::finish_grow (33 samples, 0.01%)</title><rect x="5.9083%" y="1509" width="0.0149%" height="15" fill="rgb(253,90,19)" fg:x="13055" fg:w="33"/><text x="6.1583%" y="1519.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (36 samples, 0.02%)</title><rect x="5.9079%" y="1541" width="0.0163%" height="15" fill="rgb(215,171,30)" fg:x="13054" fg:w="36"/><text x="6.1579%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (35 samples, 0.02%)</title><rect x="5.9083%" y="1525" width="0.0158%" height="15" fill="rgb(214,222,9)" fg:x="13055" fg:w="35"/><text x="6.1583%" y="1535.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (41 samples, 0.02%)</title><rect x="5.9065%" y="1557" width="0.0186%" height="15" fill="rgb(223,3,22)" fg:x="13051" fg:w="41"/><text x="6.1565%" y="1567.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::chain_update (24 samples, 0.01%)</title><rect x="5.9260%" y="1541" width="0.0109%" height="15" fill="rgb(225,196,46)" fg:x="13094" fg:w="24"/><text x="6.1760%" y="1551.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi64 (32 samples, 0.01%)</title><rect x="5.9694%" y="1349" width="0.0145%" height="15" fill="rgb(209,110,37)" fg:x="13190" fg:w="32"/><text x="6.2194%" y="1359.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_srli_epi64 (27 samples, 0.01%)</title><rect x="5.9884%" y="1349" width="0.0122%" height="15" fill="rgb(249,89,12)" fg:x="13232" fg:w="27"/><text x="6.2384%" y="1359.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (28 samples, 0.01%)</title><rect x="6.0006%" y="1349" width="0.0127%" height="15" fill="rgb(226,27,33)" fg:x="13259" fg:w="28"/><text x="6.2506%" y="1359.50"></text></g><g><title>sha2::sha512::x86::sha512_update_x_avx (98 samples, 0.04%)</title><rect x="5.9694%" y="1365" width="0.0444%" height="15" fill="rgb(213,82,22)" fg:x="13190" fg:w="98"/><text x="6.2194%" y="1375.50"></text></g><g><title>sha2::sha512::x86::rounds_0_63_avx (211 samples, 0.10%)</title><rect x="5.9486%" y="1381" width="0.0955%" height="15" fill="rgb(248,140,0)" fg:x="13144" fg:w="211"/><text x="6.1986%" y="1391.50"></text></g><g><title>sha2::sha512::x86::sha_round (67 samples, 0.03%)</title><rect x="6.0138%" y="1365" width="0.0303%" height="15" fill="rgb(228,106,3)" fg:x="13288" fg:w="67"/><text x="6.2638%" y="1375.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (23 samples, 0.01%)</title><rect x="6.0337%" y="1349" width="0.0104%" height="15" fill="rgb(209,23,37)" fg:x="13332" fg:w="23"/><text x="6.2837%" y="1359.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (265 samples, 0.12%)</title><rect x="5.9368%" y="1509" width="0.1199%" height="15" fill="rgb(241,93,50)" fg:x="13118" fg:w="265"/><text x="6.1868%" y="1519.50"></text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (265 samples, 0.12%)</title><rect x="5.9368%" y="1493" width="0.1199%" height="15" fill="rgb(253,46,43)" fg:x="13118" fg:w="265"/><text x="6.1868%" y="1503.50"></text></g><g><title>&lt;sha2::core_api::Sha512VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (265 samples, 0.12%)</title><rect x="5.9368%" y="1477" width="0.1199%" height="15" fill="rgb(226,206,43)" fg:x="13118" fg:w="265"/><text x="6.1868%" y="1487.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len128_padding_be (264 samples, 0.12%)</title><rect x="5.9373%" y="1461" width="0.1195%" height="15" fill="rgb(217,54,7)" fg:x="13119" fg:w="264"/><text x="6.1873%" y="1471.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (263 samples, 0.12%)</title><rect x="5.9377%" y="1445" width="0.1190%" height="15" fill="rgb(223,5,52)" fg:x="13120" fg:w="263"/><text x="6.1877%" y="1455.50"></text></g><g><title>&lt;sha2::core_api::Sha512VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core::{{closure}} (262 samples, 0.12%)</title><rect x="5.9382%" y="1429" width="0.1186%" height="15" fill="rgb(206,52,46)" fg:x="13121" fg:w="262"/><text x="6.1882%" y="1439.50"></text></g><g><title>sha2::sha512::x86::sha512_compress_x86_64_avx2 (258 samples, 0.12%)</title><rect x="5.9400%" y="1413" width="0.1168%" height="15" fill="rgb(253,136,11)" fg:x="13125" fg:w="258"/><text x="6.1900%" y="1423.50"></text></g><g><title>sha2::sha512::x86::sha512_compress_x86_64_avx (250 samples, 0.11%)</title><rect x="5.9436%" y="1397" width="0.1131%" height="15" fill="rgb(208,106,33)" fg:x="13133" fg:w="250"/><text x="6.1936%" y="1407.50"></text></g><g><title>sha2::sha512::x86::rounds_64_79 (28 samples, 0.01%)</title><rect x="6.0441%" y="1381" width="0.0127%" height="15" fill="rgb(206,54,4)" fg:x="13355" fg:w="28"/><text x="6.2941%" y="1391.50"></text></g><g><title>sha2::sha512::x86::sha_round (26 samples, 0.01%)</title><rect x="6.0450%" y="1365" width="0.0118%" height="15" fill="rgb(213,3,15)" fg:x="13357" fg:w="26"/><text x="6.2950%" y="1375.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (272 samples, 0.12%)</title><rect x="5.9368%" y="1541" width="0.1231%" height="15" fill="rgb(252,211,39)" fg:x="13118" fg:w="272"/><text x="6.1868%" y="1551.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (272 samples, 0.12%)</title><rect x="5.9368%" y="1525" width="0.1231%" height="15" fill="rgb(223,6,36)" fg:x="13118" fg:w="272"/><text x="6.1868%" y="1535.50"></text></g><g><title>rustreexo::accumulator::types::parent_hash (303 samples, 0.14%)</title><rect x="5.9251%" y="1557" width="0.1371%" height="15" fill="rgb(252,169,45)" fg:x="13092" fg:w="303"/><text x="6.1751%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (29 samples, 0.01%)</title><rect x="6.0676%" y="1541" width="0.0131%" height="15" fill="rgb(212,48,26)" fg:x="13407" fg:w="29"/><text x="6.3176%" y="1551.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (28 samples, 0.01%)</title><rect x="6.0681%" y="1525" width="0.0127%" height="15" fill="rgb(251,102,48)" fg:x="13408" fg:w="28"/><text x="6.3181%" y="1535.50"></text></g><g><title>alloc::slice::hack::to_vec (28 samples, 0.01%)</title><rect x="6.0681%" y="1509" width="0.0127%" height="15" fill="rgb(243,208,16)" fg:x="13408" fg:w="28"/><text x="6.3181%" y="1519.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (28 samples, 0.01%)</title><rect x="6.0681%" y="1493" width="0.0127%" height="15" fill="rgb(219,96,24)" fg:x="13408" fg:w="28"/><text x="6.3181%" y="1503.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (231 samples, 0.10%)</title><rect x="6.0957%" y="1477" width="0.1045%" height="15" fill="rgb(219,33,29)" fg:x="13469" fg:w="231"/><text x="6.3457%" y="1487.50"></text></g><g><title>alloc::alloc::Global::grow_impl (231 samples, 0.10%)</title><rect x="6.0957%" y="1461" width="0.1045%" height="15" fill="rgb(223,176,5)" fg:x="13469" fg:w="231"/><text x="6.3457%" y="1471.50"></text></g><g><title>alloc::alloc::realloc (231 samples, 0.10%)</title><rect x="6.0957%" y="1445" width="0.1045%" height="15" fill="rgb(228,140,14)" fg:x="13469" fg:w="231"/><text x="6.3457%" y="1455.50"></text></g><g><title>realloc (228 samples, 0.10%)</title><rect x="6.0970%" y="1429" width="0.1032%" height="15" fill="rgb(217,179,31)" fg:x="13472" fg:w="228"/><text x="6.3470%" y="1439.50"></text></g><g><title>[libc.so.6] (186 samples, 0.08%)</title><rect x="6.1160%" y="1413" width="0.0842%" height="15" fill="rgb(230,9,30)" fg:x="13514" fg:w="186"/><text x="6.3660%" y="1423.50"></text></g><g><title>[libc.so.6] (177 samples, 0.08%)</title><rect x="6.1201%" y="1397" width="0.0801%" height="15" fill="rgb(230,136,20)" fg:x="13523" fg:w="177"/><text x="6.3701%" y="1407.50"></text></g><g><title>alloc::raw_vec::finish_grow (239 samples, 0.11%)</title><rect x="6.0939%" y="1493" width="0.1082%" height="15" fill="rgb(215,210,22)" fg:x="13465" fg:w="239"/><text x="6.3439%" y="1503.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (241 samples, 0.11%)</title><rect x="6.0934%" y="1525" width="0.1091%" height="15" fill="rgb(218,43,5)" fg:x="13464" fg:w="241"/><text x="6.3434%" y="1535.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (240 samples, 0.11%)</title><rect x="6.0939%" y="1509" width="0.1086%" height="15" fill="rgb(216,11,5)" fg:x="13465" fg:w="240"/><text x="6.3439%" y="1519.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (395 samples, 0.18%)</title><rect x="6.0871%" y="1541" width="0.1788%" height="15" fill="rgb(209,82,29)" fg:x="13450" fg:w="395"/><text x="6.3371%" y="1551.50"></text></g><g><title>core::ptr::write (140 samples, 0.06%)</title><rect x="6.2025%" y="1525" width="0.0634%" height="15" fill="rgb(244,115,12)" fg:x="13705" fg:w="140"/><text x="6.4525%" y="1535.50"></text></g><g><title>&lt;core::str::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (1,372 samples, 0.62%)</title><rect x="13.6722%" y="1461" width="0.6209%" height="15" fill="rgb(222,82,18)" fg:x="30210" fg:w="1372"/><text x="13.9222%" y="1471.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,372 samples, 0.62%)</title><rect x="13.6722%" y="1445" width="0.6209%" height="15" fill="rgb(249,227,8)" fg:x="30210" fg:w="1372"/><text x="13.9222%" y="1455.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,372 samples, 0.62%)</title><rect x="13.6722%" y="1429" width="0.6209%" height="15" fill="rgb(253,141,45)" fg:x="30210" fg:w="1372"/><text x="13.9222%" y="1439.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (603 samples, 0.27%)</title><rect x="14.0202%" y="1413" width="0.2729%" height="15" fill="rgb(234,184,4)" fg:x="30979" fg:w="603"/><text x="14.2702%" y="1423.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (603 samples, 0.27%)</title><rect x="14.0202%" y="1397" width="0.2729%" height="15" fill="rgb(218,194,23)" fg:x="30979" fg:w="603"/><text x="14.2702%" y="1407.50"></text></g><g><title>&lt;bitcoin_hashes::hex::HexIterator as core::iter::traits::iterator::Iterator&gt;::next (2,638 samples, 1.19%)</title><rect x="13.3667%" y="1477" width="1.1939%" height="15" fill="rgb(235,66,41)" fg:x="29535" fg:w="2638"/><text x="13.6167%" y="1487.50"></text></g><g><title>bitcoin_hashes::hex::chars_to_hex (591 samples, 0.27%)</title><rect x="14.2931%" y="1461" width="0.2675%" height="15" fill="rgb(245,217,1)" fg:x="31582" fg:w="591"/><text x="14.5431%" y="1471.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (588 samples, 0.27%)</title><rect x="14.2944%" y="1445" width="0.2661%" height="15" fill="rgb(229,91,1)" fg:x="31585" fg:w="588"/><text x="14.5444%" y="1455.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19,750 samples, 8.94%)</title><rect x="13.3662%" y="1493" width="8.9383%" height="15" fill="rgb(207,101,30)" fg:x="29534" fg:w="19750"/><text x="13.6162%" y="1503.50">&lt;core::iter::..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (17,111 samples, 7.74%)</title><rect x="14.5606%" y="1477" width="7.7439%" height="15" fill="rgb(223,82,49)" fg:x="32173" fg:w="17111"/><text x="14.8106%" y="1487.50">&lt;core::opti..</text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="22.2927%" y="1461" width="0.0118%" height="15" fill="rgb(218,167,17)" fg:x="49258" fg:w="26"/><text x="22.5427%" y="1471.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="22.2941%" y="1445" width="0.0104%" height="15" fill="rgb(208,103,14)" fg:x="49261" fg:w="23"/><text x="22.5441%" y="1455.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (581 samples, 0.26%)</title><rect x="22.3045%" y="1493" width="0.2629%" height="15" fill="rgb(238,20,8)" fg:x="49284" fg:w="581"/><text x="22.5545%" y="1503.50"></text></g><g><title>&lt;bitcoin_hashes::hex::HexIterator as core::iter::traits::iterator::Iterator&gt;::size_hint (43 samples, 0.02%)</title><rect x="22.5883%" y="1477" width="0.0195%" height="15" fill="rgb(218,80,54)" fg:x="49911" fg:w="43"/><text x="22.8383%" y="1487.50"></text></g><g><title>&lt;core::str::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::size_hint (23 samples, 0.01%)</title><rect x="22.5973%" y="1461" width="0.0104%" height="15" fill="rgb(240,144,17)" fg:x="49931" fg:w="23"/><text x="22.8473%" y="1471.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (23 samples, 0.01%)</title><rect x="22.5973%" y="1445" width="0.0104%" height="15" fill="rgb(245,27,50)" fg:x="49931" fg:w="23"/><text x="22.8473%" y="1455.50"></text></g><g><title>&lt;[u8: 32] as bitcoin_hashes::hex::FromHex&gt;::from_byte_iter (35,555 samples, 16.09%)</title><rect x="6.5243%" y="1509" width="16.0911%" height="15" fill="rgb(251,51,7)" fg:x="14416" fg:w="35555"/><text x="6.7743%" y="1519.50">&lt;[u8: 32] as bitcoin_hash..</text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (86 samples, 0.04%)</title><rect x="22.5765%" y="1493" width="0.0389%" height="15" fill="rgb(245,217,29)" fg:x="49885" fg:w="86"/><text x="22.8265%" y="1503.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (435 samples, 0.20%)</title><rect x="22.6154%" y="1509" width="0.1969%" height="15" fill="rgb(221,176,29)" fg:x="49971" fg:w="435"/><text x="22.8654%" y="1519.50"></text></g><g><title>&lt;T as bitcoin_hashes::hex::FromHex&gt;::from_byte_iter (37,023 samples, 16.76%)</title><rect x="6.2717%" y="1525" width="16.7555%" height="15" fill="rgb(212,180,24)" fg:x="13858" fg:w="37023"/><text x="6.5217%" y="1535.50">&lt;T as bitcoin_hashes::hex:..</text></g><g><title>bitcoin_hashes::sha256::Midstate::from_inner (474 samples, 0.21%)</title><rect x="22.8127%" y="1509" width="0.2145%" height="15" fill="rgb(254,24,2)" fg:x="50407" fg:w="474"/><text x="23.0627%" y="1519.50"></text></g><g><title>bitcoin_hashes::hex::FromHex::from_hex (37,095 samples, 16.79%)</title><rect x="6.2658%" y="1541" width="16.7881%" height="15" fill="rgb(230,100,2)" fg:x="13845" fg:w="37095"/><text x="6.5158%" y="1551.50">bitcoin_hashes::hex::FromH..</text></g><g><title>bitcoin_hashes::hex::HexIterator::new (39 samples, 0.02%)</title><rect x="23.0363%" y="1525" width="0.0177%" height="15" fill="rgb(219,142,25)" fg:x="50901" fg:w="39"/><text x="23.2863%" y="1535.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (26 samples, 0.01%)</title><rect x="23.0553%" y="1541" width="0.0118%" height="15" fill="rgb(240,73,43)" fg:x="50943" fg:w="26"/><text x="23.3053%" y="1551.50"></text></g><g><title>rustreexo::accumulator::stump::Stump::add (38,533 samples, 17.44%)</title><rect x="5.6359%" y="1573" width="17.4389%" height="15" fill="rgb(214,114,15)" fg:x="12453" fg:w="38533"/><text x="5.8859%" y="1583.50">rustreexo::accumulator::stu..</text></g><g><title>rustreexo::accumulator::util::roots_to_destroy (37,591 samples, 17.01%)</title><rect x="6.0622%" y="1557" width="17.0126%" height="15" fill="rgb(207,130,4)" fg:x="13395" fg:w="37591"/><text x="6.3122%" y="1567.50">rustreexo::accumulator::ut..</text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (41 samples, 0.02%)</title><rect x="23.0802%" y="1541" width="0.0186%" height="15" fill="rgb(221,25,40)" fg:x="50998" fg:w="41"/><text x="23.3302%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (41 samples, 0.02%)</title><rect x="23.0802%" y="1525" width="0.0186%" height="15" fill="rgb(241,184,7)" fg:x="50998" fg:w="41"/><text x="23.3302%" y="1535.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (41 samples, 0.02%)</title><rect x="23.0802%" y="1509" width="0.0186%" height="15" fill="rgb(235,159,4)" fg:x="50998" fg:w="41"/><text x="23.3302%" y="1519.50"></text></g><g><title>alloc::slice::hack::to_vec (41 samples, 0.02%)</title><rect x="23.0802%" y="1493" width="0.0186%" height="15" fill="rgb(214,87,48)" fg:x="50998" fg:w="41"/><text x="23.3302%" y="1503.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (41 samples, 0.02%)</title><rect x="23.0802%" y="1477" width="0.0186%" height="15" fill="rgb(246,198,24)" fg:x="50998" fg:w="41"/><text x="23.3302%" y="1487.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (28 samples, 0.01%)</title><rect x="23.0861%" y="1461" width="0.0127%" height="15" fill="rgb(209,66,40)" fg:x="51011" fg:w="28"/><text x="23.3361%" y="1471.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 0.01%)</title><rect x="23.0861%" y="1445" width="0.0127%" height="15" fill="rgb(233,147,39)" fg:x="51011" fg:w="28"/><text x="23.3361%" y="1455.50"></text></g><g><title>[libc.so.6] (28 samples, 0.01%)</title><rect x="23.0861%" y="1429" width="0.0127%" height="15" fill="rgb(231,145,52)" fg:x="51011" fg:w="28"/><text x="23.3361%" y="1439.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.01%)</title><rect x="23.1015%" y="1477" width="0.0104%" height="15" fill="rgb(206,20,26)" fg:x="51045" fg:w="23"/><text x="23.3515%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.02%)</title><rect x="23.1015%" y="1525" width="0.0208%" height="15" fill="rgb(238,220,4)" fg:x="51045" fg:w="46"/><text x="23.3515%" y="1535.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (46 samples, 0.02%)</title><rect x="23.1015%" y="1509" width="0.0208%" height="15" fill="rgb(252,195,42)" fg:x="51045" fg:w="46"/><text x="23.3515%" y="1519.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (46 samples, 0.02%)</title><rect x="23.1015%" y="1493" width="0.0208%" height="15" fill="rgb(209,10,6)" fg:x="51045" fg:w="46"/><text x="23.3515%" y="1503.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (23 samples, 0.01%)</title><rect x="23.1119%" y="1477" width="0.0104%" height="15" fill="rgb(229,3,52)" fg:x="51068" fg:w="23"/><text x="23.3619%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.02%)</title><rect x="23.1015%" y="1541" width="0.0213%" height="15" fill="rgb(253,49,37)" fg:x="51045" fg:w="47"/><text x="23.3515%" y="1551.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort::{{closure}} (607 samples, 0.27%)</title><rect x="23.2934%" y="1493" width="0.2747%" height="15" fill="rgb(240,103,49)" fg:x="51469" fg:w="607"/><text x="23.5434%" y="1503.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (U,T)&gt;::lt (607 samples, 0.27%)</title><rect x="23.2934%" y="1477" width="0.2747%" height="15" fill="rgb(250,182,30)" fg:x="51469" fg:w="607"/><text x="23.5434%" y="1487.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::ne (565 samples, 0.26%)</title><rect x="23.3124%" y="1461" width="0.2557%" height="15" fill="rgb(248,8,30)" fg:x="51511" fg:w="565"/><text x="23.5624%" y="1471.50"></text></g><g><title>alloc::slice::merge (32 samples, 0.01%)</title><rect x="23.5735%" y="1493" width="0.0145%" height="15" fill="rgb(237,120,30)" fg:x="52088" fg:w="32"/><text x="23.8235%" y="1503.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (32 samples, 0.01%)</title><rect x="23.5884%" y="1493" width="0.0145%" height="15" fill="rgb(221,146,34)" fg:x="52121" fg:w="32"/><text x="23.8384%" y="1503.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (43 samples, 0.02%)</title><rect x="23.6034%" y="1493" width="0.0195%" height="15" fill="rgb(242,55,13)" fg:x="52154" fg:w="43"/><text x="23.8534%" y="1503.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43 samples, 0.02%)</title><rect x="23.6034%" y="1477" width="0.0195%" height="15" fill="rgb(242,112,31)" fg:x="52154" fg:w="43"/><text x="23.8534%" y="1487.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (43 samples, 0.02%)</title><rect x="23.6034%" y="1461" width="0.0195%" height="15" fill="rgb(249,192,27)" fg:x="52154" fg:w="43"/><text x="23.8534%" y="1471.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (43 samples, 0.02%)</title><rect x="23.6034%" y="1445" width="0.0195%" height="15" fill="rgb(208,204,44)" fg:x="52154" fg:w="43"/><text x="23.8534%" y="1455.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (43 samples, 0.02%)</title><rect x="23.6034%" y="1429" width="0.0195%" height="15" fill="rgb(208,93,54)" fg:x="52154" fg:w="43"/><text x="23.8534%" y="1439.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.02%)</title><rect x="23.6034%" y="1413" width="0.0195%" height="15" fill="rgb(242,1,31)" fg:x="52154" fg:w="43"/><text x="23.8534%" y="1423.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.02%)</title><rect x="23.6034%" y="1397" width="0.0195%" height="15" fill="rgb(241,83,25)" fg:x="52154" fg:w="43"/><text x="23.8534%" y="1407.50"></text></g><g><title>malloc (42 samples, 0.02%)</title><rect x="23.6038%" y="1381" width="0.0190%" height="15" fill="rgb(205,169,50)" fg:x="52155" fg:w="42"/><text x="23.8538%" y="1391.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort (1,111 samples, 0.50%)</title><rect x="23.1372%" y="1525" width="0.5028%" height="15" fill="rgb(239,186,37)" fg:x="51124" fg:w="1111"/><text x="23.3872%" y="1535.50"></text></g><g><title>alloc::slice::merge_sort (1,111 samples, 0.50%)</title><rect x="23.1372%" y="1509" width="0.5028%" height="15" fill="rgb(205,221,10)" fg:x="51124" fg:w="1111"/><text x="23.3872%" y="1519.50"></text></g><g><title>rustreexo::accumulator::proof::Proof::sorted_push (1,126 samples, 0.51%)</title><rect x="23.1368%" y="1541" width="0.5096%" height="15" fill="rgb(218,196,15)" fg:x="51123" fg:w="1126"/><text x="23.3868%" y="1551.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::chain_update (27 samples, 0.01%)</title><rect x="23.6477%" y="1525" width="0.0122%" height="15" fill="rgb(218,196,35)" fg:x="52252" fg:w="27"/><text x="23.8977%" y="1535.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi64 (27 samples, 0.01%)</title><rect x="23.6921%" y="1333" width="0.0122%" height="15" fill="rgb(233,63,24)" fg:x="52350" fg:w="27"/><text x="23.9421%" y="1343.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (24 samples, 0.01%)</title><rect x="23.7179%" y="1333" width="0.0109%" height="15" fill="rgb(225,8,4)" fg:x="52407" fg:w="24"/><text x="23.9679%" y="1343.50"></text></g><g><title>sha2::sha512::x86::sha512_update_x_avx (82 samples, 0.04%)</title><rect x="23.6921%" y="1349" width="0.0371%" height="15" fill="rgb(234,105,35)" fg:x="52350" fg:w="82"/><text x="23.9421%" y="1359.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (30 samples, 0.01%)</title><rect x="23.7400%" y="1333" width="0.0136%" height="15" fill="rgb(236,21,32)" fg:x="52456" fg:w="30"/><text x="23.9900%" y="1343.50"></text></g><g><title>sha2::sha512::x86::rounds_0_63_avx (196 samples, 0.09%)</title><rect x="23.6740%" y="1365" width="0.0887%" height="15" fill="rgb(228,109,6)" fg:x="52310" fg:w="196"/><text x="23.9240%" y="1375.50"></text></g><g><title>sha2::sha512::x86::sha_round (74 samples, 0.03%)</title><rect x="23.7292%" y="1349" width="0.0335%" height="15" fill="rgb(229,215,31)" fg:x="52432" fg:w="74"/><text x="23.9792%" y="1359.50"></text></g><g><title>&lt;sha2::core_api::Sha512VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (257 samples, 0.12%)</title><rect x="23.6599%" y="1461" width="0.1163%" height="15" fill="rgb(221,52,54)" fg:x="52279" fg:w="257"/><text x="23.9099%" y="1471.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len128_padding_be (256 samples, 0.12%)</title><rect x="23.6604%" y="1445" width="0.1159%" height="15" fill="rgb(252,129,43)" fg:x="52280" fg:w="256"/><text x="23.9104%" y="1455.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (256 samples, 0.12%)</title><rect x="23.6604%" y="1429" width="0.1159%" height="15" fill="rgb(248,183,27)" fg:x="52280" fg:w="256"/><text x="23.9104%" y="1439.50"></text></g><g><title>&lt;sha2::core_api::Sha512VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core::{{closure}} (255 samples, 0.12%)</title><rect x="23.6608%" y="1413" width="0.1154%" height="15" fill="rgb(250,0,22)" fg:x="52281" fg:w="255"/><text x="23.9108%" y="1423.50"></text></g><g><title>sha2::sha512::x86::sha512_compress_x86_64_avx2 (255 samples, 0.12%)</title><rect x="23.6608%" y="1397" width="0.1154%" height="15" fill="rgb(213,166,10)" fg:x="52281" fg:w="255"/><text x="23.9108%" y="1407.50"></text></g><g><title>sha2::sha512::x86::sha512_compress_x86_64_avx (248 samples, 0.11%)</title><rect x="23.6640%" y="1381" width="0.1122%" height="15" fill="rgb(207,163,36)" fg:x="52288" fg:w="248"/><text x="23.9140%" y="1391.50"></text></g><g><title>sha2::sha512::x86::rounds_64_79 (30 samples, 0.01%)</title><rect x="23.7627%" y="1365" width="0.0136%" height="15" fill="rgb(208,122,22)" fg:x="52506" fg:w="30"/><text x="24.0127%" y="1375.50"></text></g><g><title>sha2::sha512::x86::sha_round (30 samples, 0.01%)</title><rect x="23.7627%" y="1349" width="0.0136%" height="15" fill="rgb(207,104,49)" fg:x="52506" fg:w="30"/><text x="24.0127%" y="1359.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (258 samples, 0.12%)</title><rect x="23.6599%" y="1493" width="0.1168%" height="15" fill="rgb(248,211,50)" fg:x="52279" fg:w="258"/><text x="23.9099%" y="1503.50"></text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (258 samples, 0.12%)</title><rect x="23.6599%" y="1477" width="0.1168%" height="15" fill="rgb(217,13,45)" fg:x="52279" fg:w="258"/><text x="23.9099%" y="1487.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (264 samples, 0.12%)</title><rect x="23.6599%" y="1525" width="0.1195%" height="15" fill="rgb(211,216,49)" fg:x="52279" fg:w="264"/><text x="23.9099%" y="1535.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (264 samples, 0.12%)</title><rect x="23.6599%" y="1509" width="0.1195%" height="15" fill="rgb(221,58,53)" fg:x="52279" fg:w="264"/><text x="23.9099%" y="1519.50"></text></g><g><title>rustreexo::accumulator::types::parent_hash (306 samples, 0.14%)</title><rect x="23.6464%" y="1541" width="0.1385%" height="15" fill="rgb(220,112,41)" fg:x="52249" fg:w="306"/><text x="23.8964%" y="1551.50"></text></g><g><title>rustreexo::accumulator::stump::Stump::modify (41,913 samples, 18.97%)</title><rect x="4.8172%" y="1589" width="18.9686%" height="15" fill="rgb(236,38,28)" fg:x="10644" fg:w="41913"/><text x="5.0672%" y="1599.50">rustreexo::accumulator::stump:..</text></g><g><title>rustreexo::accumulator::stump::Stump::remove (1,571 samples, 0.71%)</title><rect x="23.0748%" y="1573" width="0.7110%" height="15" fill="rgb(227,195,22)" fg:x="50986" fg:w="1571"/><text x="23.3248%" y="1583.50"></text></g><g><title>rustreexo::accumulator::proof::Proof::calculate_hashes (1,563 samples, 0.71%)</title><rect x="23.0784%" y="1557" width="0.7074%" height="15" fill="rgb(214,55,33)" fg:x="50994" fg:w="1563"/><text x="23.3284%" y="1567.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (25 samples, 0.01%)</title><rect x="23.7858%" y="1589" width="0.0113%" height="15" fill="rgb(248,80,13)" fg:x="52557" fg:w="25"/><text x="24.0358%" y="1599.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (25 samples, 0.01%)</title><rect x="23.7858%" y="1573" width="0.0113%" height="15" fill="rgb(238,52,6)" fg:x="52557" fg:w="25"/><text x="24.0358%" y="1583.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (25 samples, 0.01%)</title><rect x="23.7858%" y="1557" width="0.0113%" height="15" fill="rgb(224,198,47)" fg:x="52557" fg:w="25"/><text x="24.0358%" y="1567.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (25 samples, 0.01%)</title><rect x="23.7858%" y="1541" width="0.0113%" height="15" fill="rgb(233,171,20)" fg:x="52557" fg:w="25"/><text x="24.0358%" y="1551.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (35 samples, 0.02%)</title><rect x="23.8061%" y="1525" width="0.0158%" height="15" fill="rgb(241,30,25)" fg:x="52602" fg:w="35"/><text x="24.0561%" y="1535.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (35 samples, 0.02%)</title><rect x="23.8061%" y="1509" width="0.0158%" height="15" fill="rgb(207,171,38)" fg:x="52602" fg:w="35"/><text x="24.0561%" y="1519.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (35 samples, 0.02%)</title><rect x="23.8061%" y="1493" width="0.0158%" height="15" fill="rgb(234,70,1)" fg:x="52602" fg:w="35"/><text x="24.0561%" y="1503.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (34 samples, 0.02%)</title><rect x="23.8066%" y="1477" width="0.0154%" height="15" fill="rgb(232,178,18)" fg:x="52603" fg:w="34"/><text x="24.0566%" y="1487.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (62 samples, 0.03%)</title><rect x="23.7971%" y="1589" width="0.0281%" height="15" fill="rgb(241,78,40)" fg:x="52582" fg:w="62"/><text x="24.0471%" y="1599.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (62 samples, 0.03%)</title><rect x="23.7971%" y="1573" width="0.0281%" height="15" fill="rgb(222,35,25)" fg:x="52582" fg:w="62"/><text x="24.0471%" y="1583.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (60 samples, 0.03%)</title><rect x="23.7980%" y="1557" width="0.0272%" height="15" fill="rgb(207,92,16)" fg:x="52584" fg:w="60"/><text x="24.0480%" y="1567.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (42 samples, 0.02%)</title><rect x="23.8061%" y="1541" width="0.0190%" height="15" fill="rgb(216,59,51)" fg:x="52602" fg:w="42"/><text x="24.0561%" y="1551.50"></text></g><g><title>[libc.so.6] (36 samples, 0.02%)</title><rect x="23.8324%" y="1557" width="0.0163%" height="15" fill="rgb(213,80,28)" fg:x="52660" fg:w="36"/><text x="24.0824%" y="1567.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::chain_update (58 samples, 0.03%)</title><rect x="23.8260%" y="1573" width="0.0262%" height="15" fill="rgb(220,93,7)" fg:x="52646" fg:w="58"/><text x="24.0760%" y="1583.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi64 (32 samples, 0.01%)</title><rect x="23.8812%" y="1381" width="0.0145%" height="15" fill="rgb(225,24,44)" fg:x="52768" fg:w="32"/><text x="24.1312%" y="1391.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_srli_epi64 (23 samples, 0.01%)</title><rect x="23.8998%" y="1381" width="0.0104%" height="15" fill="rgb(243,74,40)" fg:x="52809" fg:w="23"/><text x="24.1498%" y="1391.50"></text></g><g><title>sha2::sha512::x86::sha512_update_x_avx (96 samples, 0.04%)</title><rect x="23.8812%" y="1397" width="0.0434%" height="15" fill="rgb(228,39,7)" fg:x="52768" fg:w="96"/><text x="24.1312%" y="1407.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (32 samples, 0.01%)</title><rect x="23.9102%" y="1381" width="0.0145%" height="15" fill="rgb(227,79,8)" fg:x="52832" fg:w="32"/><text x="24.1602%" y="1391.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (32 samples, 0.01%)</title><rect x="23.9383%" y="1381" width="0.0145%" height="15" fill="rgb(236,58,11)" fg:x="52894" fg:w="32"/><text x="24.1883%" y="1391.50"></text></g><g><title>sha2::sha512::x86::rounds_0_63_avx (213 samples, 0.10%)</title><rect x="23.8677%" y="1413" width="0.0964%" height="15" fill="rgb(249,63,35)" fg:x="52738" fg:w="213"/><text x="24.1177%" y="1423.50"></text></g><g><title>sha2::sha512::x86::sha_round (87 samples, 0.04%)</title><rect x="23.9247%" y="1397" width="0.0394%" height="15" fill="rgb(252,114,16)" fg:x="52864" fg:w="87"/><text x="24.1747%" y="1407.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (25 samples, 0.01%)</title><rect x="23.9528%" y="1381" width="0.0113%" height="15" fill="rgb(254,151,24)" fg:x="52926" fg:w="25"/><text x="24.2028%" y="1391.50"></text></g><g><title>&lt;sha2::core_api::Sha512VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core::{{closure}} (285 samples, 0.13%)</title><rect x="23.8527%" y="1461" width="0.1290%" height="15" fill="rgb(253,54,39)" fg:x="52705" fg:w="285"/><text x="24.1027%" y="1471.50"></text></g><g><title>sha2::sha512::x86::sha512_compress_x86_64_avx2 (283 samples, 0.13%)</title><rect x="23.8536%" y="1445" width="0.1281%" height="15" fill="rgb(243,25,45)" fg:x="52707" fg:w="283"/><text x="24.1036%" y="1455.50"></text></g><g><title>sha2::sha512::x86::sha512_compress_x86_64_avx (278 samples, 0.13%)</title><rect x="23.8559%" y="1429" width="0.1258%" height="15" fill="rgb(234,134,9)" fg:x="52712" fg:w="278"/><text x="24.1059%" y="1439.50"></text></g><g><title>sha2::sha512::x86::rounds_64_79 (39 samples, 0.02%)</title><rect x="23.9641%" y="1413" width="0.0177%" height="15" fill="rgb(227,166,31)" fg:x="52951" fg:w="39"/><text x="24.2141%" y="1423.50"></text></g><g><title>sha2::sha512::x86::sha_round (39 samples, 0.02%)</title><rect x="23.9641%" y="1397" width="0.0177%" height="15" fill="rgb(245,143,41)" fg:x="52951" fg:w="39"/><text x="24.2141%" y="1407.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (287 samples, 0.13%)</title><rect x="23.8523%" y="1541" width="0.1299%" height="15" fill="rgb(238,181,32)" fg:x="52704" fg:w="287"/><text x="24.1023%" y="1551.50"></text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (287 samples, 0.13%)</title><rect x="23.8523%" y="1525" width="0.1299%" height="15" fill="rgb(224,113,18)" fg:x="52704" fg:w="287"/><text x="24.1023%" y="1535.50"></text></g><g><title>&lt;sha2::core_api::Sha512VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (287 samples, 0.13%)</title><rect x="23.8523%" y="1509" width="0.1299%" height="15" fill="rgb(240,229,28)" fg:x="52704" fg:w="287"/><text x="24.1023%" y="1519.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len128_padding_be (287 samples, 0.13%)</title><rect x="23.8523%" y="1493" width="0.1299%" height="15" fill="rgb(250,185,3)" fg:x="52704" fg:w="287"/><text x="24.1023%" y="1503.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (287 samples, 0.13%)</title><rect x="23.8523%" y="1477" width="0.1299%" height="15" fill="rgb(212,59,25)" fg:x="52704" fg:w="287"/><text x="24.1023%" y="1487.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (290 samples, 0.13%)</title><rect x="23.8523%" y="1573" width="0.1312%" height="15" fill="rgb(221,87,20)" fg:x="52704" fg:w="290"/><text x="24.1023%" y="1583.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (290 samples, 0.13%)</title><rect x="23.8523%" y="1557" width="0.1312%" height="15" fill="rgb(213,74,28)" fg:x="52704" fg:w="290"/><text x="24.1023%" y="1567.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (49 samples, 0.02%)</title><rect x="23.9871%" y="1333" width="0.0222%" height="15" fill="rgb(224,132,34)" fg:x="53002" fg:w="49"/><text x="24.2371%" y="1343.50"></text></g><g><title>alloc::alloc::Global::grow_impl (49 samples, 0.02%)</title><rect x="23.9871%" y="1317" width="0.0222%" height="15" fill="rgb(222,101,24)" fg:x="53002" fg:w="49"/><text x="24.2371%" y="1327.50"></text></g><g><title>alloc::alloc::realloc (49 samples, 0.02%)</title><rect x="23.9871%" y="1301" width="0.0222%" height="15" fill="rgb(254,142,4)" fg:x="53002" fg:w="49"/><text x="24.2371%" y="1311.50"></text></g><g><title>realloc (45 samples, 0.02%)</title><rect x="23.9890%" y="1285" width="0.0204%" height="15" fill="rgb(230,229,49)" fg:x="53006" fg:w="45"/><text x="24.2390%" y="1295.50"></text></g><g><title>alloc::raw_vec::finish_grow (50 samples, 0.02%)</title><rect x="23.9871%" y="1349" width="0.0226%" height="15" fill="rgb(238,70,47)" fg:x="53002" fg:w="50"/><text x="24.2371%" y="1359.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (55 samples, 0.02%)</title><rect x="23.9867%" y="1509" width="0.0249%" height="15" fill="rgb(231,160,17)" fg:x="53001" fg:w="55"/><text x="24.2367%" y="1519.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (55 samples, 0.02%)</title><rect x="23.9867%" y="1493" width="0.0249%" height="15" fill="rgb(218,68,53)" fg:x="53001" fg:w="55"/><text x="24.2367%" y="1503.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (55 samples, 0.02%)</title><rect x="23.9867%" y="1477" width="0.0249%" height="15" fill="rgb(236,111,10)" fg:x="53001" fg:w="55"/><text x="24.2367%" y="1487.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (55 samples, 0.02%)</title><rect x="23.9867%" y="1461" width="0.0249%" height="15" fill="rgb(224,34,41)" fg:x="53001" fg:w="55"/><text x="24.2367%" y="1471.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (55 samples, 0.02%)</title><rect x="23.9867%" y="1445" width="0.0249%" height="15" fill="rgb(241,118,19)" fg:x="53001" fg:w="55"/><text x="24.2367%" y="1455.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (55 samples, 0.02%)</title><rect x="23.9867%" y="1429" width="0.0249%" height="15" fill="rgb(238,129,25)" fg:x="53001" fg:w="55"/><text x="24.2367%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (55 samples, 0.02%)</title><rect x="23.9867%" y="1413" width="0.0249%" height="15" fill="rgb(238,22,31)" fg:x="53001" fg:w="55"/><text x="24.2367%" y="1423.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (55 samples, 0.02%)</title><rect x="23.9867%" y="1397" width="0.0249%" height="15" fill="rgb(222,174,48)" fg:x="53001" fg:w="55"/><text x="24.2367%" y="1407.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (55 samples, 0.02%)</title><rect x="23.9867%" y="1381" width="0.0249%" height="15" fill="rgb(206,152,40)" fg:x="53001" fg:w="55"/><text x="24.2367%" y="1391.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (55 samples, 0.02%)</title><rect x="23.9867%" y="1365" width="0.0249%" height="15" fill="rgb(218,99,54)" fg:x="53001" fg:w="55"/><text x="24.2367%" y="1375.50"></text></g><g><title>alloc::raw_vec::finish_grow (25 samples, 0.01%)</title><rect x="24.0120%" y="1317" width="0.0113%" height="15" fill="rgb(220,174,26)" fg:x="53057" fg:w="25"/><text x="24.2620%" y="1327.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (24 samples, 0.01%)</title><rect x="24.0125%" y="1301" width="0.0109%" height="15" fill="rgb(245,116,9)" fg:x="53058" fg:w="24"/><text x="24.2625%" y="1311.50"></text></g><g><title>alloc::alloc::Global::grow_impl (24 samples, 0.01%)</title><rect x="24.0125%" y="1285" width="0.0109%" height="15" fill="rgb(209,72,35)" fg:x="53058" fg:w="24"/><text x="24.2625%" y="1295.50"></text></g><g><title>alloc::alloc::realloc (24 samples, 0.01%)</title><rect x="24.0125%" y="1269" width="0.0109%" height="15" fill="rgb(226,126,21)" fg:x="53058" fg:w="24"/><text x="24.2625%" y="1279.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (83 samples, 0.04%)</title><rect x="23.9862%" y="1557" width="0.0376%" height="15" fill="rgb(227,192,1)" fg:x="53000" fg:w="83"/><text x="24.2362%" y="1567.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[u8]&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (83 samples, 0.04%)</title><rect x="23.9862%" y="1541" width="0.0376%" height="15" fill="rgb(237,180,29)" fg:x="53000" fg:w="83"/><text x="24.2362%" y="1551.50"></text></g><g><title>bitcoin::consensus::encode::consensus_encode_with_size (83 samples, 0.04%)</title><rect x="23.9862%" y="1525" width="0.0376%" height="15" fill="rgb(230,197,35)" fg:x="53000" fg:w="83"/><text x="24.2362%" y="1535.50"></text></g><g><title>&lt;bitcoin::consensus::encode::VarInt as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (27 samples, 0.01%)</title><rect x="24.0116%" y="1509" width="0.0122%" height="15" fill="rgb(246,193,31)" fg:x="53056" fg:w="27"/><text x="24.2616%" y="1519.50"></text></g><g><title>&lt;u8 as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (27 samples, 0.01%)</title><rect x="24.0116%" y="1493" width="0.0122%" height="15" fill="rgb(241,36,4)" fg:x="53056" fg:w="27"/><text x="24.2616%" y="1503.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_u8 (27 samples, 0.01%)</title><rect x="24.0116%" y="1477" width="0.0122%" height="15" fill="rgb(241,130,17)" fg:x="53056" fg:w="27"/><text x="24.2616%" y="1487.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (27 samples, 0.01%)</title><rect x="24.0116%" y="1461" width="0.0122%" height="15" fill="rgb(206,137,32)" fg:x="53056" fg:w="27"/><text x="24.2616%" y="1471.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (27 samples, 0.01%)</title><rect x="24.0116%" y="1445" width="0.0122%" height="15" fill="rgb(237,228,51)" fg:x="53056" fg:w="27"/><text x="24.2616%" y="1455.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (27 samples, 0.01%)</title><rect x="24.0116%" y="1429" width="0.0122%" height="15" fill="rgb(243,6,42)" fg:x="53056" fg:w="27"/><text x="24.2616%" y="1439.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (27 samples, 0.01%)</title><rect x="24.0116%" y="1413" width="0.0122%" height="15" fill="rgb(251,74,28)" fg:x="53056" fg:w="27"/><text x="24.2616%" y="1423.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (27 samples, 0.01%)</title><rect x="24.0116%" y="1397" width="0.0122%" height="15" fill="rgb(218,20,49)" fg:x="53056" fg:w="27"/><text x="24.2616%" y="1407.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (27 samples, 0.01%)</title><rect x="24.0116%" y="1381" width="0.0122%" height="15" fill="rgb(238,28,14)" fg:x="53056" fg:w="27"/><text x="24.2616%" y="1391.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27 samples, 0.01%)</title><rect x="24.0116%" y="1365" width="0.0122%" height="15" fill="rgb(229,40,46)" fg:x="53056" fg:w="27"/><text x="24.2616%" y="1375.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (26 samples, 0.01%)</title><rect x="24.0120%" y="1349" width="0.0118%" height="15" fill="rgb(244,195,20)" fg:x="53057" fg:w="26"/><text x="24.2620%" y="1359.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (26 samples, 0.01%)</title><rect x="24.0120%" y="1333" width="0.0118%" height="15" fill="rgb(253,56,35)" fg:x="53057" fg:w="26"/><text x="24.2620%" y="1343.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxOut as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (100 samples, 0.05%)</title><rect x="23.9862%" y="1573" width="0.0453%" height="15" fill="rgb(210,149,44)" fg:x="53000" fg:w="100"/><text x="24.2362%" y="1583.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (23 samples, 0.01%)</title><rect x="24.0369%" y="1525" width="0.0104%" height="15" fill="rgb(240,135,12)" fg:x="53112" fg:w="23"/><text x="24.2869%" y="1535.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[u8]&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (23 samples, 0.01%)</title><rect x="24.0369%" y="1509" width="0.0104%" height="15" fill="rgb(251,24,50)" fg:x="53112" fg:w="23"/><text x="24.2869%" y="1519.50"></text></g><g><title>&lt;[u8: 32] as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (39 samples, 0.02%)</title><rect x="24.0487%" y="1477" width="0.0177%" height="15" fill="rgb(243,200,47)" fg:x="53138" fg:w="39"/><text x="24.2987%" y="1487.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (39 samples, 0.02%)</title><rect x="24.0487%" y="1461" width="0.0177%" height="15" fill="rgb(224,166,26)" fg:x="53138" fg:w="39"/><text x="24.2987%" y="1471.50"></text></g><g><title>std::io::Write::write_all (38 samples, 0.02%)</title><rect x="24.0491%" y="1445" width="0.0172%" height="15" fill="rgb(233,0,47)" fg:x="53139" fg:w="38"/><text x="24.2991%" y="1455.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (34 samples, 0.02%)</title><rect x="24.0510%" y="1429" width="0.0154%" height="15" fill="rgb(253,80,5)" fg:x="53143" fg:w="34"/><text x="24.3010%" y="1439.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (32 samples, 0.01%)</title><rect x="24.0519%" y="1413" width="0.0145%" height="15" fill="rgb(214,133,25)" fg:x="53145" fg:w="32"/><text x="24.3019%" y="1423.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Txid as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (45 samples, 0.02%)</title><rect x="24.0473%" y="1509" width="0.0204%" height="15" fill="rgb(209,27,14)" fg:x="53135" fg:w="45"/><text x="24.2973%" y="1519.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (45 samples, 0.02%)</title><rect x="24.0473%" y="1493" width="0.0204%" height="15" fill="rgb(219,102,51)" fg:x="53135" fg:w="45"/><text x="24.2973%" y="1503.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::OutPoint as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (66 samples, 0.03%)</title><rect x="24.0473%" y="1525" width="0.0299%" height="15" fill="rgb(237,18,16)" fg:x="53135" fg:w="66"/><text x="24.2973%" y="1535.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxIn as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (111 samples, 0.05%)</title><rect x="24.0369%" y="1541" width="0.0502%" height="15" fill="rgb(241,85,17)" fg:x="53112" fg:w="111"/><text x="24.2869%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxIn&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (128 samples, 0.06%)</title><rect x="24.0360%" y="1557" width="0.0579%" height="15" fill="rgb(236,90,42)" fg:x="53110" fg:w="128"/><text x="24.2860%" y="1567.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (52 samples, 0.02%)</title><rect x="24.1401%" y="1381" width="0.0235%" height="15" fill="rgb(249,57,21)" fg:x="53340" fg:w="52"/><text x="24.3901%" y="1391.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (239 samples, 0.11%)</title><rect x="24.1030%" y="1397" width="0.1082%" height="15" fill="rgb(243,12,36)" fg:x="53258" fg:w="239"/><text x="24.3530%" y="1407.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (105 samples, 0.05%)</title><rect x="24.1636%" y="1381" width="0.0475%" height="15" fill="rgb(253,128,47)" fg:x="53392" fg:w="105"/><text x="24.4136%" y="1391.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (273 samples, 0.12%)</title><rect x="24.0962%" y="1429" width="0.1236%" height="15" fill="rgb(207,33,20)" fg:x="53243" fg:w="273"/><text x="24.3462%" y="1439.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (271 samples, 0.12%)</title><rect x="24.0971%" y="1413" width="0.1226%" height="15" fill="rgb(233,215,35)" fg:x="53245" fg:w="271"/><text x="24.3471%" y="1423.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (276 samples, 0.12%)</title><rect x="24.0953%" y="1477" width="0.1249%" height="15" fill="rgb(249,188,52)" fg:x="53241" fg:w="276"/><text x="24.3453%" y="1487.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (276 samples, 0.12%)</title><rect x="24.0953%" y="1461" width="0.1249%" height="15" fill="rgb(225,12,32)" fg:x="53241" fg:w="276"/><text x="24.3453%" y="1471.50"></text></g><g><title>std::io::Write::write_all (276 samples, 0.12%)</title><rect x="24.0953%" y="1445" width="0.1249%" height="15" fill="rgb(247,98,14)" fg:x="53241" fg:w="276"/><text x="24.3453%" y="1455.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (298 samples, 0.13%)</title><rect x="24.0944%" y="1525" width="0.1349%" height="15" fill="rgb(247,219,48)" fg:x="53239" fg:w="298"/><text x="24.3444%" y="1535.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[u8]&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (298 samples, 0.13%)</title><rect x="24.0944%" y="1509" width="0.1349%" height="15" fill="rgb(253,60,48)" fg:x="53239" fg:w="298"/><text x="24.3444%" y="1519.50"></text></g><g><title>bitcoin::consensus::encode::consensus_encode_with_size (297 samples, 0.13%)</title><rect x="24.0949%" y="1493" width="0.1344%" height="15" fill="rgb(245,15,52)" fg:x="53240" fg:w="297"/><text x="24.3449%" y="1503.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxOut as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (324 samples, 0.15%)</title><rect x="24.0940%" y="1541" width="0.1466%" height="15" fill="rgb(220,133,28)" fg:x="53238" fg:w="324"/><text x="24.3440%" y="1551.50"></text></g><g><title>&lt;u64 as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (24 samples, 0.01%)</title><rect x="24.2297%" y="1525" width="0.0109%" height="15" fill="rgb(217,180,4)" fg:x="53538" fg:w="24"/><text x="24.4797%" y="1535.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_u64 (24 samples, 0.01%)</title><rect x="24.2297%" y="1509" width="0.0109%" height="15" fill="rgb(251,24,1)" fg:x="53538" fg:w="24"/><text x="24.4797%" y="1519.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxOut&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (341 samples, 0.15%)</title><rect x="24.0940%" y="1557" width="0.1543%" height="15" fill="rgb(212,185,49)" fg:x="53238" fg:w="341"/><text x="24.3440%" y="1567.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (46 samples, 0.02%)</title><rect x="24.2999%" y="1477" width="0.0208%" height="15" fill="rgb(215,175,22)" fg:x="53693" fg:w="46"/><text x="24.5499%" y="1487.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (198 samples, 0.09%)</title><rect x="24.2582%" y="1493" width="0.0896%" height="15" fill="rgb(250,205,14)" fg:x="53601" fg:w="198"/><text x="24.5082%" y="1503.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (60 samples, 0.03%)</title><rect x="24.3207%" y="1477" width="0.0272%" height="15" fill="rgb(225,211,22)" fg:x="53739" fg:w="60"/><text x="24.5707%" y="1487.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (213 samples, 0.10%)</title><rect x="24.2564%" y="1509" width="0.0964%" height="15" fill="rgb(251,179,42)" fg:x="53597" fg:w="213"/><text x="24.5064%" y="1519.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (218 samples, 0.10%)</title><rect x="24.2551%" y="1525" width="0.0987%" height="15" fill="rgb(208,216,51)" fg:x="53594" fg:w="218"/><text x="24.5051%" y="1535.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (39 samples, 0.02%)</title><rect x="24.3954%" y="1461" width="0.0177%" height="15" fill="rgb(235,36,11)" fg:x="53904" fg:w="39"/><text x="24.6454%" y="1471.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (220 samples, 0.10%)</title><rect x="24.3614%" y="1477" width="0.0996%" height="15" fill="rgb(213,189,28)" fg:x="53829" fg:w="220"/><text x="24.6114%" y="1487.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (106 samples, 0.05%)</title><rect x="24.4130%" y="1461" width="0.0480%" height="15" fill="rgb(227,203,42)" fg:x="53943" fg:w="106"/><text x="24.6630%" y="1471.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (235 samples, 0.11%)</title><rect x="24.3592%" y="1493" width="0.1064%" height="15" fill="rgb(244,72,36)" fg:x="53824" fg:w="235"/><text x="24.6092%" y="1503.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (239 samples, 0.11%)</title><rect x="24.3592%" y="1509" width="0.1082%" height="15" fill="rgb(213,53,17)" fg:x="53824" fg:w="239"/><text x="24.6092%" y="1519.50"></text></g><g><title>bitcoin_hashes::Hash::hash (253 samples, 0.11%)</title><rect x="24.3537%" y="1525" width="0.1145%" height="15" fill="rgb(207,167,3)" fg:x="53812" fg:w="253"/><text x="24.6037%" y="1535.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Txid as bitcoin_hashes::Hash&gt;::from_engine (478 samples, 0.22%)</title><rect x="24.2533%" y="1557" width="0.2163%" height="15" fill="rgb(216,98,30)" fg:x="53590" fg:w="478"/><text x="24.5033%" y="1567.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (476 samples, 0.22%)</title><rect x="24.2542%" y="1541" width="0.2154%" height="15" fill="rgb(236,123,15)" fg:x="53592" fg:w="476"/><text x="24.5042%" y="1551.50"></text></g><g><title>bitcoin::blockdata::transaction::Transaction::txid (975 samples, 0.44%)</title><rect x="24.0347%" y="1573" width="0.4413%" height="15" fill="rgb(248,81,50)" fg:x="53107" fg:w="975"/><text x="24.2847%" y="1583.50"></text></g><g><title>utreexo_wallet::blockchain::chain_state::ChainState&lt;PersistedState&gt;::update_acc (46,395 samples, 21.00%)</title><rect x="3.4825%" y="1605" width="20.9970%" height="15" fill="rgb(214,120,4)" fg:x="7695" fg:w="46395"/><text x="3.7325%" y="1615.50">utreexo_wallet::blockchain::chain..</text></g><g><title>utreexo_wallet::blockchain::chain_state::ChainState&lt;PersistedState&gt;::get_leaf_hashes (1,444 samples, 0.65%)</title><rect x="23.8260%" y="1589" width="0.6535%" height="15" fill="rgb(208,179,34)" fg:x="52646" fg:w="1444"/><text x="24.0760%" y="1599.50"></text></g><g><title>CScript::CScript (48 samples, 0.02%)</title><rect x="24.4895%" y="1509" width="0.0217%" height="15" fill="rgb(227,140,7)" fg:x="54112" fg:w="48"/><text x="24.7395%" y="1519.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::prevector&lt;unsigned char const*&gt; (48 samples, 0.02%)</title><rect x="24.4895%" y="1493" width="0.0217%" height="15" fill="rgb(214,22,6)" fg:x="54112" fg:w="48"/><text x="24.7395%" y="1503.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::fill&lt;unsigned char const*&gt; (44 samples, 0.02%)</title><rect x="24.4913%" y="1477" width="0.0199%" height="15" fill="rgb(207,137,27)" fg:x="54116" fg:w="44"/><text x="24.7413%" y="1487.50"></text></g><g><title>[libc.so.6] (2,103 samples, 0.95%)</title><rect x="24.7855%" y="1205" width="0.9518%" height="15" fill="rgb(210,8,46)" fg:x="54766" fg:w="2103"/><text x="25.0355%" y="1215.50"></text></g><g><title>cfree (2,595 samples, 1.17%)</title><rect x="24.5633%" y="1221" width="1.1744%" height="15" fill="rgb(240,16,54)" fg:x="54275" fg:w="2595"/><text x="24.8133%" y="1231.50"></text></g><g><title>std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2,688 samples, 1.22%)</title><rect x="24.5216%" y="1365" width="1.2165%" height="15" fill="rgb(211,209,29)" fg:x="54183" fg:w="2688"/><text x="24.7716%" y="1375.50"></text></g><g><title>std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (2,688 samples, 1.22%)</title><rect x="24.5216%" y="1349" width="1.2165%" height="15" fill="rgb(226,228,24)" fg:x="54183" fg:w="2688"/><text x="24.7716%" y="1359.50"></text></g><g><title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;*&gt; (2,688 samples, 1.22%)</title><rect x="24.5216%" y="1333" width="1.2165%" height="15" fill="rgb(222,84,9)" fg:x="54183" fg:w="2688"/><text x="24.7716%" y="1343.50"></text></g><g><title>std::_Destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (2,636 samples, 1.19%)</title><rect x="24.5452%" y="1317" width="1.1930%" height="15" fill="rgb(234,203,30)" fg:x="54235" fg:w="2636"/><text x="24.7952%" y="1327.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (2,636 samples, 1.19%)</title><rect x="24.5452%" y="1301" width="1.1930%" height="15" fill="rgb(238,109,14)" fg:x="54235" fg:w="2636"/><text x="24.7952%" y="1311.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (2,636 samples, 1.19%)</title><rect x="24.5452%" y="1285" width="1.1930%" height="15" fill="rgb(233,206,34)" fg:x="54235" fg:w="2636"/><text x="24.7952%" y="1295.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (2,636 samples, 1.19%)</title><rect x="24.5452%" y="1269" width="1.1930%" height="15" fill="rgb(220,167,47)" fg:x="54235" fg:w="2636"/><text x="24.7952%" y="1279.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (2,596 samples, 1.17%)</title><rect x="24.5633%" y="1253" width="1.1749%" height="15" fill="rgb(238,105,10)" fg:x="54275" fg:w="2596"/><text x="24.8133%" y="1263.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (2,596 samples, 1.17%)</title><rect x="24.5633%" y="1237" width="1.1749%" height="15" fill="rgb(213,227,17)" fg:x="54275" fg:w="2596"/><text x="24.8133%" y="1247.50"></text></g><g><title>cfree (1,073 samples, 0.49%)</title><rect x="25.7381%" y="1301" width="0.4856%" height="15" fill="rgb(217,132,38)" fg:x="56871" fg:w="1073"/><text x="25.9881%" y="1311.50"></text></g><g><title>[libc.so.6] (943 samples, 0.43%)</title><rect x="25.7970%" y="1285" width="0.4268%" height="15" fill="rgb(242,146,4)" fg:x="57001" fg:w="943"/><text x="26.0470%" y="1295.50"></text></g><g><title>std::_Destroy&lt;CTxIn*, CTxIn&gt; (3,812 samples, 1.73%)</title><rect x="24.5112%" y="1477" width="1.7252%" height="15" fill="rgb(212,61,9)" fg:x="54160" fg:w="3812"/><text x="24.7612%" y="1487.50"></text></g><g><title>std::_Destroy&lt;CTxIn*&gt; (3,812 samples, 1.73%)</title><rect x="24.5112%" y="1461" width="1.7252%" height="15" fill="rgb(247,126,22)" fg:x="54160" fg:w="3812"/><text x="24.7612%" y="1471.50"></text></g><g><title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;CTxIn*&gt; (3,812 samples, 1.73%)</title><rect x="24.5112%" y="1445" width="1.7252%" height="15" fill="rgb(220,196,2)" fg:x="54160" fg:w="3812"/><text x="24.7612%" y="1455.50"></text></g><g><title>std::_Destroy&lt;CTxIn&gt; (3,794 samples, 1.72%)</title><rect x="24.5194%" y="1429" width="1.7171%" height="15" fill="rgb(208,46,4)" fg:x="54178" fg:w="3794"/><text x="24.7694%" y="1439.50"></text></g><g><title>CTxIn::~CTxIn (3,794 samples, 1.72%)</title><rect x="24.5194%" y="1413" width="1.7171%" height="15" fill="rgb(252,104,46)" fg:x="54178" fg:w="3794"/><text x="24.7694%" y="1423.50"></text></g><g><title>CScriptWitness::~CScriptWitness (3,791 samples, 1.72%)</title><rect x="24.5207%" y="1397" width="1.7157%" height="15" fill="rgb(237,152,48)" fg:x="54181" fg:w="3791"/><text x="24.7707%" y="1407.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (3,791 samples, 1.72%)</title><rect x="24.5207%" y="1381" width="1.7157%" height="15" fill="rgb(221,59,37)" fg:x="54181" fg:w="3791"/><text x="24.7707%" y="1391.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::~_Vector_base (1,101 samples, 0.50%)</title><rect x="25.7381%" y="1365" width="0.4983%" height="15" fill="rgb(209,202,51)" fg:x="56871" fg:w="1101"/><text x="25.9881%" y="1375.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_deallocate (1,101 samples, 0.50%)</title><rect x="25.7381%" y="1349" width="0.4983%" height="15" fill="rgb(228,81,30)" fg:x="56871" fg:w="1101"/><text x="25.9881%" y="1359.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::deallocate (1,101 samples, 0.50%)</title><rect x="25.7381%" y="1333" width="0.4983%" height="15" fill="rgb(227,42,39)" fg:x="56871" fg:w="1101"/><text x="25.9881%" y="1343.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::deallocate (1,101 samples, 0.50%)</title><rect x="25.7381%" y="1317" width="0.4983%" height="15" fill="rgb(221,26,2)" fg:x="56871" fg:w="1101"/><text x="25.9881%" y="1327.50"></text></g><g><title>operator delete (28 samples, 0.01%)</title><rect x="26.2238%" y="1301" width="0.0127%" height="15" fill="rgb(254,61,31)" fg:x="57944" fg:w="28"/><text x="26.4738%" y="1311.50"></text></g><g><title>[libc.so.6] (584 samples, 0.26%)</title><rect x="26.8863%" y="1365" width="0.2643%" height="15" fill="rgb(222,173,38)" fg:x="59408" fg:w="584"/><text x="27.1363%" y="1375.50"></text></g><g><title>cfree (2,021 samples, 0.91%)</title><rect x="26.2364%" y="1413" width="0.9146%" height="15" fill="rgb(218,50,12)" fg:x="57972" fg:w="2021"/><text x="26.4864%" y="1423.50"></text></g><g><title>[libc.so.6] (2,018 samples, 0.91%)</title><rect x="26.2378%" y="1397" width="0.9133%" height="15" fill="rgb(223,88,40)" fg:x="57975" fg:w="2018"/><text x="26.4878%" y="1407.50"></text></g><g><title>[libc.so.6] (2,014 samples, 0.91%)</title><rect x="26.2396%" y="1381" width="0.9115%" height="15" fill="rgb(237,54,19)" fg:x="57979" fg:w="2014"/><text x="26.4896%" y="1391.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~vector (5,834 samples, 2.64%)</title><rect x="24.5112%" y="1493" width="2.6403%" height="15" fill="rgb(251,129,25)" fg:x="54160" fg:w="5834"/><text x="24.7612%" y="1503.50">st..</text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::~_Vector_base (2,022 samples, 0.92%)</title><rect x="26.2364%" y="1477" width="0.9151%" height="15" fill="rgb(238,97,19)" fg:x="57972" fg:w="2022"/><text x="26.4864%" y="1487.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_deallocate (2,022 samples, 0.92%)</title><rect x="26.2364%" y="1461" width="0.9151%" height="15" fill="rgb(240,169,18)" fg:x="57972" fg:w="2022"/><text x="26.4864%" y="1471.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::deallocate (2,022 samples, 0.92%)</title><rect x="26.2364%" y="1445" width="0.9151%" height="15" fill="rgb(230,187,49)" fg:x="57972" fg:w="2022"/><text x="26.4864%" y="1455.50"></text></g><g><title>std::__new_allocator&lt;CTxIn&gt;::deallocate (2,022 samples, 0.92%)</title><rect x="26.2364%" y="1429" width="0.9151%" height="15" fill="rgb(209,44,26)" fg:x="57972" fg:w="2022"/><text x="26.4864%" y="1439.50"></text></g><g><title>CTransaction::~CTransaction (5,841 samples, 2.64%)</title><rect x="24.5112%" y="1509" width="2.6435%" height="15" fill="rgb(244,0,6)" fg:x="54160" fg:w="5841"/><text x="24.7612%" y="1519.50">CT..</text></g><g><title>ReadCompactSize&lt;(anonymous namespace)::TxInputStream&gt; (31 samples, 0.01%)</title><rect x="27.2674%" y="1317" width="0.0140%" height="15" fill="rgb(248,18,21)" fg:x="60250" fg:w="31"/><text x="27.5174%" y="1327.50"></text></g><g><title>ReadCompactSize&lt;(anonymous namespace)::TxInputStream&gt; (173 samples, 0.08%)</title><rect x="27.2085%" y="1349" width="0.0783%" height="15" fill="rgb(245,180,19)" fg:x="60120" fg:w="173"/><text x="27.4585%" y="1359.50"></text></g><g><title>ser_readdata8&lt;(anonymous namespace)::TxInputStream&gt; (43 samples, 0.02%)</title><rect x="27.2674%" y="1333" width="0.0195%" height="15" fill="rgb(252,118,36)" fg:x="60250" fg:w="43"/><text x="27.5174%" y="1343.50"></text></g><g><title>[libc.so.6] (578 samples, 0.26%)</title><rect x="27.4303%" y="1285" width="0.2616%" height="15" fill="rgb(210,224,19)" fg:x="60610" fg:w="578"/><text x="27.6803%" y="1295.50"></text></g><g><title>read (742 samples, 0.34%)</title><rect x="27.3638%" y="1301" width="0.3358%" height="15" fill="rgb(218,30,24)" fg:x="60463" fg:w="742"/><text x="27.6138%" y="1311.50"></text></g><g><title>std::min&lt;unsigned int&gt; (33 samples, 0.01%)</title><rect x="27.6996%" y="1301" width="0.0149%" height="15" fill="rgb(219,75,50)" fg:x="61205" fg:w="33"/><text x="27.9496%" y="1311.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::operator[] (61 samples, 0.03%)</title><rect x="27.7145%" y="1301" width="0.0276%" height="15" fill="rgb(234,72,50)" fg:x="61238" fg:w="61"/><text x="27.9645%" y="1311.50"></text></g><g><title>[libc.so.6] (267 samples, 0.12%)</title><rect x="29.7954%" y="1173" width="0.1208%" height="15" fill="rgb(219,100,48)" fg:x="65836" fg:w="267"/><text x="30.0454%" y="1183.50"></text></g><g><title>[libc.so.6] (1,441 samples, 0.65%)</title><rect x="29.2646%" y="1189" width="0.6522%" height="15" fill="rgb(253,5,41)" fg:x="64663" fg:w="1441"/><text x="29.5146%" y="1199.50"></text></g><g><title>operator new (4,494 samples, 2.03%)</title><rect x="27.8860%" y="1221" width="2.0339%" height="15" fill="rgb(247,181,11)" fg:x="61617" fg:w="4494"/><text x="28.1360%" y="1231.50">o..</text></g><g><title>malloc (4,348 samples, 1.97%)</title><rect x="27.9521%" y="1205" width="1.9678%" height="15" fill="rgb(222,223,25)" fg:x="61763" fg:w="4348"/><text x="28.2021%" y="1215.50">m..</text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (4,523 samples, 2.05%)</title><rect x="27.8738%" y="1269" width="2.0470%" height="15" fill="rgb(214,198,28)" fg:x="61590" fg:w="4523"/><text x="28.1238%" y="1279.50">s..</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (4,523 samples, 2.05%)</title><rect x="27.8738%" y="1253" width="2.0470%" height="15" fill="rgb(230,46,43)" fg:x="61590" fg:w="4523"/><text x="28.1238%" y="1263.50">s..</text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (4,523 samples, 2.05%)</title><rect x="27.8738%" y="1237" width="2.0470%" height="15" fill="rgb(233,65,53)" fg:x="61590" fg:w="4523"/><text x="28.1238%" y="1247.50">s..</text></g><g><title>std::__uninitialized_default_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (390 samples, 0.18%)</title><rect x="29.9226%" y="1269" width="0.1765%" height="15" fill="rgb(221,121,27)" fg:x="66117" fg:w="390"/><text x="30.1726%" y="1279.50"></text></g><g><title>std::__uninitialized_default_n&lt;unsigned char*, unsigned long&gt; (390 samples, 0.18%)</title><rect x="29.9226%" y="1253" width="0.1765%" height="15" fill="rgb(247,70,47)" fg:x="66117" fg:w="390"/><text x="30.1726%" y="1263.50"></text></g><g><title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (390 samples, 0.18%)</title><rect x="29.9226%" y="1237" width="0.1765%" height="15" fill="rgb(228,85,35)" fg:x="66117" fg:w="390"/><text x="30.1726%" y="1247.50"></text></g><g><title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned char*, unsigned long&gt; (390 samples, 0.18%)</title><rect x="29.9226%" y="1221" width="0.1765%" height="15" fill="rgb(209,50,18)" fg:x="66117" fg:w="390"/><text x="30.1726%" y="1231.50"></text></g><g><title>std::fill_n&lt;unsigned char*, unsigned long, unsigned char&gt; (389 samples, 0.18%)</title><rect x="29.9231%" y="1205" width="0.1760%" height="15" fill="rgb(250,19,35)" fg:x="66118" fg:w="389"/><text x="30.1731%" y="1215.50"></text></g><g><title>std::__fill_n_a&lt;unsigned char*, unsigned long, unsigned char&gt; (389 samples, 0.18%)</title><rect x="29.9231%" y="1189" width="0.1760%" height="15" fill="rgb(253,107,29)" fg:x="66118" fg:w="389"/><text x="30.1731%" y="1199.50"></text></g><g><title>std::__fill_a&lt;unsigned char*, unsigned char&gt; (344 samples, 0.16%)</title><rect x="29.9434%" y="1173" width="0.1557%" height="15" fill="rgb(252,179,29)" fg:x="66163" fg:w="344"/><text x="30.1934%" y="1183.50"></text></g><g><title>std::__fill_a1&lt;unsigned char&gt; (344 samples, 0.16%)</title><rect x="29.9434%" y="1157" width="0.1557%" height="15" fill="rgb(238,194,6)" fg:x="66163" fg:w="344"/><text x="30.1934%" y="1167.50"></text></g><g><title>[libc.so.6] (298 samples, 0.13%)</title><rect x="29.9642%" y="1141" width="0.1349%" height="15" fill="rgb(238,164,29)" fg:x="66209" fg:w="298"/><text x="30.2142%" y="1151.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_check_len (73 samples, 0.03%)</title><rect x="30.0991%" y="1269" width="0.0330%" height="15" fill="rgb(224,25,9)" fg:x="66507" fg:w="73"/><text x="30.3491%" y="1279.50"></text></g><g><title>std::max&lt;unsigned long&gt; (51 samples, 0.02%)</title><rect x="30.1091%" y="1253" width="0.0231%" height="15" fill="rgb(244,153,23)" fg:x="66529" fg:w="51"/><text x="30.3591%" y="1263.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_relocate (28 samples, 0.01%)</title><rect x="30.1322%" y="1269" width="0.0127%" height="15" fill="rgb(212,203,14)" fg:x="66580" fg:w="28"/><text x="30.3822%" y="1279.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_S_do_relocate (28 samples, 0.01%)</title><rect x="30.1322%" y="1253" width="0.0127%" height="15" fill="rgb(220,164,20)" fg:x="66580" fg:w="28"/><text x="30.3822%" y="1263.50"></text></g><g><title>std::__relocate_a&lt;unsigned char*, unsigned char*, std::allocator&lt;unsigned char&gt; &gt; (28 samples, 0.01%)</title><rect x="30.1322%" y="1237" width="0.0127%" height="15" fill="rgb(222,203,48)" fg:x="66580" fg:w="28"/><text x="30.3822%" y="1247.50"></text></g><g><title>std::__relocate_a_1&lt;unsigned char, unsigned char&gt; (28 samples, 0.01%)</title><rect x="30.1322%" y="1221" width="0.0127%" height="15" fill="rgb(215,159,22)" fg:x="66580" fg:w="28"/><text x="30.3822%" y="1231.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (5,315 samples, 2.41%)</title><rect x="27.7571%" y="1285" width="2.4054%" height="15" fill="rgb(216,183,47)" fg:x="61332" fg:w="5315"/><text x="28.0071%" y="1295.50">st..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (39 samples, 0.02%)</title><rect x="30.1448%" y="1269" width="0.0177%" height="15" fill="rgb(229,195,25)" fg:x="66608" fg:w="39"/><text x="30.3948%" y="1279.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::resize (5,432 samples, 2.46%)</title><rect x="27.7421%" y="1301" width="2.4584%" height="15" fill="rgb(224,132,51)" fg:x="61299" fg:w="5432"/><text x="27.9921%" y="1311.50">st..</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (84 samples, 0.04%)</title><rect x="30.1625%" y="1285" width="0.0380%" height="15" fill="rgb(240,63,7)" fg:x="66647" fg:w="84"/><text x="30.4125%" y="1295.50"></text></g><g><title>Unserialize_impl&lt;(anonymous namespace)::TxInputStream, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (6,445 samples, 2.92%)</title><rect x="27.2868%" y="1317" width="2.9168%" height="15" fill="rgb(249,182,41)" fg:x="60293" fg:w="6445"/><text x="27.5368%" y="1327.50">Un..</text></g><g><title>Unser&lt;(anonymous namespace)::TxInputStream, std::vector&lt;unsigned char&gt; &gt; (6,694 samples, 3.03%)</title><rect x="27.2868%" y="1349" width="3.0295%" height="15" fill="rgb(243,47,26)" fg:x="60293" fg:w="6694"/><text x="27.5368%" y="1359.50">Uns..</text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (6,694 samples, 3.03%)</title><rect x="27.2868%" y="1333" width="3.0295%" height="15" fill="rgb(233,48,2)" fg:x="60293" fg:w="6694"/><text x="27.5368%" y="1343.50">Uns..</text></g><g><title>verify_script (249 samples, 0.11%)</title><rect x="30.2037%" y="1317" width="0.1127%" height="15" fill="rgb(244,165,34)" fg:x="66738" fg:w="249"/><text x="30.4537%" y="1327.50"></text></g><g><title>ReadCompactSize&lt;(anonymous namespace)::TxInputStream&gt; (249 samples, 0.11%)</title><rect x="30.2037%" y="1301" width="0.1127%" height="15" fill="rgb(207,89,7)" fg:x="66738" fg:w="249"/><text x="30.4537%" y="1311.50"></text></g><g><title>ser_readdata8&lt;(anonymous namespace)::TxInputStream&gt; (104 samples, 0.05%)</title><rect x="30.2693%" y="1285" width="0.0471%" height="15" fill="rgb(244,117,36)" fg:x="66883" fg:w="104"/><text x="30.5193%" y="1295.50"></text></g><g><title>read (83 samples, 0.04%)</title><rect x="30.2788%" y="1269" width="0.0376%" height="15" fill="rgb(226,144,34)" fg:x="66904" fg:w="83"/><text x="30.5288%" y="1279.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::clear (86 samples, 0.04%)</title><rect x="30.3163%" y="1349" width="0.0389%" height="15" fill="rgb(213,23,19)" fg:x="66987" fg:w="86"/><text x="30.5663%" y="1359.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_erase_at_end (78 samples, 0.04%)</title><rect x="30.3200%" y="1333" width="0.0353%" height="15" fill="rgb(217,75,12)" fg:x="66995" fg:w="78"/><text x="30.5700%" y="1343.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (198 samples, 0.09%)</title><rect x="30.3553%" y="1349" width="0.0896%" height="15" fill="rgb(224,159,17)" fg:x="67073" fg:w="198"/><text x="30.6053%" y="1359.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&gt; (89 samples, 0.04%)</title><rect x="30.4046%" y="1333" width="0.0403%" height="15" fill="rgb(217,118,1)" fg:x="67182" fg:w="89"/><text x="30.6546%" y="1343.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::construct&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;&gt; (89 samples, 0.04%)</title><rect x="30.4046%" y="1317" width="0.0403%" height="15" fill="rgb(232,180,48)" fg:x="67182" fg:w="89"/><text x="30.6546%" y="1327.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector (89 samples, 0.04%)</title><rect x="30.4046%" y="1301" width="0.0403%" height="15" fill="rgb(230,27,33)" fg:x="67182" fg:w="89"/><text x="30.6546%" y="1311.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_base (89 samples, 0.04%)</title><rect x="30.4046%" y="1285" width="0.0403%" height="15" fill="rgb(205,31,21)" fg:x="67182" fg:w="89"/><text x="30.6546%" y="1295.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl::_Vector_impl (89 samples, 0.04%)</title><rect x="30.4046%" y="1269" width="0.0403%" height="15" fill="rgb(253,59,4)" fg:x="67182" fg:w="89"/><text x="30.6546%" y="1279.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_impl_data::_Vector_impl_data (89 samples, 0.04%)</title><rect x="30.4046%" y="1253" width="0.0403%" height="15" fill="rgb(224,201,9)" fg:x="67182" fg:w="89"/><text x="30.6546%" y="1263.50"></text></g><g><title>[libc.so.6] (810 samples, 0.37%)</title><rect x="31.1464%" y="1253" width="0.3666%" height="15" fill="rgb(229,206,30)" fg:x="68821" fg:w="810"/><text x="31.3964%" y="1263.50"></text></g><g><title>[libc.so.6] (223 samples, 0.10%)</title><rect x="31.4120%" y="1237" width="0.1009%" height="15" fill="rgb(212,67,47)" fg:x="69408" fg:w="223"/><text x="31.6620%" y="1247.50"></text></g><g><title>operator new (2,269 samples, 1.03%)</title><rect x="30.4870%" y="1285" width="1.0269%" height="15" fill="rgb(211,96,50)" fg:x="67364" fg:w="2269"/><text x="30.7370%" y="1295.50"></text></g><g><title>malloc (2,215 samples, 1.00%)</title><rect x="30.5114%" y="1269" width="1.0024%" height="15" fill="rgb(252,114,18)" fg:x="67418" fg:w="2215"/><text x="30.7614%" y="1279.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (2,283 samples, 1.03%)</title><rect x="30.4815%" y="1333" width="1.0332%" height="15" fill="rgb(223,58,37)" fg:x="67352" fg:w="2283"/><text x="30.7315%" y="1343.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (2,283 samples, 1.03%)</title><rect x="30.4815%" y="1317" width="1.0332%" height="15" fill="rgb(237,70,4)" fg:x="67352" fg:w="2283"/><text x="30.7315%" y="1327.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (2,283 samples, 1.03%)</title><rect x="30.4815%" y="1301" width="1.0332%" height="15" fill="rgb(244,85,46)" fg:x="67352" fg:w="2283"/><text x="30.7315%" y="1311.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::capacity (171 samples, 0.08%)</title><rect x="31.5220%" y="1333" width="0.0774%" height="15" fill="rgb(223,39,52)" fg:x="69651" fg:w="171"/><text x="31.7720%" y="1343.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::reserve (2,666 samples, 1.21%)</title><rect x="30.4449%" y="1349" width="1.2066%" height="15" fill="rgb(218,200,14)" fg:x="67271" fg:w="2666"/><text x="30.6949%" y="1359.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (115 samples, 0.05%)</title><rect x="31.5994%" y="1333" width="0.0520%" height="15" fill="rgb(208,171,16)" fg:x="69822" fg:w="115"/><text x="31.8494%" y="1343.50"></text></g><g><title>Unser&lt;(anonymous namespace)::TxInputStream, std::vector&lt;std::vector&lt;unsigned char&gt; &gt; &gt; (9,999 samples, 4.53%)</title><rect x="27.1773%" y="1365" width="4.5253%" height="15" fill="rgb(234,200,18)" fg:x="60051" fg:w="9999"/><text x="27.4273%" y="1375.50">Unser..</text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (113 samples, 0.05%)</title><rect x="31.6514%" y="1349" width="0.0511%" height="15" fill="rgb(228,45,11)" fg:x="69937" fg:w="113"/><text x="31.9014%" y="1359.50"></text></g><g><title>operator&gt;&gt;&lt;std::vector&lt;std::vector&lt;unsigned char&gt; &gt;&amp;&gt; (10,024 samples, 4.54%)</title><rect x="27.1773%" y="1445" width="4.5366%" height="15" fill="rgb(237,182,11)" fg:x="60051" fg:w="10024"/><text x="27.4273%" y="1455.50">opera..</text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, std::vector&lt;unsigned char&gt;, std::allocator&lt;std::vector&lt;unsigned char&gt; &gt; &gt; (10,024 samples, 4.54%)</title><rect x="27.1773%" y="1429" width="4.5366%" height="15" fill="rgb(241,175,49)" fg:x="60051" fg:w="10024"/><text x="27.4273%" y="1439.50">Unser..</text></g><g><title>Unserialize_impl&lt;(anonymous namespace)::TxInputStream, std::vector&lt;unsigned char&gt;, std::allocator&lt;std::vector&lt;unsigned char&gt; &gt;, std::vector&lt;unsigned char&gt; &gt; (10,024 samples, 4.54%)</title><rect x="27.1773%" y="1413" width="4.5366%" height="15" fill="rgb(247,38,35)" fg:x="60051" fg:w="10024"/><text x="27.4273%" y="1423.50">Unser..</text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char&gt; &gt;&amp;&gt; &gt; (10,024 samples, 4.54%)</title><rect x="27.1773%" y="1397" width="4.5366%" height="15" fill="rgb(228,39,49)" fg:x="60051" fg:w="10024"/><text x="27.4273%" y="1407.50">Unser..</text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream&gt; (10,024 samples, 4.54%)</title><rect x="27.1773%" y="1381" width="4.5366%" height="15" fill="rgb(226,101,26)" fg:x="60051" fg:w="10024"/><text x="27.4273%" y="1391.50">Unser..</text></g><g><title>verify_script (25 samples, 0.01%)</title><rect x="31.7026%" y="1365" width="0.0113%" height="15" fill="rgb(206,141,19)" fg:x="70050" fg:w="25"/><text x="31.9526%" y="1375.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (32 samples, 0.01%)</title><rect x="31.7216%" y="1445" width="0.0145%" height="15" fill="rgb(211,200,13)" fg:x="70092" fg:w="32"/><text x="31.9716%" y="1455.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (71 samples, 0.03%)</title><rect x="31.7664%" y="1141" width="0.0321%" height="15" fill="rgb(241,121,6)" fg:x="70191" fg:w="71"/><text x="32.0164%" y="1151.50"></text></g><g><title>SerReadWriteMany&lt;(anonymous namespace)::TxInputStream, uint256&amp;&gt; (161 samples, 0.07%)</title><rect x="31.7664%" y="1205" width="0.0729%" height="15" fill="rgb(234,221,29)" fg:x="70191" fg:w="161"/><text x="32.0164%" y="1215.50"></text></g><g><title>UnserializeMany&lt;(anonymous namespace)::TxInputStream, uint256&amp;&gt; (161 samples, 0.07%)</title><rect x="31.7664%" y="1189" width="0.0729%" height="15" fill="rgb(229,136,5)" fg:x="70191" fg:w="161"/><text x="32.0164%" y="1199.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, uint256&amp;&gt; (161 samples, 0.07%)</title><rect x="31.7664%" y="1173" width="0.0729%" height="15" fill="rgb(238,36,11)" fg:x="70191" fg:w="161"/><text x="32.0164%" y="1183.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream&gt; (161 samples, 0.07%)</title><rect x="31.7664%" y="1157" width="0.0729%" height="15" fill="rgb(251,55,41)" fg:x="70191" fg:w="161"/><text x="32.0164%" y="1167.50"></text></g><g><title>read (90 samples, 0.04%)</title><rect x="31.7985%" y="1141" width="0.0407%" height="15" fill="rgb(242,34,40)" fg:x="70262" fg:w="90"/><text x="32.0485%" y="1151.50"></text></g><g><title>SerReadWriteMany&lt;(anonymous namespace)::TxInputStream, COutPoint&amp;&gt; (193 samples, 0.09%)</title><rect x="31.7664%" y="1285" width="0.0873%" height="15" fill="rgb(215,42,17)" fg:x="70191" fg:w="193"/><text x="32.0164%" y="1295.50"></text></g><g><title>UnserializeMany&lt;(anonymous namespace)::TxInputStream, COutPoint&amp;&gt; (193 samples, 0.09%)</title><rect x="31.7664%" y="1269" width="0.0873%" height="15" fill="rgb(207,44,46)" fg:x="70191" fg:w="193"/><text x="32.0164%" y="1279.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, COutPoint&amp;&gt; (193 samples, 0.09%)</title><rect x="31.7664%" y="1253" width="0.0873%" height="15" fill="rgb(211,206,28)" fg:x="70191" fg:w="193"/><text x="32.0164%" y="1263.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream&gt; (193 samples, 0.09%)</title><rect x="31.7664%" y="1237" width="0.0873%" height="15" fill="rgb(237,167,16)" fg:x="70191" fg:w="193"/><text x="32.0164%" y="1247.50"></text></g><g><title>SerializationOp&lt;(anonymous namespace)::TxInputStream, CSerActionUnserialize&gt; (193 samples, 0.09%)</title><rect x="31.7664%" y="1221" width="0.0873%" height="15" fill="rgb(233,66,6)" fg:x="70191" fg:w="193"/><text x="32.0164%" y="1231.50"></text></g><g><title>SerReadWriteMany&lt;(anonymous namespace)::TxInputStream, unsigned int&amp;&gt; (32 samples, 0.01%)</title><rect x="31.8392%" y="1205" width="0.0145%" height="15" fill="rgb(246,123,29)" fg:x="70352" fg:w="32"/><text x="32.0892%" y="1215.50"></text></g><g><title>UnserializeMany&lt;(anonymous namespace)::TxInputStream, unsigned int&amp;&gt; (32 samples, 0.01%)</title><rect x="31.8392%" y="1189" width="0.0145%" height="15" fill="rgb(209,62,40)" fg:x="70352" fg:w="32"/><text x="32.0892%" y="1199.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream&gt; (30 samples, 0.01%)</title><rect x="31.8402%" y="1173" width="0.0136%" height="15" fill="rgb(218,4,25)" fg:x="70354" fg:w="30"/><text x="32.0902%" y="1183.50"></text></g><g><title>ser_readdata32&lt;(anonymous namespace)::TxInputStream&gt; (30 samples, 0.01%)</title><rect x="31.8402%" y="1157" width="0.0136%" height="15" fill="rgb(253,91,49)" fg:x="70354" fg:w="30"/><text x="32.0902%" y="1167.50"></text></g><g><title>ReadCompactSize&lt;(anonymous namespace)::TxInputStream&gt; (103 samples, 0.05%)</title><rect x="32.0144%" y="1109" width="0.0466%" height="15" fill="rgb(228,155,29)" fg:x="70739" fg:w="103"/><text x="32.2644%" y="1119.50"></text></g><g><title>ReadCompactSize&lt;(anonymous namespace)::TxInputStream&gt; (348 samples, 0.16%)</title><rect x="31.9139%" y="1141" width="0.1575%" height="15" fill="rgb(243,57,37)" fg:x="70517" fg:w="348"/><text x="32.1639%" y="1151.50"></text></g><g><title>ser_readdata8&lt;(anonymous namespace)::TxInputStream&gt; (126 samples, 0.06%)</title><rect x="32.0144%" y="1125" width="0.0570%" height="15" fill="rgb(244,167,17)" fg:x="70739" fg:w="126"/><text x="32.2644%" y="1135.50"></text></g><g><title>read (23 samples, 0.01%)</title><rect x="32.0610%" y="1109" width="0.0104%" height="15" fill="rgb(207,181,38)" fg:x="70842" fg:w="23"/><text x="32.3110%" y="1119.50"></text></g><g><title>SerReadWriteMany&lt;(anonymous namespace)::TxInputStream, CScript&amp;&gt; (548 samples, 0.25%)</title><rect x="31.8537%" y="1285" width="0.2480%" height="15" fill="rgb(211,8,23)" fg:x="70384" fg:w="548"/><text x="32.1037%" y="1295.50"></text></g><g><title>UnserializeMany&lt;(anonymous namespace)::TxInputStream, CScript&amp;&gt; (548 samples, 0.25%)</title><rect x="31.8537%" y="1269" width="0.2480%" height="15" fill="rgb(235,11,44)" fg:x="70384" fg:w="548"/><text x="32.1037%" y="1279.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, CScript&amp;&gt; (548 samples, 0.25%)</title><rect x="31.8537%" y="1253" width="0.2480%" height="15" fill="rgb(248,18,52)" fg:x="70384" fg:w="548"/><text x="32.1037%" y="1263.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream&gt; (548 samples, 0.25%)</title><rect x="31.8537%" y="1237" width="0.2480%" height="15" fill="rgb(208,4,7)" fg:x="70384" fg:w="548"/><text x="32.1037%" y="1247.50"></text></g><g><title>SerializationOp&lt;(anonymous namespace)::TxInputStream, CSerActionUnserialize&gt; (548 samples, 0.25%)</title><rect x="31.8537%" y="1221" width="0.2480%" height="15" fill="rgb(240,17,39)" fg:x="70384" fg:w="548"/><text x="32.1037%" y="1231.50"></text></g><g><title>SerReadWriteMany&lt;(anonymous namespace)::TxInputStream, prevector&lt;28, unsigned char, unsigned int, int&gt;&amp;&gt; (548 samples, 0.25%)</title><rect x="31.8537%" y="1205" width="0.2480%" height="15" fill="rgb(207,170,3)" fg:x="70384" fg:w="548"/><text x="32.1037%" y="1215.50"></text></g><g><title>UnserializeMany&lt;(anonymous namespace)::TxInputStream, prevector&lt;28, unsigned char&gt;&amp;&gt; (548 samples, 0.25%)</title><rect x="31.8537%" y="1189" width="0.2480%" height="15" fill="rgb(236,100,52)" fg:x="70384" fg:w="548"/><text x="32.1037%" y="1199.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (546 samples, 0.25%)</title><rect x="31.8546%" y="1173" width="0.2471%" height="15" fill="rgb(246,78,51)" fg:x="70386" fg:w="546"/><text x="32.1046%" y="1183.50"></text></g><g><title>Unserialize_impl&lt;(anonymous namespace)::TxInputStream, 28u, unsigned char&gt; (546 samples, 0.25%)</title><rect x="31.8546%" y="1157" width="0.2471%" height="15" fill="rgb(211,17,15)" fg:x="70386" fg:w="546"/><text x="32.1046%" y="1167.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::clear (66 samples, 0.03%)</title><rect x="32.0719%" y="1141" width="0.0299%" height="15" fill="rgb(209,59,46)" fg:x="70866" fg:w="66"/><text x="32.3219%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::resize (66 samples, 0.03%)</title><rect x="32.0719%" y="1125" width="0.0299%" height="15" fill="rgb(210,92,25)" fg:x="70866" fg:w="66"/><text x="32.3219%" y="1135.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (64 samples, 0.03%)</title><rect x="32.0728%" y="1109" width="0.0290%" height="15" fill="rgb(238,174,52)" fg:x="70868" fg:w="64"/><text x="32.3228%" y="1119.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::is_direct (37 samples, 0.02%)</title><rect x="32.0850%" y="1093" width="0.0167%" height="15" fill="rgb(230,73,7)" fg:x="70895" fg:w="37"/><text x="32.3350%" y="1103.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (61 samples, 0.03%)</title><rect x="32.1017%" y="1221" width="0.0276%" height="15" fill="rgb(243,124,40)" fg:x="70932" fg:w="61"/><text x="32.3517%" y="1231.50"></text></g><g><title>SerializationOp&lt;(anonymous namespace)::TxInputStream, CSerActionUnserialize&gt; (808 samples, 0.37%)</title><rect x="31.7664%" y="1301" width="0.3657%" height="15" fill="rgb(244,170,11)" fg:x="70191" fg:w="808"/><text x="32.0164%" y="1311.50"></text></g><g><title>SerReadWriteMany&lt;(anonymous namespace)::TxInputStream, unsigned int&amp;&gt; (67 samples, 0.03%)</title><rect x="32.1017%" y="1285" width="0.0303%" height="15" fill="rgb(207,114,54)" fg:x="70932" fg:w="67"/><text x="32.3517%" y="1295.50"></text></g><g><title>UnserializeMany&lt;(anonymous namespace)::TxInputStream, unsigned int&amp;&gt; (67 samples, 0.03%)</title><rect x="32.1017%" y="1269" width="0.0303%" height="15" fill="rgb(205,42,20)" fg:x="70932" fg:w="67"/><text x="32.3517%" y="1279.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream&gt; (67 samples, 0.03%)</title><rect x="32.1017%" y="1253" width="0.0303%" height="15" fill="rgb(230,30,28)" fg:x="70932" fg:w="67"/><text x="32.3517%" y="1263.50"></text></g><g><title>ser_readdata32&lt;(anonymous namespace)::TxInputStream&gt; (67 samples, 0.03%)</title><rect x="32.1017%" y="1237" width="0.0303%" height="15" fill="rgb(205,73,54)" fg:x="70932" fg:w="67"/><text x="32.3517%" y="1247.50"></text></g><g><title>Unser&lt;(anonymous namespace)::TxInputStream, CTxIn&gt; (842 samples, 0.38%)</title><rect x="31.7664%" y="1349" width="0.3811%" height="15" fill="rgb(254,227,23)" fg:x="70191" fg:w="842"/><text x="32.0164%" y="1359.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, CTxIn&amp;&gt; (842 samples, 0.38%)</title><rect x="31.7664%" y="1333" width="0.3811%" height="15" fill="rgb(228,202,34)" fg:x="70191" fg:w="842"/><text x="32.0164%" y="1343.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream&gt; (842 samples, 0.38%)</title><rect x="31.7664%" y="1317" width="0.3811%" height="15" fill="rgb(222,225,37)" fg:x="70191" fg:w="842"/><text x="32.0164%" y="1327.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (34 samples, 0.02%)</title><rect x="32.1321%" y="1301" width="0.0154%" height="15" fill="rgb(221,14,54)" fg:x="70999" fg:w="34"/><text x="32.3821%" y="1311.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::emplace_back&lt;&gt; (79 samples, 0.04%)</title><rect x="32.1474%" y="1349" width="0.0358%" height="15" fill="rgb(254,102,2)" fg:x="71033" fg:w="79"/><text x="32.3974%" y="1359.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::construct&lt;CTxIn&gt; (54 samples, 0.02%)</title><rect x="32.1588%" y="1333" width="0.0244%" height="15" fill="rgb(232,104,17)" fg:x="71058" fg:w="54"/><text x="32.4088%" y="1343.50"></text></g><g><title>std::__new_allocator&lt;CTxIn&gt;::construct&lt;CTxIn&gt; (54 samples, 0.02%)</title><rect x="32.1588%" y="1317" width="0.0244%" height="15" fill="rgb(250,220,14)" fg:x="71058" fg:w="54"/><text x="32.4088%" y="1327.50"></text></g><g><title>CTxIn::CTxIn (54 samples, 0.02%)</title><rect x="32.1588%" y="1301" width="0.0244%" height="15" fill="rgb(241,158,9)" fg:x="71058" fg:w="54"/><text x="32.4088%" y="1311.50"></text></g><g><title>CScriptWitness::CScriptWitness (23 samples, 0.01%)</title><rect x="32.1728%" y="1285" width="0.0104%" height="15" fill="rgb(246,9,43)" fg:x="71089" fg:w="23"/><text x="32.4228%" y="1295.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::vector (23 samples, 0.01%)</title><rect x="32.1728%" y="1269" width="0.0104%" height="15" fill="rgb(206,73,33)" fg:x="71089" fg:w="23"/><text x="32.4228%" y="1279.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_base (23 samples, 0.01%)</title><rect x="32.1728%" y="1253" width="0.0104%" height="15" fill="rgb(222,79,8)" fg:x="71089" fg:w="23"/><text x="32.4228%" y="1263.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (23 samples, 0.01%)</title><rect x="32.1728%" y="1237" width="0.0104%" height="15" fill="rgb(234,8,54)" fg:x="71089" fg:w="23"/><text x="32.4228%" y="1247.50"></text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (23 samples, 0.01%)</title><rect x="32.1728%" y="1221" width="0.0104%" height="15" fill="rgb(209,134,38)" fg:x="71089" fg:w="23"/><text x="32.4228%" y="1231.50"></text></g><g><title>[libc.so.6] (340 samples, 0.15%)</title><rect x="32.7847%" y="1221" width="0.1539%" height="15" fill="rgb(230,127,29)" fg:x="72441" fg:w="340"/><text x="33.0347%" y="1231.50"></text></g><g><title>[libc.so.6] (86 samples, 0.04%)</title><rect x="32.8996%" y="1205" width="0.0389%" height="15" fill="rgb(242,44,41)" fg:x="72695" fg:w="86"/><text x="33.1496%" y="1215.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::reserve (1,674 samples, 0.76%)</title><rect x="32.1832%" y="1349" width="0.7576%" height="15" fill="rgb(222,56,43)" fg:x="71112" fg:w="1674"/><text x="32.4332%" y="1359.50"></text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate_and_copy&lt;CTxIn const*&gt; (1,674 samples, 0.76%)</title><rect x="32.1832%" y="1333" width="0.7576%" height="15" fill="rgb(238,39,47)" fg:x="71112" fg:w="1674"/><text x="32.4332%" y="1343.50"></text></g><g><title>std::_Vector_base&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::_M_allocate (1,674 samples, 0.76%)</title><rect x="32.1832%" y="1317" width="0.7576%" height="15" fill="rgb(226,79,43)" fg:x="71112" fg:w="1674"/><text x="32.4332%" y="1327.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;CTxIn&gt; &gt;::allocate (1,674 samples, 0.76%)</title><rect x="32.1832%" y="1301" width="0.7576%" height="15" fill="rgb(242,105,53)" fg:x="71112" fg:w="1674"/><text x="32.4332%" y="1311.50"></text></g><g><title>std::__new_allocator&lt;CTxIn&gt;::allocate (1,674 samples, 0.76%)</title><rect x="32.1832%" y="1285" width="0.7576%" height="15" fill="rgb(251,132,46)" fg:x="71112" fg:w="1674"/><text x="32.4332%" y="1295.50"></text></g><g><title>operator new (1,673 samples, 0.76%)</title><rect x="32.1837%" y="1269" width="0.7572%" height="15" fill="rgb(231,77,14)" fg:x="71113" fg:w="1673"/><text x="32.4337%" y="1279.50"></text></g><g><title>malloc (1,670 samples, 0.76%)</title><rect x="32.1850%" y="1253" width="0.7558%" height="15" fill="rgb(240,135,9)" fg:x="71116" fg:w="1670"/><text x="32.4350%" y="1263.50"></text></g><g><title>[libc.so.6] (1,665 samples, 0.75%)</title><rect x="32.1873%" y="1237" width="0.7535%" height="15" fill="rgb(248,109,14)" fg:x="71121" fg:w="1665"/><text x="32.4373%" y="1247.50"></text></g><g><title>Unser&lt;(anonymous namespace)::TxInputStream, std::vector&lt;CTxIn&gt; &gt; (2,675 samples, 1.21%)</title><rect x="31.7397%" y="1365" width="1.2106%" height="15" fill="rgb(227,146,52)" fg:x="70132" fg:w="2675"/><text x="31.9897%" y="1375.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (2,689 samples, 1.22%)</title><rect x="31.7361%" y="1429" width="1.2170%" height="15" fill="rgb(232,54,3)" fg:x="70124" fg:w="2689"/><text x="31.9861%" y="1439.50"></text></g><g><title>Unserialize_impl&lt;(anonymous namespace)::TxInputStream, CTxIn, std::allocator&lt;CTxIn&gt;, CTxIn&gt; (2,681 samples, 1.21%)</title><rect x="31.7397%" y="1413" width="1.2133%" height="15" fill="rgb(229,201,43)" fg:x="70132" fg:w="2681"/><text x="31.9897%" y="1423.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn&gt;&amp;&gt; &gt; (2,681 samples, 1.21%)</title><rect x="31.7397%" y="1397" width="1.2133%" height="15" fill="rgb(252,161,33)" fg:x="70132" fg:w="2681"/><text x="31.9897%" y="1407.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream&gt; (2,681 samples, 1.21%)</title><rect x="31.7397%" y="1381" width="1.2133%" height="15" fill="rgb(226,146,40)" fg:x="70132" fg:w="2681"/><text x="31.9897%" y="1391.50"></text></g><g><title>UnserializeTransaction&lt;(anonymous namespace)::TxInputStream, CMutableTransaction&gt; (12,854 samples, 5.82%)</title><rect x="27.1551%" y="1461" width="5.8173%" height="15" fill="rgb(219,47,25)" fg:x="60002" fg:w="12854"/><text x="27.4051%" y="1471.50">Unseria..</text></g><g><title>verify_script (2,732 samples, 1.24%)</title><rect x="31.7361%" y="1445" width="1.2364%" height="15" fill="rgb(250,135,13)" fg:x="70124" fg:w="2732"/><text x="31.9861%" y="1455.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (43 samples, 0.02%)</title><rect x="32.9530%" y="1429" width="0.0195%" height="15" fill="rgb(219,229,18)" fg:x="72813" fg:w="43"/><text x="33.2030%" y="1439.50"></text></g><g><title>Unserialize_impl&lt;(anonymous namespace)::TxInputStream, CTxOut, std::allocator&lt;CTxOut&gt;, CTxOut&gt; (40 samples, 0.02%)</title><rect x="32.9544%" y="1413" width="0.0181%" height="15" fill="rgb(217,152,27)" fg:x="72816" fg:w="40"/><text x="33.2044%" y="1423.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut&gt;&amp;&gt; &gt; (40 samples, 0.02%)</title><rect x="32.9544%" y="1397" width="0.0181%" height="15" fill="rgb(225,71,47)" fg:x="72816" fg:w="40"/><text x="33.2044%" y="1407.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream&gt; (40 samples, 0.02%)</title><rect x="32.9544%" y="1381" width="0.0181%" height="15" fill="rgb(220,139,14)" fg:x="72816" fg:w="40"/><text x="33.2044%" y="1391.50"></text></g><g><title>Unserialize&lt;(anonymous namespace)::TxInputStream&gt; (12,855 samples, 5.82%)</title><rect x="27.1551%" y="1477" width="5.8178%" height="15" fill="rgb(247,54,32)" fg:x="60002" fg:w="12855"/><text x="27.4051%" y="1487.50">Unseria..</text></g><g><title>CTransaction&lt;(anonymous namespace)::TxInputStream&gt; (12,857 samples, 5.82%)</title><rect x="27.1547%" y="1509" width="5.8187%" height="15" fill="rgb(252,131,39)" fg:x="60001" fg:w="12857"/><text x="27.4047%" y="1519.50">CTransa..</text></g><g><title>CMutableTransaction&lt;(anonymous namespace)::TxInputStream&gt; (12,856 samples, 5.82%)</title><rect x="27.1551%" y="1493" width="5.8182%" height="15" fill="rgb(210,108,39)" fg:x="60002" fg:w="12856"/><text x="27.4051%" y="1503.50">CMutabl..</text></g><g><title>CSizeComputer::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (80 samples, 0.04%)</title><rect x="32.9770%" y="1429" width="0.0362%" height="15" fill="rgb(205,23,29)" fg:x="72866" fg:w="80"/><text x="33.2270%" y="1439.50"></text></g><g><title>Serialize&lt;CSizeComputer, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (80 samples, 0.04%)</title><rect x="32.9770%" y="1413" width="0.0362%" height="15" fill="rgb(246,139,46)" fg:x="72866" fg:w="80"/><text x="33.2270%" y="1423.50"></text></g><g><title>Serialize_impl&lt;CSizeComputer, CTxIn, std::allocator&lt;CTxIn&gt;, CTxIn&gt; (80 samples, 0.04%)</title><rect x="32.9770%" y="1397" width="0.0362%" height="15" fill="rgb(250,81,26)" fg:x="72866" fg:w="80"/><text x="33.2270%" y="1407.50"></text></g><g><title>Serialize&lt;CSizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (80 samples, 0.04%)</title><rect x="32.9770%" y="1381" width="0.0362%" height="15" fill="rgb(214,104,7)" fg:x="72866" fg:w="80"/><text x="33.2270%" y="1391.50"></text></g><g><title>Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;CSizeComputer&gt; (80 samples, 0.04%)</title><rect x="32.9770%" y="1365" width="0.0362%" height="15" fill="rgb(233,189,8)" fg:x="72866" fg:w="80"/><text x="33.2270%" y="1375.50"></text></g><g><title>VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;CSizeComputer, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (80 samples, 0.04%)</title><rect x="32.9770%" y="1349" width="0.0362%" height="15" fill="rgb(228,141,17)" fg:x="72866" fg:w="80"/><text x="33.2270%" y="1359.50"></text></g><g><title>DefaultFormatter::Ser&lt;CSizeComputer, CTxIn&gt; (79 samples, 0.04%)</title><rect x="32.9775%" y="1333" width="0.0358%" height="15" fill="rgb(247,157,1)" fg:x="72867" fg:w="79"/><text x="33.2275%" y="1343.50"></text></g><g><title>Serialize&lt;CSizeComputer, CTxIn&gt; (79 samples, 0.04%)</title><rect x="32.9775%" y="1317" width="0.0358%" height="15" fill="rgb(249,225,5)" fg:x="72867" fg:w="79"/><text x="33.2275%" y="1327.50"></text></g><g><title>CTxIn::Serialize&lt;CSizeComputer&gt; (79 samples, 0.04%)</title><rect x="32.9775%" y="1301" width="0.0358%" height="15" fill="rgb(242,55,13)" fg:x="72867" fg:w="79"/><text x="33.2275%" y="1311.50"></text></g><g><title>CTxIn::SerializationOp&lt;CSizeComputer, CSerActionSerialize&gt; (79 samples, 0.04%)</title><rect x="32.9775%" y="1285" width="0.0358%" height="15" fill="rgb(230,49,50)" fg:x="72867" fg:w="79"/><text x="33.2275%" y="1295.50"></text></g><g><title>SerReadWriteMany&lt;CSizeComputer, CScript&gt; (79 samples, 0.04%)</title><rect x="32.9775%" y="1269" width="0.0358%" height="15" fill="rgb(241,111,38)" fg:x="72867" fg:w="79"/><text x="33.2275%" y="1279.50"></text></g><g><title>SerializeMany&lt;CSizeComputer, CScript&gt; (79 samples, 0.04%)</title><rect x="32.9775%" y="1253" width="0.0358%" height="15" fill="rgb(252,155,4)" fg:x="72867" fg:w="79"/><text x="33.2275%" y="1263.50"></text></g><g><title>Serialize&lt;CSizeComputer, CScript&gt; (79 samples, 0.04%)</title><rect x="32.9775%" y="1237" width="0.0358%" height="15" fill="rgb(212,69,32)" fg:x="72867" fg:w="79"/><text x="33.2275%" y="1247.50"></text></g><g><title>CScript::Serialize&lt;CSizeComputer&gt; (79 samples, 0.04%)</title><rect x="32.9775%" y="1221" width="0.0358%" height="15" fill="rgb(243,107,47)" fg:x="72867" fg:w="79"/><text x="33.2275%" y="1231.50"></text></g><g><title>CScript::SerializationOp&lt;CSizeComputer, CSerActionSerialize&gt; (79 samples, 0.04%)</title><rect x="32.9775%" y="1205" width="0.0358%" height="15" fill="rgb(247,130,12)" fg:x="72867" fg:w="79"/><text x="33.2275%" y="1215.50"></text></g><g><title>SerReadWriteMany&lt;CSizeComputer, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (79 samples, 0.04%)</title><rect x="32.9775%" y="1189" width="0.0358%" height="15" fill="rgb(233,74,16)" fg:x="72867" fg:w="79"/><text x="33.2275%" y="1199.50"></text></g><g><title>SerializeMany&lt;CSizeComputer, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (79 samples, 0.04%)</title><rect x="32.9775%" y="1173" width="0.0358%" height="15" fill="rgb(208,58,18)" fg:x="72867" fg:w="79"/><text x="33.2275%" y="1183.50"></text></g><g><title>Serialize&lt;CSizeComputer, 28u, unsigned char&gt; (79 samples, 0.04%)</title><rect x="32.9775%" y="1157" width="0.0358%" height="15" fill="rgb(242,225,1)" fg:x="72867" fg:w="79"/><text x="33.2275%" y="1167.50"></text></g><g><title>Serialize_impl&lt;CSizeComputer, 28u, unsigned char&gt; (79 samples, 0.04%)</title><rect x="32.9775%" y="1141" width="0.0358%" height="15" fill="rgb(249,39,40)" fg:x="72867" fg:w="79"/><text x="33.2275%" y="1151.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (75 samples, 0.03%)</title><rect x="32.9793%" y="1125" width="0.0339%" height="15" fill="rgb(207,72,44)" fg:x="72871" fg:w="75"/><text x="33.2293%" y="1135.50"></text></g><g><title>WriteCompactSize (57 samples, 0.03%)</title><rect x="33.0463%" y="1285" width="0.0258%" height="15" fill="rgb(215,193,12)" fg:x="73019" fg:w="57"/><text x="33.2963%" y="1295.50"></text></g><g><title>GetSizeOfCompactSize (57 samples, 0.03%)</title><rect x="33.0463%" y="1269" width="0.0258%" height="15" fill="rgb(248,41,39)" fg:x="73019" fg:w="57"/><text x="33.2963%" y="1279.50"></text></g><g><title>DefaultFormatter::Ser&lt;CSizeComputer, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (300 samples, 0.14%)</title><rect x="33.0372%" y="1333" width="0.1358%" height="15" fill="rgb(253,85,4)" fg:x="72999" fg:w="300"/><text x="33.2872%" y="1343.50"></text></g><g><title>Serialize&lt;CSizeComputer, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (300 samples, 0.14%)</title><rect x="33.0372%" y="1317" width="0.1358%" height="15" fill="rgb(243,70,31)" fg:x="72999" fg:w="300"/><text x="33.2872%" y="1327.50"></text></g><g><title>Serialize_impl&lt;CSizeComputer, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (300 samples, 0.14%)</title><rect x="33.0372%" y="1301" width="0.1358%" height="15" fill="rgb(253,195,26)" fg:x="72999" fg:w="300"/><text x="33.2872%" y="1311.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::size (223 samples, 0.10%)</title><rect x="33.0720%" y="1285" width="0.1009%" height="15" fill="rgb(243,42,11)" fg:x="73076" fg:w="223"/><text x="33.3220%" y="1295.50"></text></g><g><title>CSizeComputer::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (366 samples, 0.17%)</title><rect x="33.0141%" y="1429" width="0.1656%" height="15" fill="rgb(239,66,17)" fg:x="72948" fg:w="366"/><text x="33.2641%" y="1439.50"></text></g><g><title>Serialize&lt;CSizeComputer, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (366 samples, 0.17%)</title><rect x="33.0141%" y="1413" width="0.1656%" height="15" fill="rgb(217,132,21)" fg:x="72948" fg:w="366"/><text x="33.2641%" y="1423.50"></text></g><g><title>Serialize_impl&lt;CSizeComputer, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (366 samples, 0.17%)</title><rect x="33.0141%" y="1397" width="0.1656%" height="15" fill="rgb(252,202,21)" fg:x="72948" fg:w="366"/><text x="33.2641%" y="1407.50"></text></g><g><title>Serialize&lt;CSizeComputer, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (366 samples, 0.17%)</title><rect x="33.0141%" y="1381" width="0.1656%" height="15" fill="rgb(233,98,36)" fg:x="72948" fg:w="366"/><text x="33.2641%" y="1391.50"></text></g><g><title>Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;CSizeComputer&gt; (366 samples, 0.17%)</title><rect x="33.0141%" y="1365" width="0.1656%" height="15" fill="rgb(216,153,54)" fg:x="72948" fg:w="366"/><text x="33.2641%" y="1375.50"></text></g><g><title>VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;CSizeComputer, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (366 samples, 0.17%)</title><rect x="33.0141%" y="1349" width="0.1656%" height="15" fill="rgb(250,99,7)" fg:x="72948" fg:w="366"/><text x="33.2641%" y="1359.50"></text></g><g><title>GetSerializeSize&lt;CTransaction&gt; (457 samples, 0.21%)</title><rect x="32.9738%" y="1509" width="0.2068%" height="15" fill="rgb(207,56,50)" fg:x="72859" fg:w="457"/><text x="33.2238%" y="1519.50"></text></g><g><title>CSizeComputer::operator&lt;&lt; &lt;CTransaction&gt; (457 samples, 0.21%)</title><rect x="32.9738%" y="1493" width="0.2068%" height="15" fill="rgb(244,61,34)" fg:x="72859" fg:w="457"/><text x="33.2238%" y="1503.50"></text></g><g><title>Serialize&lt;CSizeComputer, CTransaction&gt; (457 samples, 0.21%)</title><rect x="32.9738%" y="1477" width="0.2068%" height="15" fill="rgb(241,50,38)" fg:x="72859" fg:w="457"/><text x="33.2238%" y="1487.50"></text></g><g><title>CTransaction::Serialize&lt;CSizeComputer&gt; (457 samples, 0.21%)</title><rect x="32.9738%" y="1461" width="0.2068%" height="15" fill="rgb(212,166,30)" fg:x="72859" fg:w="457"/><text x="33.2238%" y="1471.50"></text></g><g><title>SerializeTransaction&lt;CSizeComputer, CTransaction&gt; (457 samples, 0.21%)</title><rect x="32.9738%" y="1445" width="0.2068%" height="15" fill="rgb(249,127,32)" fg:x="72859" fg:w="457"/><text x="33.2238%" y="1455.50"></text></g><g><title>Round (157 samples, 0.07%)</title><rect x="33.2499%" y="1397" width="0.0711%" height="15" fill="rgb(209,103,0)" fg:x="73469" fg:w="157"/><text x="33.4999%" y="1407.50"></text></g><g><title>Sigma1 (28 samples, 0.01%)</title><rect x="33.3083%" y="1381" width="0.0127%" height="15" fill="rgb(238,209,51)" fg:x="73598" fg:w="28"/><text x="33.5583%" y="1391.50"></text></g><g><title>sigma0 (52 samples, 0.02%)</title><rect x="33.3237%" y="1397" width="0.0235%" height="15" fill="rgb(237,56,23)" fg:x="73632" fg:w="52"/><text x="33.5737%" y="1407.50"></text></g><g><title>CSHA256::Write (347 samples, 0.16%)</title><rect x="33.2060%" y="1413" width="0.1570%" height="15" fill="rgb(215,153,46)" fg:x="73372" fg:w="347"/><text x="33.4560%" y="1423.50"></text></g><g><title>sigma1 (35 samples, 0.02%)</title><rect x="33.3472%" y="1397" width="0.0158%" height="15" fill="rgb(224,49,31)" fg:x="73684" fg:w="35"/><text x="33.5972%" y="1407.50"></text></g><g><title>CSHA256::Finalize (356 samples, 0.16%)</title><rect x="33.2047%" y="1429" width="0.1611%" height="15" fill="rgb(250,18,42)" fg:x="73369" fg:w="356"/><text x="33.4547%" y="1439.50"></text></g><g><title>CHashWriter::GetHash (364 samples, 0.16%)</title><rect x="33.2037%" y="1461" width="0.1647%" height="15" fill="rgb(215,176,39)" fg:x="73367" fg:w="364"/><text x="33.4537%" y="1471.50"></text></g><g><title>CHash256::Finalize (364 samples, 0.16%)</title><rect x="33.2037%" y="1445" width="0.1647%" height="15" fill="rgb(223,77,29)" fg:x="73367" fg:w="364"/><text x="33.4537%" y="1455.50"></text></g><g><title>GetOutputsHash&lt;CTransaction&gt; (396 samples, 0.18%)</title><rect x="33.2033%" y="1477" width="0.1792%" height="15" fill="rgb(234,94,52)" fg:x="73366" fg:w="396"/><text x="33.4533%" y="1487.50"></text></g><g><title>CHashWriter::operator&lt;&lt; &lt;CTxOut&gt; (31 samples, 0.01%)</title><rect x="33.3685%" y="1461" width="0.0140%" height="15" fill="rgb(220,154,50)" fg:x="73731" fg:w="31"/><text x="33.6185%" y="1471.50"></text></g><g><title>Serialize&lt;CHashWriter, CTxOut&gt; (31 samples, 0.01%)</title><rect x="33.3685%" y="1445" width="0.0140%" height="15" fill="rgb(212,11,10)" fg:x="73731" fg:w="31"/><text x="33.6185%" y="1455.50"></text></g><g><title>CTxOut::Serialize&lt;CHashWriter&gt; (31 samples, 0.01%)</title><rect x="33.3685%" y="1429" width="0.0140%" height="15" fill="rgb(205,166,19)" fg:x="73731" fg:w="31"/><text x="33.6185%" y="1439.50"></text></g><g><title>CTxOut::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (31 samples, 0.01%)</title><rect x="33.3685%" y="1413" width="0.0140%" height="15" fill="rgb(244,198,16)" fg:x="73731" fg:w="31"/><text x="33.6185%" y="1423.50"></text></g><g><title>Round (145 samples, 0.07%)</title><rect x="33.4160%" y="1397" width="0.0656%" height="15" fill="rgb(219,69,12)" fg:x="73836" fg:w="145"/><text x="33.6660%" y="1407.50"></text></g><g><title>sigma0 (31 samples, 0.01%)</title><rect x="33.4852%" y="1397" width="0.0140%" height="15" fill="rgb(245,30,7)" fg:x="73989" fg:w="31"/><text x="33.7352%" y="1407.50"></text></g><g><title>CSHA256::Write (279 samples, 0.13%)</title><rect x="33.3839%" y="1413" width="0.1263%" height="15" fill="rgb(218,221,48)" fg:x="73765" fg:w="279"/><text x="33.6339%" y="1423.50"></text></g><g><title>sigma1 (24 samples, 0.01%)</title><rect x="33.4993%" y="1397" width="0.0109%" height="15" fill="rgb(216,66,15)" fg:x="74020" fg:w="24"/><text x="33.7493%" y="1407.50"></text></g><g><title>CHashWriter::GetHash (284 samples, 0.13%)</title><rect x="33.3825%" y="1461" width="0.1285%" height="15" fill="rgb(226,122,50)" fg:x="73762" fg:w="284"/><text x="33.6325%" y="1471.50"></text></g><g><title>CHash256::Finalize (284 samples, 0.13%)</title><rect x="33.3825%" y="1445" width="0.1285%" height="15" fill="rgb(239,156,16)" fg:x="73762" fg:w="284"/><text x="33.6325%" y="1455.50"></text></g><g><title>CSHA256::Finalize (284 samples, 0.13%)</title><rect x="33.3825%" y="1429" width="0.1285%" height="15" fill="rgb(224,27,38)" fg:x="73762" fg:w="284"/><text x="33.6325%" y="1439.50"></text></g><g><title>ReadBE32 (163 samples, 0.07%)</title><rect x="34.9860%" y="1285" width="0.0738%" height="15" fill="rgb(224,39,27)" fg:x="77305" fg:w="163"/><text x="35.2360%" y="1295.50"></text></g><g><title>__bswap_32 (38 samples, 0.02%)</title><rect x="35.0425%" y="1269" width="0.0172%" height="15" fill="rgb(215,92,29)" fg:x="77430" fg:w="38"/><text x="35.2925%" y="1279.50"></text></g><g><title>Ch (279 samples, 0.13%)</title><rect x="36.2753%" y="1269" width="0.1263%" height="15" fill="rgb(207,159,16)" fg:x="80154" fg:w="279"/><text x="36.5253%" y="1279.50"></text></g><g><title>Maj (528 samples, 0.24%)</title><rect x="36.4016%" y="1269" width="0.2390%" height="15" fill="rgb(238,163,47)" fg:x="80433" fg:w="528"/><text x="36.6516%" y="1279.50"></text></g><g><title>Sigma0 (914 samples, 0.41%)</title><rect x="36.6406%" y="1269" width="0.4136%" height="15" fill="rgb(219,91,49)" fg:x="80961" fg:w="914"/><text x="36.8906%" y="1279.50"></text></g><g><title>Sigma1 (757 samples, 0.34%)</title><rect x="37.0542%" y="1269" width="0.3426%" height="15" fill="rgb(227,167,31)" fg:x="81875" fg:w="757"/><text x="37.3042%" y="1279.50"></text></g><g><title>Round (5,166 samples, 2.34%)</title><rect x="35.0597%" y="1285" width="2.3380%" height="15" fill="rgb(234,80,54)" fg:x="77468" fg:w="5166"/><text x="35.3097%" y="1295.50">R..</text></g><g><title>Transform (98 samples, 0.04%)</title><rect x="37.3977%" y="1285" width="0.0444%" height="15" fill="rgb(212,114,2)" fg:x="82634" fg:w="98"/><text x="37.6477%" y="1295.50"></text></g><g><title>Round (24 samples, 0.01%)</title><rect x="37.4312%" y="1269" width="0.0109%" height="15" fill="rgb(234,50,24)" fg:x="82708" fg:w="24"/><text x="37.6812%" y="1279.50"></text></g><g><title>[libc.so.6] (170 samples, 0.08%)</title><rect x="37.4421%" y="1285" width="0.0769%" height="15" fill="rgb(221,68,8)" fg:x="82732" fg:w="170"/><text x="37.6921%" y="1295.50"></text></g><g><title>sigma0 (1,314 samples, 0.59%)</title><rect x="37.5276%" y="1285" width="0.5947%" height="15" fill="rgb(254,180,31)" fg:x="82921" fg:w="1314"/><text x="37.7776%" y="1295.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, uint256&gt; (11,153 samples, 5.05%)</title><rect x="33.5110%" y="1397" width="5.0475%" height="15" fill="rgb(247,130,50)" fg:x="74046" fg:w="11153"/><text x="33.7610%" y="1407.50">SerRea..</text></g><g><title>SerializeMany&lt;CHashWriter, uint256&gt; (11,153 samples, 5.05%)</title><rect x="33.5110%" y="1381" width="5.0475%" height="15" fill="rgb(211,109,4)" fg:x="74046" fg:w="11153"/><text x="33.7610%" y="1391.50">Serial..</text></g><g><title>Serialize&lt;CHashWriter, uint256&gt; (11,153 samples, 5.05%)</title><rect x="33.5110%" y="1365" width="5.0475%" height="15" fill="rgb(238,50,21)" fg:x="74046" fg:w="11153"/><text x="33.7610%" y="1375.50">Serial..</text></g><g><title>base_blob&lt;256u&gt;::Serialize&lt;CHashWriter&gt; (11,153 samples, 5.05%)</title><rect x="33.5110%" y="1349" width="5.0475%" height="15" fill="rgb(225,57,45)" fg:x="74046" fg:w="11153"/><text x="33.7610%" y="1359.50">base_b..</text></g><g><title>CHashWriter::write (11,153 samples, 5.05%)</title><rect x="33.5110%" y="1333" width="5.0475%" height="15" fill="rgb(209,196,50)" fg:x="74046" fg:w="11153"/><text x="33.7610%" y="1343.50">CHashW..</text></g><g><title>CHash256::Write (11,153 samples, 5.05%)</title><rect x="33.5110%" y="1317" width="5.0475%" height="15" fill="rgb(242,140,13)" fg:x="74046" fg:w="11153"/><text x="33.7610%" y="1327.50">CHash2..</text></g><g><title>CSHA256::Write (11,153 samples, 5.05%)</title><rect x="33.5110%" y="1301" width="5.0475%" height="15" fill="rgb(217,111,7)" fg:x="74046" fg:w="11153"/><text x="33.7610%" y="1311.50">CSHA25..</text></g><g><title>sigma1 (964 samples, 0.44%)</title><rect x="38.1223%" y="1285" width="0.4363%" height="15" fill="rgb(253,193,51)" fg:x="84235" fg:w="964"/><text x="38.3723%" y="1295.50"></text></g><g><title>Ch (39 samples, 0.02%)</title><rect x="39.0234%" y="1269" width="0.0177%" height="15" fill="rgb(252,70,29)" fg:x="86226" fg:w="39"/><text x="39.2734%" y="1279.50"></text></g><g><title>Maj (76 samples, 0.03%)</title><rect x="39.0410%" y="1269" width="0.0344%" height="15" fill="rgb(232,127,12)" fg:x="86265" fg:w="76"/><text x="39.2910%" y="1279.50"></text></g><g><title>Sigma0 (97 samples, 0.04%)</title><rect x="39.0754%" y="1269" width="0.0439%" height="15" fill="rgb(211,180,21)" fg:x="86341" fg:w="97"/><text x="39.3254%" y="1279.50"></text></g><g><title>Round (667 samples, 0.30%)</title><rect x="38.8609%" y="1285" width="0.3019%" height="15" fill="rgb(229,72,13)" fg:x="85867" fg:w="667"/><text x="39.1109%" y="1295.50"></text></g><g><title>Sigma1 (96 samples, 0.04%)</title><rect x="39.1193%" y="1269" width="0.0434%" height="15" fill="rgb(240,211,49)" fg:x="86438" fg:w="96"/><text x="39.3693%" y="1279.50"></text></g><g><title>[libc.so.6] (144 samples, 0.07%)</title><rect x="39.1722%" y="1285" width="0.0652%" height="15" fill="rgb(219,149,40)" fg:x="86555" fg:w="144"/><text x="39.4222%" y="1295.50"></text></g><g><title>sigma0 (195 samples, 0.09%)</title><rect x="39.2419%" y="1285" width="0.0883%" height="15" fill="rgb(210,127,46)" fg:x="86709" fg:w="195"/><text x="39.4919%" y="1295.50"></text></g><g><title>GetPrevoutHash&lt;CTransaction&gt; (13,254 samples, 6.00%)</title><rect x="33.3825%" y="1477" width="5.9984%" height="15" fill="rgb(220,106,7)" fg:x="73762" fg:w="13254"/><text x="33.6325%" y="1487.50">GetPrevo..</text></g><g><title>CHashWriter::operator&lt;&lt; &lt;COutPoint&gt; (12,970 samples, 5.87%)</title><rect x="33.5110%" y="1461" width="5.8698%" height="15" fill="rgb(249,31,22)" fg:x="74046" fg:w="12970"/><text x="33.7610%" y="1471.50">CHashWr..</text></g><g><title>Serialize&lt;CHashWriter, COutPoint&gt; (12,970 samples, 5.87%)</title><rect x="33.5110%" y="1445" width="5.8698%" height="15" fill="rgb(253,1,49)" fg:x="74046" fg:w="12970"/><text x="33.7610%" y="1455.50">Seriali..</text></g><g><title>COutPoint::Serialize&lt;CHashWriter&gt; (12,970 samples, 5.87%)</title><rect x="33.5110%" y="1429" width="5.8698%" height="15" fill="rgb(227,144,33)" fg:x="74046" fg:w="12970"/><text x="33.7610%" y="1439.50">COutPoi..</text></g><g><title>COutPoint::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (12,970 samples, 5.87%)</title><rect x="33.5110%" y="1413" width="5.8698%" height="15" fill="rgb(249,163,44)" fg:x="74046" fg:w="12970"/><text x="33.7610%" y="1423.50">COutPoi..</text></g><g><title>SerReadWriteMany&lt;CHashWriter, unsigned int&gt; (1,817 samples, 0.82%)</title><rect x="38.5586%" y="1397" width="0.8223%" height="15" fill="rgb(234,15,39)" fg:x="85199" fg:w="1817"/><text x="38.8086%" y="1407.50"></text></g><g><title>SerializeMany&lt;CHashWriter, unsigned int&gt; (1,817 samples, 0.82%)</title><rect x="38.5586%" y="1381" width="0.8223%" height="15" fill="rgb(207,66,16)" fg:x="85199" fg:w="1817"/><text x="38.8086%" y="1391.50"></text></g><g><title>Serialize&lt;CHashWriter&gt; (1,793 samples, 0.81%)</title><rect x="38.5694%" y="1365" width="0.8115%" height="15" fill="rgb(233,112,24)" fg:x="85223" fg:w="1793"/><text x="38.8194%" y="1375.50"></text></g><g><title>ser_writedata32&lt;CHashWriter&gt; (1,793 samples, 0.81%)</title><rect x="38.5694%" y="1349" width="0.8115%" height="15" fill="rgb(230,90,22)" fg:x="85223" fg:w="1793"/><text x="38.8194%" y="1359.50"></text></g><g><title>CHashWriter::write (1,793 samples, 0.81%)</title><rect x="38.5694%" y="1333" width="0.8115%" height="15" fill="rgb(229,61,13)" fg:x="85223" fg:w="1793"/><text x="38.8194%" y="1343.50"></text></g><g><title>CHash256::Write (1,793 samples, 0.81%)</title><rect x="38.5694%" y="1317" width="0.8115%" height="15" fill="rgb(225,57,24)" fg:x="85223" fg:w="1793"/><text x="38.8194%" y="1327.50"></text></g><g><title>CSHA256::Write (1,729 samples, 0.78%)</title><rect x="38.5984%" y="1301" width="0.7825%" height="15" fill="rgb(208,169,48)" fg:x="85287" fg:w="1729"/><text x="38.8484%" y="1311.50"></text></g><g><title>sigma1 (112 samples, 0.05%)</title><rect x="39.3302%" y="1285" width="0.0507%" height="15" fill="rgb(244,218,51)" fg:x="86904" fg:w="112"/><text x="39.5802%" y="1295.50"></text></g><g><title>Round (136 samples, 0.06%)</title><rect x="39.4112%" y="1397" width="0.0615%" height="15" fill="rgb(214,148,10)" fg:x="87083" fg:w="136"/><text x="39.6612%" y="1407.50"></text></g><g><title>sigma0 (34 samples, 0.02%)</title><rect x="39.4737%" y="1397" width="0.0154%" height="15" fill="rgb(225,174,27)" fg:x="87221" fg:w="34"/><text x="39.7237%" y="1407.50"></text></g><g><title>CSHA256::Write (267 samples, 0.12%)</title><rect x="39.3836%" y="1413" width="0.1208%" height="15" fill="rgb(230,96,26)" fg:x="87022" fg:w="267"/><text x="39.6336%" y="1423.50"></text></g><g><title>sigma1 (34 samples, 0.02%)</title><rect x="39.4890%" y="1397" width="0.0154%" height="15" fill="rgb(232,10,30)" fg:x="87255" fg:w="34"/><text x="39.7390%" y="1407.50"></text></g><g><title>CSHA256::Finalize (274 samples, 0.12%)</title><rect x="39.3822%" y="1429" width="0.1240%" height="15" fill="rgb(222,8,50)" fg:x="87019" fg:w="274"/><text x="39.6322%" y="1439.50"></text></g><g><title>CHash256::Finalize (280 samples, 0.13%)</title><rect x="39.3813%" y="1445" width="0.1267%" height="15" fill="rgb(213,81,27)" fg:x="87017" fg:w="280"/><text x="39.6313%" y="1455.50"></text></g><g><title>CHashWriter::GetHash (282 samples, 0.13%)</title><rect x="39.3813%" y="1461" width="0.1276%" height="15" fill="rgb(245,50,10)" fg:x="87017" fg:w="282"/><text x="39.6313%" y="1471.50"></text></g><g><title>Ch (41 samples, 0.02%)</title><rect x="39.9620%" y="1349" width="0.0186%" height="15" fill="rgb(216,100,18)" fg:x="88300" fg:w="41"/><text x="40.2120%" y="1359.50"></text></g><g><title>Maj (69 samples, 0.03%)</title><rect x="39.9805%" y="1349" width="0.0312%" height="15" fill="rgb(236,147,54)" fg:x="88341" fg:w="69"/><text x="40.2305%" y="1359.50"></text></g><g><title>Sigma0 (101 samples, 0.05%)</title><rect x="40.0118%" y="1349" width="0.0457%" height="15" fill="rgb(205,143,26)" fg:x="88410" fg:w="101"/><text x="40.2618%" y="1359.50"></text></g><g><title>Sigma1 (99 samples, 0.04%)</title><rect x="40.0575%" y="1349" width="0.0448%" height="15" fill="rgb(236,26,9)" fg:x="88511" fg:w="99"/><text x="40.3075%" y="1359.50"></text></g><g><title>Round (622 samples, 0.28%)</title><rect x="39.8212%" y="1365" width="0.2815%" height="15" fill="rgb(221,165,53)" fg:x="87989" fg:w="622"/><text x="40.0712%" y="1375.50"></text></g><g><title>[libc.so.6] (147 samples, 0.07%)</title><rect x="40.1082%" y="1365" width="0.0665%" height="15" fill="rgb(214,110,17)" fg:x="88623" fg:w="147"/><text x="40.3582%" y="1375.50"></text></g><g><title>sigma0 (189 samples, 0.09%)</title><rect x="40.1751%" y="1365" width="0.0855%" height="15" fill="rgb(237,197,12)" fg:x="88771" fg:w="189"/><text x="40.4251%" y="1375.50"></text></g><g><title>GetSequenceHash&lt;CTransaction&gt; (2,078 samples, 0.94%)</title><rect x="39.3809%" y="1477" width="0.9404%" height="15" fill="rgb(205,84,17)" fg:x="87016" fg:w="2078"/><text x="39.6309%" y="1487.50"></text></g><g><title>CHashWriter::operator&lt;&lt; &lt;unsigned int&gt; (1,795 samples, 0.81%)</title><rect x="39.5090%" y="1461" width="0.8124%" height="15" fill="rgb(237,18,45)" fg:x="87299" fg:w="1795"/><text x="39.7590%" y="1471.50"></text></g><g><title>Serialize&lt;CHashWriter&gt; (1,795 samples, 0.81%)</title><rect x="39.5090%" y="1445" width="0.8124%" height="15" fill="rgb(221,87,14)" fg:x="87299" fg:w="1795"/><text x="39.7590%" y="1455.50"></text></g><g><title>ser_writedata32&lt;CHashWriter&gt; (1,795 samples, 0.81%)</title><rect x="39.5090%" y="1429" width="0.8124%" height="15" fill="rgb(238,186,15)" fg:x="87299" fg:w="1795"/><text x="39.7590%" y="1439.50"></text></g><g><title>CHashWriter::write (1,795 samples, 0.81%)</title><rect x="39.5090%" y="1413" width="0.8124%" height="15" fill="rgb(208,115,11)" fg:x="87299" fg:w="1795"/><text x="39.7590%" y="1423.50"></text></g><g><title>CHash256::Write (1,795 samples, 0.81%)</title><rect x="39.5090%" y="1397" width="0.8124%" height="15" fill="rgb(254,175,0)" fg:x="87299" fg:w="1795"/><text x="39.7590%" y="1407.50"></text></g><g><title>CSHA256::Write (1,705 samples, 0.77%)</title><rect x="39.5497%" y="1381" width="0.7716%" height="15" fill="rgb(227,24,42)" fg:x="87389" fg:w="1705"/><text x="39.7997%" y="1391.50"></text></g><g><title>sigma1 (134 samples, 0.06%)</title><rect x="40.2607%" y="1365" width="0.0606%" height="15" fill="rgb(223,211,37)" fg:x="88960" fg:w="134"/><text x="40.5107%" y="1375.50"></text></g><g><title>PrecomputedTransactionData::PrecomputedTransactionData&lt;CTransaction&gt; (15,796 samples, 7.15%)</title><rect x="33.1820%" y="1493" width="7.1488%" height="15" fill="rgb(235,49,27)" fg:x="73319" fg:w="15796"/><text x="33.4320%" y="1503.50">Precompute..</text></g><g><title>PrecomputedTransactionData::PrecomputedTransactionData&lt;CTransaction&gt; (15,801 samples, 7.15%)</title><rect x="33.1807%" y="1509" width="7.1511%" height="15" fill="rgb(254,97,51)" fg:x="73316" fg:w="15801"/><text x="33.4307%" y="1519.50">Precompute..</text></g><g><title>std::_Vector_base&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_allocate (23 samples, 0.01%)</title><rect x="40.3688%" y="1445" width="0.0104%" height="15" fill="rgb(249,51,40)" fg:x="89199" fg:w="23"/><text x="40.6188%" y="1455.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::allocate (23 samples, 0.01%)</title><rect x="40.3688%" y="1429" width="0.0104%" height="15" fill="rgb(210,128,45)" fg:x="89199" fg:w="23"/><text x="40.6188%" y="1439.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::allocate (23 samples, 0.01%)</title><rect x="40.3688%" y="1413" width="0.0104%" height="15" fill="rgb(224,137,50)" fg:x="89199" fg:w="23"/><text x="40.6188%" y="1423.50"></text></g><g><title>operator new (23 samples, 0.01%)</title><rect x="40.3688%" y="1397" width="0.0104%" height="15" fill="rgb(242,15,9)" fg:x="89199" fg:w="23"/><text x="40.6188%" y="1407.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::push_back (60 samples, 0.03%)</title><rect x="40.3648%" y="1477" width="0.0272%" height="15" fill="rgb(233,187,41)" fg:x="89190" fg:w="60"/><text x="40.6148%" y="1487.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const&amp;&gt; (57 samples, 0.03%)</title><rect x="40.3661%" y="1461" width="0.0258%" height="15" fill="rgb(227,2,29)" fg:x="89193" fg:w="57"/><text x="40.6161%" y="1471.50"></text></g><g><title>EvalScript (114 samples, 0.05%)</title><rect x="40.3476%" y="1493" width="0.0516%" height="15" fill="rgb(222,70,3)" fg:x="89152" fg:w="114"/><text x="40.5976%" y="1503.50"></text></g><g><title>CScript::operator&lt;&lt; (23 samples, 0.01%)</title><rect x="40.4069%" y="1477" width="0.0104%" height="15" fill="rgb(213,11,42)" fg:x="89283" fg:w="23"/><text x="40.6569%" y="1487.50"></text></g><g><title>CRIPEMD160::Finalize (81 samples, 0.04%)</title><rect x="40.4304%" y="1429" width="0.0367%" height="15" fill="rgb(225,150,9)" fg:x="89335" fg:w="81"/><text x="40.6804%" y="1439.50"></text></g><g><title>CRIPEMD160::Write (79 samples, 0.04%)</title><rect x="40.4313%" y="1413" width="0.0358%" height="15" fill="rgb(230,162,45)" fg:x="89337" fg:w="79"/><text x="40.6813%" y="1423.50"></text></g><g><title>Round (66 samples, 0.03%)</title><rect x="40.4838%" y="1397" width="0.0299%" height="15" fill="rgb(222,14,52)" fg:x="89453" fg:w="66"/><text x="40.7338%" y="1407.50"></text></g><g><title>CHash160::Finalize (210 samples, 0.10%)</title><rect x="40.4286%" y="1445" width="0.0950%" height="15" fill="rgb(254,198,14)" fg:x="89331" fg:w="210"/><text x="40.6786%" y="1455.50"></text></g><g><title>CSHA256::Finalize (121 samples, 0.05%)</title><rect x="40.4689%" y="1429" width="0.0548%" height="15" fill="rgb(220,217,30)" fg:x="89420" fg:w="121"/><text x="40.7189%" y="1439.50"></text></g><g><title>CSHA256::Write (119 samples, 0.05%)</title><rect x="40.4698%" y="1413" width="0.0539%" height="15" fill="rgb(215,146,41)" fg:x="89422" fg:w="119"/><text x="40.7198%" y="1423.50"></text></g><g><title>CScript::GetOp (23 samples, 0.01%)</title><rect x="40.5277%" y="1445" width="0.0104%" height="15" fill="rgb(217,27,36)" fg:x="89550" fg:w="23"/><text x="40.7777%" y="1455.50"></text></g><g><title>GetScriptOp (23 samples, 0.01%)</title><rect x="40.5277%" y="1429" width="0.0104%" height="15" fill="rgb(219,218,39)" fg:x="89550" fg:w="23"/><text x="40.7777%" y="1439.50"></text></g><g><title>ecdsa_signature_parse_der_lax (25 samples, 0.01%)</title><rect x="40.5576%" y="1397" width="0.0113%" height="15" fill="rgb(219,4,42)" fg:x="89616" fg:w="25"/><text x="40.8076%" y="1407.50"></text></g><g><title>secp256k1_fe_sqr_inner (2,634 samples, 1.19%)</title><rect x="40.6150%" y="1301" width="1.1921%" height="15" fill="rgb(249,119,36)" fg:x="89743" fg:w="2634"/><text x="40.8650%" y="1311.50"></text></g><g><title>secp256k1_fe_sqr (2,742 samples, 1.24%)</title><rect x="40.6141%" y="1317" width="1.2409%" height="15" fill="rgb(209,23,33)" fg:x="89741" fg:w="2742"/><text x="40.8641%" y="1327.50"></text></g><g><title>secp256k1_ge_set_xo_var (106 samples, 0.05%)</title><rect x="41.8071%" y="1301" width="0.0480%" height="15" fill="rgb(211,10,0)" fg:x="92377" fg:w="106"/><text x="42.0571%" y="1311.50"></text></g><g><title>secp256k1_fe_mul_inner (199 samples, 0.09%)</title><rect x="41.8551%" y="1301" width="0.0901%" height="15" fill="rgb(208,99,37)" fg:x="92483" fg:w="199"/><text x="42.1051%" y="1311.50"></text></g><g><title>secp256k1_fe_sqrt (3,083 samples, 1.40%)</title><rect x="40.5874%" y="1333" width="1.3953%" height="15" fill="rgb(213,132,31)" fg:x="89682" fg:w="3083"/><text x="40.8374%" y="1343.50"></text></g><g><title>secp256k1_ge_set_xo_var (282 samples, 0.13%)</title><rect x="41.8551%" y="1317" width="0.1276%" height="15" fill="rgb(243,129,40)" fg:x="92483" fg:w="282"/><text x="42.1051%" y="1327.50"></text></g><g><title>secp256k1_fe_sqr_inner (76 samples, 0.03%)</title><rect x="41.9483%" y="1301" width="0.0344%" height="15" fill="rgb(210,66,33)" fg:x="92689" fg:w="76"/><text x="42.1983%" y="1311.50"></text></g><g><title>secp256k1_ge_set_xo_var (3,124 samples, 1.41%)</title><rect x="40.5702%" y="1365" width="1.4138%" height="15" fill="rgb(209,189,4)" fg:x="89644" fg:w="3124"/><text x="40.8202%" y="1375.50"></text></g><g><title>secp256k1_ge_set_xquad (3,111 samples, 1.41%)</title><rect x="40.5761%" y="1349" width="1.4079%" height="15" fill="rgb(214,107,37)" fg:x="89657" fg:w="3111"/><text x="40.8261%" y="1359.50"></text></g><g><title>secp256k1_ec_pubkey_parse (3,134 samples, 1.42%)</title><rect x="40.5702%" y="1381" width="1.4184%" height="15" fill="rgb(245,88,54)" fg:x="89644" fg:w="3134"/><text x="40.8202%" y="1391.50"></text></g><g><title>secp256k1_ec_pubkey_parse (3,150 samples, 1.43%)</title><rect x="40.5689%" y="1397" width="1.4256%" height="15" fill="rgb(205,146,20)" fg:x="89641" fg:w="3150"/><text x="40.8189%" y="1407.50"></text></g><g><title>secp256k1_fe_mul_inner (46 samples, 0.02%)</title><rect x="42.3869%" y="1269" width="0.0208%" height="15" fill="rgb(220,161,25)" fg:x="93658" fg:w="46"/><text x="42.6369%" y="1279.50"></text></g><g><title>secp256k1_ecmult_odd_multiples_table (112 samples, 0.05%)</title><rect x="42.3669%" y="1317" width="0.0507%" height="15" fill="rgb(215,152,15)" fg:x="93614" fg:w="112"/><text x="42.6169%" y="1327.50"></text></g><g><title>secp256k1_gej_double_var (95 samples, 0.04%)</title><rect x="42.3746%" y="1301" width="0.0430%" height="15" fill="rgb(233,192,44)" fg:x="93631" fg:w="95"/><text x="42.6246%" y="1311.50"></text></g><g><title>secp256k1_gej_double_var (70 samples, 0.03%)</title><rect x="42.3860%" y="1285" width="0.0317%" height="15" fill="rgb(240,170,46)" fg:x="93656" fg:w="70"/><text x="42.6360%" y="1295.50"></text></g><g><title>secp256k1_ecmult_odd_multiples_table (25 samples, 0.01%)</title><rect x="42.4176%" y="1301" width="0.0113%" height="15" fill="rgb(207,104,33)" fg:x="93726" fg:w="25"/><text x="42.6676%" y="1311.50"></text></g><g><title>secp256k1_fe_mul_inner (25 samples, 0.01%)</title><rect x="42.4176%" y="1285" width="0.0113%" height="15" fill="rgb(219,21,39)" fg:x="93726" fg:w="25"/><text x="42.6676%" y="1295.50"></text></g><g><title>secp256k1_ge_set_gej_zinv (65 samples, 0.03%)</title><rect x="42.4176%" y="1317" width="0.0294%" height="15" fill="rgb(214,133,29)" fg:x="93726" fg:w="65"/><text x="42.6676%" y="1327.50"></text></g><g><title>secp256k1_fe_normalize_weak (40 samples, 0.02%)</title><rect x="42.4556%" y="1301" width="0.0181%" height="15" fill="rgb(226,93,6)" fg:x="93810" fg:w="40"/><text x="42.7056%" y="1311.50"></text></g><g><title>secp256k1_fe_mul_inner (796 samples, 0.36%)</title><rect x="42.4973%" y="1285" width="0.3602%" height="15" fill="rgb(252,222,34)" fg:x="93902" fg:w="796"/><text x="42.7473%" y="1295.50"></text></g><g><title>secp256k1_gej_add_ge_var (1,077 samples, 0.49%)</title><rect x="42.4751%" y="1301" width="0.4874%" height="15" fill="rgb(252,92,48)" fg:x="93853" fg:w="1077"/><text x="42.7251%" y="1311.50"></text></g><g><title>secp256k1_fe_sqr_inner (232 samples, 0.10%)</title><rect x="42.8575%" y="1285" width="0.1050%" height="15" fill="rgb(245,223,24)" fg:x="94698" fg:w="232"/><text x="43.1075%" y="1295.50"></text></g><g><title>secp256k1_gej_add_ge_var (1,141 samples, 0.52%)</title><rect x="42.4470%" y="1317" width="0.5164%" height="15" fill="rgb(205,176,3)" fg:x="93791" fg:w="1141"/><text x="42.6970%" y="1327.50"></text></g><g><title>secp256k1_ecmult_odd_multiples_table (1,329 samples, 0.60%)</title><rect x="42.3624%" y="1333" width="0.6015%" height="15" fill="rgb(235,151,15)" fg:x="93604" fg:w="1329"/><text x="42.6124%" y="1343.50"></text></g><g><title>secp256k1_fe_add (192 samples, 0.09%)</title><rect x="43.3707%" y="1301" width="0.0869%" height="15" fill="rgb(237,209,11)" fg:x="95832" fg:w="192"/><text x="43.6207%" y="1311.50"></text></g><g><title>secp256k1_fe_mul (53 samples, 0.02%)</title><rect x="43.4576%" y="1301" width="0.0240%" height="15" fill="rgb(243,227,24)" fg:x="96024" fg:w="53"/><text x="43.7076%" y="1311.50"></text></g><g><title>secp256k1_fe_mul_int (427 samples, 0.19%)</title><rect x="43.4816%" y="1301" width="0.1932%" height="15" fill="rgb(239,193,16)" fg:x="96077" fg:w="427"/><text x="43.7316%" y="1311.50"></text></g><g><title>secp256k1_fe_sqr_inner (5,204 samples, 2.36%)</title><rect x="43.8147%" y="1285" width="2.3552%" height="15" fill="rgb(231,27,9)" fg:x="96813" fg:w="5204"/><text x="44.0647%" y="1295.50">s..</text></g><g><title>secp256k1_fe_sqr (5,705 samples, 2.58%)</title><rect x="43.6830%" y="1301" width="2.5819%" height="15" fill="rgb(219,169,10)" fg:x="96522" fg:w="5705"/><text x="43.9330%" y="1311.50">se..</text></g><g><title>secp256k1_gej_double_var (210 samples, 0.10%)</title><rect x="46.1699%" y="1285" width="0.0950%" height="15" fill="rgb(244,229,43)" fg:x="102017" fg:w="210"/><text x="46.4199%" y="1295.50"></text></g><g><title>secp256k1_fe_mul_inner (10,323 samples, 4.67%)</title><rect x="46.5437%" y="1285" width="4.6719%" height="15" fill="rgb(254,38,20)" fg:x="102843" fg:w="10323"/><text x="46.7937%" y="1295.50">secp2..</text></g><g><title>secp256k1_ecmult_strauss_wnaf (24,053 samples, 10.89%)</title><rect x="42.9639%" y="1333" width="10.8857%" height="15" fill="rgb(250,47,30)" fg:x="94933" fg:w="24053"/><text x="43.2139%" y="1343.50">secp256k1_ecmult..</text></g><g><title>secp256k1_gej_double_var (23,948 samples, 10.84%)</title><rect x="43.0114%" y="1317" width="10.8382%" height="15" fill="rgb(224,124,36)" fg:x="95038" fg:w="23948"/><text x="43.2614%" y="1327.50">secp256k1_gej_do..</text></g><g><title>secp256k1_gej_double_var (16,759 samples, 7.58%)</title><rect x="46.2649%" y="1301" width="7.5846%" height="15" fill="rgb(246,68,51)" fg:x="102227" fg:w="16759"/><text x="46.5149%" y="1311.50">secp256k1_..</text></g><g><title>secp256k1_fe_sqr_inner (5,820 samples, 2.63%)</title><rect x="51.2156%" y="1285" width="2.6340%" height="15" fill="rgb(253,43,49)" fg:x="113166" fg:w="5820"/><text x="51.4656%" y="1295.50">se..</text></g><g><title>secp256k1_ecmult_wnaf (61 samples, 0.03%)</title><rect x="53.9668%" y="1317" width="0.0276%" height="15" fill="rgb(219,54,36)" fg:x="119245" fg:w="61"/><text x="54.2168%" y="1327.50"></text></g><g><title>secp256k1_ecmult_wnaf (50 samples, 0.02%)</title><rect x="54.0084%" y="1301" width="0.0226%" height="15" fill="rgb(227,133,34)" fg:x="119337" fg:w="50"/><text x="54.2584%" y="1311.50"></text></g><g><title>secp256k1_scalar_get_bits_var (78 samples, 0.04%)</title><rect x="53.9998%" y="1317" width="0.0353%" height="15" fill="rgb(247,227,15)" fg:x="119318" fg:w="78"/><text x="54.2498%" y="1327.50"></text></g><g><title>secp256k1_ecmult_wnaf (413 samples, 0.19%)</title><rect x="53.8496%" y="1333" width="0.1869%" height="15" fill="rgb(229,96,14)" fg:x="118986" fg:w="413"/><text x="54.0996%" y="1343.50"></text></g><g><title>secp256k1_fe_negate (49 samples, 0.02%)</title><rect x="54.0365%" y="1333" width="0.0222%" height="15" fill="rgb(220,79,17)" fg:x="119399" fg:w="49"/><text x="54.2865%" y="1343.50"></text></g><g><title>secp256k1_ecmult_strauss_wnaf (866 samples, 0.39%)</title><rect x="54.0587%" y="1317" width="0.3919%" height="15" fill="rgb(205,131,53)" fg:x="119448" fg:w="866"/><text x="54.3087%" y="1327.50"></text></g><g><title>secp256k1_ge_from_storage (921 samples, 0.42%)</title><rect x="54.0587%" y="1333" width="0.4168%" height="15" fill="rgb(209,50,29)" fg:x="119448" fg:w="921"/><text x="54.3087%" y="1343.50"></text></g><g><title>secp256k1_fe_from_storage (55 samples, 0.02%)</title><rect x="54.4506%" y="1317" width="0.0249%" height="15" fill="rgb(245,86,46)" fg:x="120314" fg:w="55"/><text x="54.7006%" y="1327.50"></text></g><g><title>secp256k1_ecmult_strauss_wnaf (70 samples, 0.03%)</title><rect x="54.4773%" y="1317" width="0.0317%" height="15" fill="rgb(235,66,46)" fg:x="120373" fg:w="70"/><text x="54.7273%" y="1327.50"></text></g><g><title>secp256k1_fe_mul_inner (70 samples, 0.03%)</title><rect x="54.4773%" y="1301" width="0.0317%" height="15" fill="rgb(232,148,31)" fg:x="120373" fg:w="70"/><text x="54.7273%" y="1311.50"></text></g><g><title>secp256k1_fe_mul_inner (307 samples, 0.14%)</title><rect x="54.5094%" y="1285" width="0.1389%" height="15" fill="rgb(217,149,8)" fg:x="120444" fg:w="307"/><text x="54.7594%" y="1295.50"></text></g><g><title>secp256k1_ecmult_strauss_wnaf (405 samples, 0.18%)</title><rect x="54.5094%" y="1301" width="0.1833%" height="15" fill="rgb(209,183,11)" fg:x="120444" fg:w="405"/><text x="54.7594%" y="1311.50"></text></g><g><title>secp256k1_fe_sqr_inner (98 samples, 0.04%)</title><rect x="54.6484%" y="1285" width="0.0444%" height="15" fill="rgb(208,55,20)" fg:x="120751" fg:w="98"/><text x="54.8984%" y="1295.50"></text></g><g><title>secp256k1_ge_globalz_set_table_gej (481 samples, 0.22%)</title><rect x="54.4755%" y="1333" width="0.2177%" height="15" fill="rgb(218,39,14)" fg:x="120369" fg:w="481"/><text x="54.7255%" y="1343.50"></text></g><g><title>secp256k1_ge_set_gej_zinv (406 samples, 0.18%)</title><rect x="54.5094%" y="1317" width="0.1837%" height="15" fill="rgb(216,169,33)" fg:x="120444" fg:w="406"/><text x="54.7594%" y="1327.50"></text></g><g><title>secp256k1_fe_add (59 samples, 0.03%)</title><rect x="54.7185%" y="1317" width="0.0267%" height="15" fill="rgb(233,80,24)" fg:x="120906" fg:w="59"/><text x="54.9685%" y="1327.50"></text></g><g><title>secp256k1_fe_normalize_weak (223 samples, 0.10%)</title><rect x="54.7533%" y="1317" width="0.1009%" height="15" fill="rgb(213,179,31)" fg:x="120983" fg:w="223"/><text x="55.0033%" y="1327.50"></text></g><g><title>secp256k1_fe_mul_inner (4,556 samples, 2.06%)</title><rect x="55.1150%" y="1301" width="2.0619%" height="15" fill="rgb(209,19,5)" fg:x="121782" fg:w="4556"/><text x="55.3650%" y="1311.50">s..</text></g><g><title>secp256k1_gej_add_ge_var (6,440 samples, 2.91%)</title><rect x="54.8678%" y="1317" width="2.9146%" height="15" fill="rgb(219,18,35)" fg:x="121236" fg:w="6440"/><text x="55.1178%" y="1327.50">se..</text></g><g><title>secp256k1_fe_sqr_inner (1,338 samples, 0.61%)</title><rect x="57.1769%" y="1301" width="0.6055%" height="15" fill="rgb(209,169,16)" fg:x="126338" fg:w="1338"/><text x="57.4269%" y="1311.50"></text></g><g><title>secp256k1_gej_add_ge_var (6,829 samples, 3.09%)</title><rect x="54.6932%" y="1333" width="3.0906%" height="15" fill="rgb(245,90,51)" fg:x="120850" fg:w="6829"/><text x="54.9432%" y="1343.50">sec..</text></g><g><title>secp256k1_fe_mul_inner (1,812 samples, 0.82%)</title><rect x="57.8186%" y="1301" width="0.8201%" height="15" fill="rgb(220,99,45)" fg:x="127756" fg:w="1812"/><text x="58.0686%" y="1311.50"></text></g><g><title>secp256k1_ecmult_strauss_wnaf (2,434 samples, 1.10%)</title><rect x="57.7892%" y="1317" width="1.1016%" height="15" fill="rgb(249,89,25)" fg:x="127691" fg:w="2434"/><text x="58.0392%" y="1327.50"></text></g><g><title>secp256k1_fe_sqr_inner (557 samples, 0.25%)</title><rect x="58.6387%" y="1301" width="0.2521%" height="15" fill="rgb(239,193,0)" fg:x="129568" fg:w="557"/><text x="58.8887%" y="1311.50"></text></g><g><title>secp256k1_fe_add (42 samples, 0.02%)</title><rect x="58.8907%" y="1317" width="0.0190%" height="15" fill="rgb(231,126,1)" fg:x="130125" fg:w="42"/><text x="59.1407%" y="1327.50"></text></g><g><title>secp256k1_fe_normalize_weak (80 samples, 0.04%)</title><rect x="58.9125%" y="1317" width="0.0362%" height="15" fill="rgb(243,166,3)" fg:x="130173" fg:w="80"/><text x="59.1625%" y="1327.50"></text></g><g><title>secp256k1_gej_add_zinv_var (2,581 samples, 1.17%)</title><rect x="57.7838%" y="1333" width="1.1681%" height="15" fill="rgb(223,22,34)" fg:x="127679" fg:w="2581"/><text x="58.0338%" y="1343.50"></text></g><g><title>secp256k1_ecmult_strauss_wnaf (37,483 samples, 16.96%)</title><rect x="41.9986%" y="1349" width="16.9637%" height="15" fill="rgb(251,52,51)" fg:x="92800" fg:w="37483"/><text x="42.2486%" y="1359.50">secp256k1_ecmult_strauss_w..</text></g><g><title>secp256k1_gej_double_var (23 samples, 0.01%)</title><rect x="58.9518%" y="1333" width="0.0104%" height="15" fill="rgb(221,165,28)" fg:x="130260" fg:w="23"/><text x="59.2018%" y="1343.50"></text></g><g><title>secp256k1_scalar_mul_512 (155 samples, 0.07%)</title><rect x="58.9790%" y="1317" width="0.0701%" height="15" fill="rgb(218,121,47)" fg:x="130320" fg:w="155"/><text x="59.2290%" y="1327.50"></text></g><g><title>secp256k1_scalar_check_overflow (81 samples, 0.04%)</title><rect x="59.7764%" y="1301" width="0.0367%" height="15" fill="rgb(209,120,9)" fg:x="132082" fg:w="81"/><text x="60.0264%" y="1311.50"></text></g><g><title>secp256k1_scalar_reduce (158 samples, 0.07%)</title><rect x="59.8131%" y="1301" width="0.0715%" height="15" fill="rgb(236,68,12)" fg:x="132163" fg:w="158"/><text x="60.0631%" y="1311.50"></text></g><g><title>secp256k1_scalar_reduce_512 (1,972 samples, 0.89%)</title><rect x="59.0491%" y="1317" width="0.8925%" height="15" fill="rgb(225,194,26)" fg:x="130475" fg:w="1972"/><text x="59.2991%" y="1327.50"></text></g><g><title>secp256k1_scalar_reduce_512 (126 samples, 0.06%)</title><rect x="59.8846%" y="1301" width="0.0570%" height="15" fill="rgb(231,84,39)" fg:x="132321" fg:w="126"/><text x="60.1346%" y="1311.50"></text></g><g><title>secp256k1_scalar_inverse (2,712 samples, 1.23%)</title><rect x="58.9749%" y="1333" width="1.2274%" height="15" fill="rgb(210,11,45)" fg:x="130311" fg:w="2712"/><text x="59.2249%" y="1343.50"></text></g><g><title>secp256k1_scalar_sqr_512 (576 samples, 0.26%)</title><rect x="59.9416%" y="1317" width="0.2607%" height="15" fill="rgb(224,54,52)" fg:x="132447" fg:w="576"/><text x="60.1916%" y="1327.50"></text></g><g><title>secp256k1_scalar_mul_512 (198 samples, 0.09%)</title><rect x="60.2118%" y="1317" width="0.0896%" height="15" fill="rgb(238,102,14)" fg:x="133044" fg:w="198"/><text x="60.4618%" y="1327.50"></text></g><g><title>secp256k1_scalar_mul (425 samples, 0.19%)</title><rect x="60.2023%" y="1333" width="0.1923%" height="15" fill="rgb(243,160,52)" fg:x="133023" fg:w="425"/><text x="60.4523%" y="1343.50"></text></g><g><title>secp256k1_scalar_reduce_512 (206 samples, 0.09%)</title><rect x="60.3014%" y="1317" width="0.0932%" height="15" fill="rgb(216,114,19)" fg:x="133242" fg:w="206"/><text x="60.5514%" y="1327.50"></text></g><g><title>secp256k1_scalar_check_overflow (79 samples, 0.04%)</title><rect x="61.0767%" y="1301" width="0.0358%" height="15" fill="rgb(244,166,37)" fg:x="134955" fg:w="79"/><text x="61.3267%" y="1311.50"></text></g><g><title>secp256k1_scalar_reduce (145 samples, 0.07%)</title><rect x="61.1124%" y="1301" width="0.0656%" height="15" fill="rgb(246,29,44)" fg:x="135034" fg:w="145"/><text x="61.3624%" y="1311.50"></text></g><g><title>secp256k1_scalar_reduce_512 (1,852 samples, 0.84%)</title><rect x="60.4100%" y="1317" width="0.8382%" height="15" fill="rgb(215,56,53)" fg:x="133482" fg:w="1852"/><text x="60.6600%" y="1327.50"></text></g><g><title>secp256k1_scalar_reduce_512 (155 samples, 0.07%)</title><rect x="61.1780%" y="1301" width="0.0701%" height="15" fill="rgb(217,60,2)" fg:x="135179" fg:w="155"/><text x="61.4280%" y="1311.50"></text></g><g><title>secp256k1_scalar_inverse (6,386 samples, 2.89%)</title><rect x="58.9623%" y="1349" width="2.8901%" height="15" fill="rgb(207,26,24)" fg:x="130283" fg:w="6386"/><text x="59.2123%" y="1359.50">se..</text></g><g><title>secp256k1_scalar_sqr (3,221 samples, 1.46%)</title><rect x="60.3946%" y="1333" width="1.4577%" height="15" fill="rgb(252,210,15)" fg:x="133448" fg:w="3221"/><text x="60.6446%" y="1343.50"></text></g><g><title>secp256k1_scalar_sqr_512 (1,335 samples, 0.60%)</title><rect x="61.2482%" y="1317" width="0.6042%" height="15" fill="rgb(253,209,26)" fg:x="135334" fg:w="1335"/><text x="61.4982%" y="1327.50"></text></g><g><title>secp256k1_ecdsa_sig_verify (43,908 samples, 19.87%)</title><rect x="41.9963%" y="1365" width="19.8715%" height="15" fill="rgb(238,170,14)" fg:x="92795" fg:w="43908"/><text x="42.2463%" y="1375.50">secp256k1_ecdsa_sig_verify</text></g><g><title>secp256k1_scalar_reduce_512 (34 samples, 0.02%)</title><rect x="61.8524%" y="1349" width="0.0154%" height="15" fill="rgb(216,178,15)" fg:x="136669" fg:w="34"/><text x="62.1024%" y="1359.50"></text></g><g><title>secp256k1_gej_eq_x_var (32 samples, 0.01%)</title><rect x="61.8705%" y="1365" width="0.0145%" height="15" fill="rgb(250,197,2)" fg:x="136709" fg:w="32"/><text x="62.1205%" y="1375.50"></text></g><g><title>secp256k1_ecdsa_sig_verify (43,976 samples, 19.90%)</title><rect x="41.9963%" y="1381" width="19.9022%" height="15" fill="rgb(212,70,42)" fg:x="92795" fg:w="43976"/><text x="42.2463%" y="1391.50">secp256k1_ecdsa_sig_verify</text></g><g><title>secp256k1_scalar_mul (28 samples, 0.01%)</title><rect x="61.8859%" y="1365" width="0.0127%" height="15" fill="rgb(227,213,9)" fg:x="136743" fg:w="28"/><text x="62.1359%" y="1375.50"></text></g><g><title>secp256k1_scalar_mul_512 (26 samples, 0.01%)</title><rect x="61.8868%" y="1349" width="0.0118%" height="15" fill="rgb(245,99,25)" fg:x="136745" fg:w="26"/><text x="62.1368%" y="1359.50"></text></g><g><title>GenericTransactionSignatureChecker&lt;CTransaction&gt;::VerifySignature (47,190 samples, 21.36%)</title><rect x="40.5508%" y="1429" width="21.3568%" height="15" fill="rgb(250,82,29)" fg:x="89601" fg:w="47190"/><text x="40.8008%" y="1439.50">GenericTransactionSignatureChecker..</text></g><g><title>CPubKey::Verify (47,190 samples, 21.36%)</title><rect x="40.5508%" y="1413" width="21.3568%" height="15" fill="rgb(241,226,54)" fg:x="89601" fg:w="47190"/><text x="40.8008%" y="1423.50">CPubKey::Verify</text></g><g><title>secp256k1_ecdsa_verify (44,000 samples, 19.91%)</title><rect x="41.9945%" y="1397" width="19.9131%" height="15" fill="rgb(221,99,41)" fg:x="92791" fg:w="44000"/><text x="42.2445%" y="1407.50">secp256k1_ecdsa_verify</text></g><g><title>Sigma0 (24 samples, 0.01%)</title><rect x="61.9814%" y="1333" width="0.0109%" height="15" fill="rgb(213,90,21)" fg:x="136954" fg:w="24"/><text x="62.2314%" y="1343.50"></text></g><g><title>Round (117 samples, 0.05%)</title><rect x="61.9483%" y="1349" width="0.0530%" height="15" fill="rgb(205,208,24)" fg:x="136881" fg:w="117"/><text x="62.1983%" y="1359.50"></text></g><g><title>sigma0 (32 samples, 0.01%)</title><rect x="62.0031%" y="1349" width="0.0145%" height="15" fill="rgb(246,31,12)" fg:x="137002" fg:w="32"/><text x="62.2531%" y="1359.50"></text></g><g><title>CSHA256::Write (265 samples, 0.12%)</title><rect x="61.9103%" y="1365" width="0.1199%" height="15" fill="rgb(213,154,6)" fg:x="136797" fg:w="265"/><text x="62.1603%" y="1375.50"></text></g><g><title>sigma1 (28 samples, 0.01%)</title><rect x="62.0176%" y="1349" width="0.0127%" height="15" fill="rgb(222,163,29)" fg:x="137034" fg:w="28"/><text x="62.2676%" y="1359.50"></text></g><g><title>CSHA256::Finalize (266 samples, 0.12%)</title><rect x="61.9103%" y="1381" width="0.1204%" height="15" fill="rgb(227,201,8)" fg:x="136797" fg:w="266"/><text x="62.1603%" y="1391.50"></text></g><g><title>CHash256::Finalize (271 samples, 0.12%)</title><rect x="61.9103%" y="1397" width="0.1226%" height="15" fill="rgb(233,9,32)" fg:x="136797" fg:w="271"/><text x="62.1603%" y="1407.50"></text></g><g><title>CHashWriter::GetHash (272 samples, 0.12%)</title><rect x="61.9103%" y="1413" width="0.1231%" height="15" fill="rgb(217,54,24)" fg:x="136797" fg:w="272"/><text x="62.1603%" y="1423.50"></text></g><g><title>Round (59 samples, 0.03%)</title><rect x="62.0501%" y="1285" width="0.0267%" height="15" fill="rgb(235,192,0)" fg:x="137106" fg:w="59"/><text x="62.3001%" y="1295.50"></text></g><g><title>CSHA256::Write (121 samples, 0.05%)</title><rect x="62.0352%" y="1301" width="0.0548%" height="15" fill="rgb(235,45,9)" fg:x="137073" fg:w="121"/><text x="62.2852%" y="1311.50"></text></g><g><title>CHashWriter::operator&lt;&lt; &lt;CScript&gt; (127 samples, 0.06%)</title><rect x="62.0352%" y="1413" width="0.0575%" height="15" fill="rgb(246,42,40)" fg:x="137073" fg:w="127"/><text x="62.2852%" y="1423.50"></text></g><g><title>Serialize&lt;CHashWriter, CScript&gt; (127 samples, 0.06%)</title><rect x="62.0352%" y="1397" width="0.0575%" height="15" fill="rgb(248,111,24)" fg:x="137073" fg:w="127"/><text x="62.2852%" y="1407.50"></text></g><g><title>CScript::Serialize&lt;CHashWriter&gt; (127 samples, 0.06%)</title><rect x="62.0352%" y="1381" width="0.0575%" height="15" fill="rgb(249,65,22)" fg:x="137073" fg:w="127"/><text x="62.2852%" y="1391.50"></text></g><g><title>CScript::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (127 samples, 0.06%)</title><rect x="62.0352%" y="1365" width="0.0575%" height="15" fill="rgb(238,111,51)" fg:x="137073" fg:w="127"/><text x="62.2852%" y="1375.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (127 samples, 0.06%)</title><rect x="62.0352%" y="1349" width="0.0575%" height="15" fill="rgb(250,118,22)" fg:x="137073" fg:w="127"/><text x="62.2852%" y="1359.50"></text></g><g><title>SerializeMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (127 samples, 0.06%)</title><rect x="62.0352%" y="1333" width="0.0575%" height="15" fill="rgb(234,84,26)" fg:x="137073" fg:w="127"/><text x="62.2852%" y="1343.50"></text></g><g><title>Serialize&lt;CHashWriter, 28u, unsigned char&gt; (127 samples, 0.06%)</title><rect x="62.0352%" y="1317" width="0.0575%" height="15" fill="rgb(243,172,12)" fg:x="137073" fg:w="127"/><text x="62.2852%" y="1327.50"></text></g><g><title>Round (69 samples, 0.03%)</title><rect x="62.1158%" y="1317" width="0.0312%" height="15" fill="rgb(236,150,49)" fg:x="137251" fg:w="69"/><text x="62.3658%" y="1327.50"></text></g><g><title>CHashWriter::operator&lt;&lt; &lt;uint256&gt; (135 samples, 0.06%)</title><rect x="62.0977%" y="1413" width="0.0611%" height="15" fill="rgb(225,197,26)" fg:x="137211" fg:w="135"/><text x="62.3477%" y="1423.50"></text></g><g><title>Serialize&lt;CHashWriter, uint256&gt; (135 samples, 0.06%)</title><rect x="62.0977%" y="1397" width="0.0611%" height="15" fill="rgb(214,17,42)" fg:x="137211" fg:w="135"/><text x="62.3477%" y="1407.50"></text></g><g><title>base_blob&lt;256u&gt;::Serialize&lt;CHashWriter&gt; (135 samples, 0.06%)</title><rect x="62.0977%" y="1381" width="0.0611%" height="15" fill="rgb(224,165,40)" fg:x="137211" fg:w="135"/><text x="62.3477%" y="1391.50"></text></g><g><title>CHashWriter::write (135 samples, 0.06%)</title><rect x="62.0977%" y="1365" width="0.0611%" height="15" fill="rgb(246,100,4)" fg:x="137211" fg:w="135"/><text x="62.3477%" y="1375.50"></text></g><g><title>CHash256::Write (135 samples, 0.06%)</title><rect x="62.0977%" y="1349" width="0.0611%" height="15" fill="rgb(222,103,0)" fg:x="137211" fg:w="135"/><text x="62.3477%" y="1359.50"></text></g><g><title>CSHA256::Write (135 samples, 0.06%)</title><rect x="62.0977%" y="1333" width="0.0611%" height="15" fill="rgb(227,189,26)" fg:x="137211" fg:w="135"/><text x="62.3477%" y="1343.50"></text></g><g><title>SignatureHash&lt;CTransaction&gt; (572 samples, 0.26%)</title><rect x="61.9076%" y="1429" width="0.2589%" height="15" fill="rgb(214,202,17)" fg:x="136791" fg:w="572"/><text x="62.1576%" y="1439.50"></text></g><g><title>GenericTransactionSignatureChecker&lt;CTransaction&gt;::CheckSig (47,799 samples, 21.63%)</title><rect x="40.5435%" y="1445" width="21.6324%" height="15" fill="rgb(229,111,3)" fg:x="89585" fg:w="47799"/><text x="40.7935%" y="1455.50">GenericTransactionSignatureChecker..</text></g><g><title>cfree (23 samples, 0.01%)</title><rect x="62.1787%" y="1301" width="0.0104%" height="15" fill="rgb(229,172,15)" fg:x="137390" fg:w="23"/><text x="62.4287%" y="1311.50"></text></g><g><title>popstack (31 samples, 0.01%)</title><rect x="62.1760%" y="1445" width="0.0140%" height="15" fill="rgb(230,224,35)" fg:x="137384" fg:w="31"/><text x="62.4260%" y="1455.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::pop_back (28 samples, 0.01%)</title><rect x="62.1773%" y="1429" width="0.0127%" height="15" fill="rgb(251,141,6)" fg:x="137387" fg:w="28"/><text x="62.4273%" y="1439.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (25 samples, 0.01%)</title><rect x="62.1787%" y="1413" width="0.0113%" height="15" fill="rgb(225,208,6)" fg:x="137390" fg:w="25"/><text x="62.4287%" y="1423.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::destroy&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (25 samples, 0.01%)</title><rect x="62.1787%" y="1397" width="0.0113%" height="15" fill="rgb(246,181,16)" fg:x="137390" fg:w="25"/><text x="62.4287%" y="1407.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~vector (25 samples, 0.01%)</title><rect x="62.1787%" y="1381" width="0.0113%" height="15" fill="rgb(227,129,36)" fg:x="137390" fg:w="25"/><text x="62.4287%" y="1391.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::~_Vector_base (25 samples, 0.01%)</title><rect x="62.1787%" y="1365" width="0.0113%" height="15" fill="rgb(248,117,24)" fg:x="137390" fg:w="25"/><text x="62.4287%" y="1375.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_deallocate (25 samples, 0.01%)</title><rect x="62.1787%" y="1349" width="0.0113%" height="15" fill="rgb(214,185,35)" fg:x="137390" fg:w="25"/><text x="62.4287%" y="1359.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::deallocate (25 samples, 0.01%)</title><rect x="62.1787%" y="1333" width="0.0113%" height="15" fill="rgb(236,150,34)" fg:x="137390" fg:w="25"/><text x="62.4287%" y="1343.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::deallocate (25 samples, 0.01%)</title><rect x="62.1787%" y="1317" width="0.0113%" height="15" fill="rgb(243,228,27)" fg:x="137390" fg:w="25"/><text x="62.4287%" y="1327.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_create_storage (25 samples, 0.01%)</title><rect x="62.1927%" y="1365" width="0.0113%" height="15" fill="rgb(245,77,44)" fg:x="137421" fg:w="25"/><text x="62.4427%" y="1375.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_allocate (25 samples, 0.01%)</title><rect x="62.1927%" y="1349" width="0.0113%" height="15" fill="rgb(235,214,42)" fg:x="137421" fg:w="25"/><text x="62.4427%" y="1359.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;unsigned char&gt; &gt;::allocate (24 samples, 0.01%)</title><rect x="62.1932%" y="1333" width="0.0109%" height="15" fill="rgb(221,74,3)" fg:x="137422" fg:w="24"/><text x="62.4432%" y="1343.50"></text></g><g><title>std::__new_allocator&lt;unsigned char&gt;::allocate (24 samples, 0.01%)</title><rect x="62.1932%" y="1317" width="0.0109%" height="15" fill="rgb(206,121,29)" fg:x="137422" fg:w="24"/><text x="62.4432%" y="1327.50"></text></g><g><title>operator new (24 samples, 0.01%)</title><rect x="62.1932%" y="1301" width="0.0109%" height="15" fill="rgb(249,131,53)" fg:x="137422" fg:w="24"/><text x="62.4432%" y="1311.50"></text></g><g><title>std::_Vector_base&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_Vector_base (26 samples, 0.01%)</title><rect x="62.1927%" y="1381" width="0.0118%" height="15" fill="rgb(236,170,29)" fg:x="137421" fg:w="26"/><text x="62.4427%" y="1391.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const&amp;&gt; (43 samples, 0.02%)</title><rect x="62.1927%" y="1429" width="0.0195%" height="15" fill="rgb(247,96,15)" fg:x="137421" fg:w="43"/><text x="62.4427%" y="1439.50"></text></g><g><title>std::__new_allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::construct&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const&amp;&gt; (43 samples, 0.02%)</title><rect x="62.1927%" y="1413" width="0.0195%" height="15" fill="rgb(211,210,7)" fg:x="137421" fg:w="43"/><text x="62.4427%" y="1423.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::vector (43 samples, 0.02%)</title><rect x="62.1927%" y="1397" width="0.0195%" height="15" fill="rgb(240,88,50)" fg:x="137421" fg:w="43"/><text x="62.4427%" y="1407.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::push_back (68 samples, 0.03%)</title><rect x="62.1927%" y="1445" width="0.0308%" height="15" fill="rgb(209,229,26)" fg:x="137421" fg:w="68"/><text x="62.4427%" y="1455.50"></text></g><g><title>EvalScript (48,241 samples, 21.83%)</title><rect x="40.4191%" y="1461" width="21.8325%" height="15" fill="rgb(210,68,23)" fg:x="89310" fg:w="48241"/><text x="40.6691%" y="1471.50">EvalScript</text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const*, void&gt; (32 samples, 0.01%)</title><rect x="62.2520%" y="1461" width="0.0145%" height="15" fill="rgb(229,180,13)" fg:x="137552" fg:w="32"/><text x="62.5020%" y="1471.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::_M_range_initialize&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const*&gt; (30 samples, 0.01%)</title><rect x="62.2529%" y="1445" width="0.0136%" height="15" fill="rgb(236,53,44)" fg:x="137554" fg:w="30"/><text x="62.5029%" y="1455.50"></text></g><g><title>ExecuteWitnessScript (48,293 samples, 21.86%)</title><rect x="40.4177%" y="1477" width="21.8560%" height="15" fill="rgb(244,214,29)" fg:x="89307" fg:w="48293"/><text x="40.6677%" y="1487.50">ExecuteWitnessScript</text></g><g><title>VerifyWitnessProgram (48,335 samples, 21.88%)</title><rect x="40.3992%" y="1493" width="21.8750%" height="15" fill="rgb(220,75,29)" fg:x="89266" fg:w="48335"/><text x="40.6492%" y="1503.50">VerifyWitnessProgram</text></g><g><title>VerifyScript (48,512 samples, 21.96%)</title><rect x="40.3317%" y="1509" width="21.9551%" height="15" fill="rgb(214,183,37)" fg:x="89117" fg:w="48512"/><text x="40.5817%" y="1519.50">VerifyScript</text></g><g><title>Round (117 samples, 0.05%)</title><rect x="62.3312%" y="1381" width="0.0530%" height="15" fill="rgb(239,117,29)" fg:x="137727" fg:w="117"/><text x="62.5812%" y="1391.50"></text></g><g><title>sigma0 (43 samples, 0.02%)</title><rect x="62.3896%" y="1381" width="0.0195%" height="15" fill="rgb(237,171,35)" fg:x="137856" fg:w="43"/><text x="62.6396%" y="1391.50"></text></g><g><title>CSHA256::Write (275 samples, 0.12%)</title><rect x="62.2941%" y="1397" width="0.1245%" height="15" fill="rgb(229,178,53)" fg:x="137645" fg:w="275"/><text x="62.5441%" y="1407.50"></text></g><g><title>CSHA256::Finalize (283 samples, 0.13%)</title><rect x="62.2932%" y="1413" width="0.1281%" height="15" fill="rgb(210,102,19)" fg:x="137643" fg:w="283"/><text x="62.5432%" y="1423.50"></text></g><g><title>CHash256::Finalize (289 samples, 0.13%)</title><rect x="62.2927%" y="1429" width="0.1308%" height="15" fill="rgb(235,127,22)" fg:x="137642" fg:w="289"/><text x="62.5427%" y="1439.50"></text></g><g><title>CHashWriter::GetHash (292 samples, 0.13%)</title><rect x="62.2927%" y="1445" width="0.1322%" height="15" fill="rgb(244,31,31)" fg:x="137642" fg:w="292"/><text x="62.5427%" y="1455.50"></text></g><g><title>ReadBE32 (125 samples, 0.06%)</title><rect x="64.0600%" y="1029" width="0.0566%" height="15" fill="rgb(231,43,21)" fg:x="141547" fg:w="125"/><text x="64.3100%" y="1039.50"></text></g><g><title>Ch (285 samples, 0.13%)</title><rect x="65.4023%" y="1013" width="0.1290%" height="15" fill="rgb(217,131,35)" fg:x="144513" fg:w="285"/><text x="65.6523%" y="1023.50"></text></g><g><title>Maj (614 samples, 0.28%)</title><rect x="65.5313%" y="1013" width="0.2779%" height="15" fill="rgb(221,149,4)" fg:x="144798" fg:w="614"/><text x="65.7813%" y="1023.50"></text></g><g><title>Sigma0 (799 samples, 0.36%)</title><rect x="65.8092%" y="1013" width="0.3616%" height="15" fill="rgb(232,170,28)" fg:x="145412" fg:w="799"/><text x="66.0592%" y="1023.50"></text></g><g><title>Sigma1 (721 samples, 0.33%)</title><rect x="66.1708%" y="1013" width="0.3263%" height="15" fill="rgb(238,56,10)" fg:x="146211" fg:w="721"/><text x="66.4208%" y="1023.50"></text></g><g><title>Round (5,262 samples, 2.38%)</title><rect x="64.1166%" y="1029" width="2.3814%" height="15" fill="rgb(235,196,14)" fg:x="141672" fg:w="5262"/><text x="64.3666%" y="1039.50">Ro..</text></g><g><title>Transform (112 samples, 0.05%)</title><rect x="66.4980%" y="1029" width="0.0507%" height="15" fill="rgb(216,45,48)" fg:x="146934" fg:w="112"/><text x="66.7480%" y="1039.50"></text></g><g><title>Round (30 samples, 0.01%)</title><rect x="66.5351%" y="1013" width="0.0136%" height="15" fill="rgb(238,213,17)" fg:x="147016" fg:w="30"/><text x="66.7851%" y="1023.50"></text></g><g><title>[libc.so.6] (285 samples, 0.13%)</title><rect x="66.5487%" y="1029" width="0.1290%" height="15" fill="rgb(212,13,2)" fg:x="147046" fg:w="285"/><text x="66.7987%" y="1039.50"></text></g><g><title>[utreexo-wallet] (32 samples, 0.01%)</title><rect x="66.6795%" y="1029" width="0.0145%" height="15" fill="rgb(240,114,20)" fg:x="147335" fg:w="32"/><text x="66.9295%" y="1039.50"></text></g><g><title>sigma0 (1,306 samples, 0.59%)</title><rect x="66.6940%" y="1029" width="0.5911%" height="15" fill="rgb(228,41,40)" fg:x="147367" fg:w="1306"/><text x="66.9440%" y="1039.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, uint256&gt; (11,613 samples, 5.26%)</title><rect x="62.4787%" y="1141" width="5.2557%" height="15" fill="rgb(244,132,35)" fg:x="138053" fg:w="11613"/><text x="62.7287%" y="1151.50">SerRea..</text></g><g><title>SerializeMany&lt;CHashWriter, uint256&gt; (11,613 samples, 5.26%)</title><rect x="62.4787%" y="1125" width="5.2557%" height="15" fill="rgb(253,189,4)" fg:x="138053" fg:w="11613"/><text x="62.7287%" y="1135.50">Serial..</text></g><g><title>Serialize&lt;CHashWriter, uint256&gt; (11,613 samples, 5.26%)</title><rect x="62.4787%" y="1109" width="5.2557%" height="15" fill="rgb(224,37,19)" fg:x="138053" fg:w="11613"/><text x="62.7287%" y="1119.50">Serial..</text></g><g><title>base_blob&lt;256u&gt;::Serialize&lt;CHashWriter&gt; (11,613 samples, 5.26%)</title><rect x="62.4787%" y="1093" width="5.2557%" height="15" fill="rgb(235,223,18)" fg:x="138053" fg:w="11613"/><text x="62.7287%" y="1103.50">base_b..</text></g><g><title>CHashWriter::write (11,613 samples, 5.26%)</title><rect x="62.4787%" y="1077" width="5.2557%" height="15" fill="rgb(235,163,25)" fg:x="138053" fg:w="11613"/><text x="62.7287%" y="1087.50">CHashW..</text></g><g><title>CHash256::Write (11,613 samples, 5.26%)</title><rect x="62.4787%" y="1061" width="5.2557%" height="15" fill="rgb(217,145,28)" fg:x="138053" fg:w="11613"/><text x="62.7287%" y="1071.50">CHash2..</text></g><g><title>CSHA256::Write (11,612 samples, 5.26%)</title><rect x="62.4792%" y="1045" width="5.2552%" height="15" fill="rgb(223,223,32)" fg:x="138054" fg:w="11612"/><text x="62.7292%" y="1055.50">CSHA25..</text></g><g><title>sigma1 (993 samples, 0.45%)</title><rect x="67.2850%" y="1029" width="0.4494%" height="15" fill="rgb(227,189,39)" fg:x="148673" fg:w="993"/><text x="67.5350%" y="1039.50"></text></g><g><title>ReadBE32 (25 samples, 0.01%)</title><rect x="68.0680%" y="1029" width="0.0113%" height="15" fill="rgb(248,10,22)" fg:x="150403" fg:w="25"/><text x="68.3180%" y="1039.50"></text></g><g><title>Ch (38 samples, 0.02%)</title><rect x="68.2463%" y="1013" width="0.0172%" height="15" fill="rgb(248,46,39)" fg:x="150797" fg:w="38"/><text x="68.4963%" y="1023.50"></text></g><g><title>Maj (70 samples, 0.03%)</title><rect x="68.2635%" y="1013" width="0.0317%" height="15" fill="rgb(248,113,48)" fg:x="150835" fg:w="70"/><text x="68.5135%" y="1023.50"></text></g><g><title>Sigma0 (106 samples, 0.05%)</title><rect x="68.2952%" y="1013" width="0.0480%" height="15" fill="rgb(245,16,25)" fg:x="150905" fg:w="106"/><text x="68.5452%" y="1023.50"></text></g><g><title>Sigma1 (92 samples, 0.04%)</title><rect x="68.3431%" y="1013" width="0.0416%" height="15" fill="rgb(249,152,16)" fg:x="151011" fg:w="92"/><text x="68.5931%" y="1023.50"></text></g><g><title>Round (676 samples, 0.31%)</title><rect x="68.0793%" y="1029" width="0.3059%" height="15" fill="rgb(250,16,1)" fg:x="150428" fg:w="676"/><text x="68.3293%" y="1039.50"></text></g><g><title>[libc.so.6] (173 samples, 0.08%)</title><rect x="68.3916%" y="1029" width="0.0783%" height="15" fill="rgb(249,138,3)" fg:x="151118" fg:w="173"/><text x="68.6416%" y="1039.50"></text></g><g><title>sigma0 (192 samples, 0.09%)</title><rect x="68.4753%" y="1029" width="0.0869%" height="15" fill="rgb(227,71,41)" fg:x="151303" fg:w="192"/><text x="68.7253%" y="1039.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, COutPoint&gt; (13,547 samples, 6.13%)</title><rect x="62.4787%" y="1221" width="6.1310%" height="15" fill="rgb(209,184,23)" fg:x="138053" fg:w="13547"/><text x="62.7287%" y="1231.50">SerReadW..</text></g><g><title>SerializeMany&lt;CHashWriter, COutPoint&gt; (13,547 samples, 6.13%)</title><rect x="62.4787%" y="1205" width="6.1310%" height="15" fill="rgb(223,215,31)" fg:x="138053" fg:w="13547"/><text x="62.7287%" y="1215.50">Serializ..</text></g><g><title>Serialize&lt;CHashWriter, COutPoint&gt; (13,547 samples, 6.13%)</title><rect x="62.4787%" y="1189" width="6.1310%" height="15" fill="rgb(210,146,28)" fg:x="138053" fg:w="13547"/><text x="62.7287%" y="1199.50">Serializ..</text></g><g><title>COutPoint::Serialize&lt;CHashWriter&gt; (13,547 samples, 6.13%)</title><rect x="62.4787%" y="1173" width="6.1310%" height="15" fill="rgb(209,183,41)" fg:x="138053" fg:w="13547"/><text x="62.7287%" y="1183.50">COutPoin..</text></g><g><title>COutPoint::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (13,547 samples, 6.13%)</title><rect x="62.4787%" y="1157" width="6.1310%" height="15" fill="rgb(209,224,45)" fg:x="138053" fg:w="13547"/><text x="62.7287%" y="1167.50">COutPoin..</text></g><g><title>SerReadWriteMany&lt;CHashWriter, unsigned int&gt; (1,934 samples, 0.88%)</title><rect x="67.7344%" y="1141" width="0.8753%" height="15" fill="rgb(224,209,51)" fg:x="149666" fg:w="1934"/><text x="67.9844%" y="1151.50"></text></g><g><title>SerializeMany&lt;CHashWriter, unsigned int&gt; (1,934 samples, 0.88%)</title><rect x="67.7344%" y="1125" width="0.8753%" height="15" fill="rgb(223,17,39)" fg:x="149666" fg:w="1934"/><text x="67.9844%" y="1135.50"></text></g><g><title>Serialize&lt;CHashWriter&gt; (1,913 samples, 0.87%)</title><rect x="67.7439%" y="1109" width="0.8658%" height="15" fill="rgb(234,204,37)" fg:x="149687" fg:w="1913"/><text x="67.9939%" y="1119.50"></text></g><g><title>ser_writedata32&lt;CHashWriter&gt; (1,913 samples, 0.87%)</title><rect x="67.7439%" y="1093" width="0.8658%" height="15" fill="rgb(236,120,5)" fg:x="149687" fg:w="1913"/><text x="67.9939%" y="1103.50"></text></g><g><title>CHashWriter::write (1,913 samples, 0.87%)</title><rect x="67.7439%" y="1077" width="0.8658%" height="15" fill="rgb(248,97,27)" fg:x="149687" fg:w="1913"/><text x="67.9939%" y="1087.50"></text></g><g><title>CHash256::Write (1,913 samples, 0.87%)</title><rect x="67.7439%" y="1061" width="0.8658%" height="15" fill="rgb(240,66,17)" fg:x="149687" fg:w="1913"/><text x="67.9939%" y="1071.50"></text></g><g><title>CSHA256::Write (1,799 samples, 0.81%)</title><rect x="67.7955%" y="1045" width="0.8142%" height="15" fill="rgb(210,79,3)" fg:x="149801" fg:w="1799"/><text x="68.0455%" y="1055.50"></text></g><g><title>sigma1 (105 samples, 0.05%)</title><rect x="68.5622%" y="1029" width="0.0475%" height="15" fill="rgb(214,176,27)" fg:x="151495" fg:w="105"/><text x="68.8122%" y="1039.50"></text></g><g><title>Sigma0 (30 samples, 0.01%)</title><rect x="68.8274%" y="981" width="0.0136%" height="15" fill="rgb(235,185,3)" fg:x="152081" fg:w="30"/><text x="69.0774%" y="991.50"></text></g><g><title>Round (134 samples, 0.06%)</title><rect x="68.7907%" y="997" width="0.0606%" height="15" fill="rgb(227,24,12)" fg:x="152000" fg:w="134"/><text x="69.0407%" y="1007.50"></text></g><g><title>Sigma1 (23 samples, 0.01%)</title><rect x="68.8410%" y="981" width="0.0104%" height="15" fill="rgb(252,169,48)" fg:x="152111" fg:w="23"/><text x="69.0910%" y="991.50"></text></g><g><title>[libc.so.6] (180 samples, 0.08%)</title><rect x="68.8527%" y="997" width="0.0815%" height="15" fill="rgb(212,65,1)" fg:x="152137" fg:w="180"/><text x="69.1027%" y="1007.50"></text></g><g><title>sigma0 (28 samples, 0.01%)</title><rect x="68.9392%" y="997" width="0.0127%" height="15" fill="rgb(242,39,24)" fg:x="152328" fg:w="28"/><text x="69.1892%" y="1007.50"></text></g><g><title>WriteCompactSize&lt;CHashWriter&gt; (793 samples, 0.36%)</title><rect x="68.6097%" y="1077" width="0.3589%" height="15" fill="rgb(249,32,23)" fg:x="151600" fg:w="793"/><text x="68.8597%" y="1087.50"></text></g><g><title>ser_writedata8&lt;CHashWriter&gt; (791 samples, 0.36%)</title><rect x="68.6106%" y="1061" width="0.3580%" height="15" fill="rgb(251,195,23)" fg:x="151602" fg:w="791"/><text x="68.8606%" y="1071.50"></text></g><g><title>CHashWriter::write (791 samples, 0.36%)</title><rect x="68.6106%" y="1045" width="0.3580%" height="15" fill="rgb(236,174,8)" fg:x="151602" fg:w="791"/><text x="68.8606%" y="1055.50"></text></g><g><title>CHash256::Write (791 samples, 0.36%)</title><rect x="68.6106%" y="1029" width="0.3580%" height="15" fill="rgb(220,197,8)" fg:x="151602" fg:w="791"/><text x="68.8606%" y="1039.50"></text></g><g><title>CSHA256::Write (766 samples, 0.35%)</title><rect x="68.6219%" y="1013" width="0.3467%" height="15" fill="rgb(240,108,37)" fg:x="151627" fg:w="766"/><text x="68.8719%" y="1023.50"></text></g><g><title>sigma1 (37 samples, 0.02%)</title><rect x="68.9518%" y="997" width="0.0167%" height="15" fill="rgb(232,176,24)" fg:x="152356" fg:w="37"/><text x="69.2018%" y="1007.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::empty (48 samples, 0.02%)</title><rect x="68.9686%" y="1077" width="0.0217%" height="15" fill="rgb(243,35,29)" fg:x="152393" fg:w="48"/><text x="69.2186%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (48 samples, 0.02%)</title><rect x="68.9686%" y="1061" width="0.0217%" height="15" fill="rgb(210,37,18)" fg:x="152393" fg:w="48"/><text x="69.2186%" y="1071.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, CScript&gt; (876 samples, 0.40%)</title><rect x="68.6097%" y="1221" width="0.3965%" height="15" fill="rgb(224,184,40)" fg:x="151600" fg:w="876"/><text x="68.8597%" y="1231.50"></text></g><g><title>SerializeMany&lt;CHashWriter, CScript&gt; (876 samples, 0.40%)</title><rect x="68.6097%" y="1205" width="0.3965%" height="15" fill="rgb(236,39,29)" fg:x="151600" fg:w="876"/><text x="68.8597%" y="1215.50"></text></g><g><title>Serialize&lt;CHashWriter, CScript&gt; (876 samples, 0.40%)</title><rect x="68.6097%" y="1189" width="0.3965%" height="15" fill="rgb(232,48,39)" fg:x="151600" fg:w="876"/><text x="68.8597%" y="1199.50"></text></g><g><title>CScript::Serialize&lt;CHashWriter&gt; (876 samples, 0.40%)</title><rect x="68.6097%" y="1173" width="0.3965%" height="15" fill="rgb(236,34,42)" fg:x="151600" fg:w="876"/><text x="68.8597%" y="1183.50"></text></g><g><title>CScript::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (876 samples, 0.40%)</title><rect x="68.6097%" y="1157" width="0.3965%" height="15" fill="rgb(243,106,37)" fg:x="151600" fg:w="876"/><text x="68.8597%" y="1167.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (876 samples, 0.40%)</title><rect x="68.6097%" y="1141" width="0.3965%" height="15" fill="rgb(218,96,6)" fg:x="151600" fg:w="876"/><text x="68.8597%" y="1151.50"></text></g><g><title>SerializeMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (876 samples, 0.40%)</title><rect x="68.6097%" y="1125" width="0.3965%" height="15" fill="rgb(235,130,12)" fg:x="151600" fg:w="876"/><text x="68.8597%" y="1135.50"></text></g><g><title>Serialize&lt;CHashWriter, 28u, unsigned char&gt; (876 samples, 0.40%)</title><rect x="68.6097%" y="1109" width="0.3965%" height="15" fill="rgb(231,95,0)" fg:x="151600" fg:w="876"/><text x="68.8597%" y="1119.50"></text></g><g><title>Serialize_impl&lt;CHashWriter, 28u, unsigned char&gt; (876 samples, 0.40%)</title><rect x="68.6097%" y="1093" width="0.3965%" height="15" fill="rgb(228,12,23)" fg:x="151600" fg:w="876"/><text x="68.8597%" y="1103.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (35 samples, 0.02%)</title><rect x="68.9903%" y="1077" width="0.0158%" height="15" fill="rgb(216,12,1)" fg:x="152441" fg:w="35"/><text x="69.2403%" y="1087.50"></text></g><g><title>Ch (45 samples, 0.02%)</title><rect x="69.5606%" y="1093" width="0.0204%" height="15" fill="rgb(219,59,3)" fg:x="153701" fg:w="45"/><text x="69.8106%" y="1103.50"></text></g><g><title>Maj (67 samples, 0.03%)</title><rect x="69.5809%" y="1093" width="0.0303%" height="15" fill="rgb(215,208,46)" fg:x="153746" fg:w="67"/><text x="69.8309%" y="1103.50"></text></g><g><title>Sigma0 (95 samples, 0.04%)</title><rect x="69.6112%" y="1093" width="0.0430%" height="15" fill="rgb(254,224,29)" fg:x="153813" fg:w="95"/><text x="69.8612%" y="1103.50"></text></g><g><title>Round (680 samples, 0.31%)</title><rect x="69.3904%" y="1109" width="0.3077%" height="15" fill="rgb(232,14,29)" fg:x="153325" fg:w="680"/><text x="69.6404%" y="1119.50"></text></g><g><title>Sigma1 (97 samples, 0.04%)</title><rect x="69.6542%" y="1093" width="0.0439%" height="15" fill="rgb(208,45,52)" fg:x="153908" fg:w="97"/><text x="69.9042%" y="1103.50"></text></g><g><title>[libc.so.6] (214 samples, 0.10%)</title><rect x="69.7049%" y="1109" width="0.0969%" height="15" fill="rgb(234,191,28)" fg:x="154020" fg:w="214"/><text x="69.9549%" y="1119.50"></text></g><g><title>[utreexo-wallet] (36 samples, 0.02%)</title><rect x="69.8022%" y="1109" width="0.0163%" height="15" fill="rgb(244,67,43)" fg:x="154235" fg:w="36"/><text x="70.0522%" y="1119.50"></text></g><g><title>sigma0 (180 samples, 0.08%)</title><rect x="69.8185%" y="1109" width="0.0815%" height="15" fill="rgb(236,189,24)" fg:x="154271" fg:w="180"/><text x="70.0685%" y="1119.50"></text></g><g><title>DefaultFormatter::Ser&lt;CHashWriter, CTxIn&gt; (16,509 samples, 7.47%)</title><rect x="62.4787%" y="1285" width="7.4715%" height="15" fill="rgb(239,214,33)" fg:x="138053" fg:w="16509"/><text x="62.7287%" y="1295.50">DefaultFor..</text></g><g><title>Serialize&lt;CHashWriter, CTxIn&gt; (16,509 samples, 7.47%)</title><rect x="62.4787%" y="1269" width="7.4715%" height="15" fill="rgb(226,176,41)" fg:x="138053" fg:w="16509"/><text x="62.7287%" y="1279.50">Serialize&lt;..</text></g><g><title>CTxIn::Serialize&lt;CHashWriter&gt; (16,509 samples, 7.47%)</title><rect x="62.4787%" y="1253" width="7.4715%" height="15" fill="rgb(248,47,8)" fg:x="138053" fg:w="16509"/><text x="62.7287%" y="1263.50">CTxIn::Ser..</text></g><g><title>CTxIn::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (16,509 samples, 7.47%)</title><rect x="62.4787%" y="1237" width="7.4715%" height="15" fill="rgb(218,81,44)" fg:x="138053" fg:w="16509"/><text x="62.7287%" y="1247.50">CTxIn::Ser..</text></g><g><title>SerReadWriteMany&lt;CHashWriter, unsigned int&gt; (2,086 samples, 0.94%)</title><rect x="69.0062%" y="1221" width="0.9441%" height="15" fill="rgb(213,98,6)" fg:x="152476" fg:w="2086"/><text x="69.2562%" y="1231.50"></text></g><g><title>SerializeMany&lt;CHashWriter, unsigned int&gt; (2,086 samples, 0.94%)</title><rect x="69.0062%" y="1205" width="0.9441%" height="15" fill="rgb(222,85,22)" fg:x="152476" fg:w="2086"/><text x="69.2562%" y="1215.50"></text></g><g><title>Serialize&lt;CHashWriter&gt; (2,059 samples, 0.93%)</title><rect x="69.0184%" y="1189" width="0.9318%" height="15" fill="rgb(239,46,39)" fg:x="152503" fg:w="2059"/><text x="69.2684%" y="1199.50"></text></g><g><title>ser_writedata32&lt;CHashWriter&gt; (2,059 samples, 0.93%)</title><rect x="69.0184%" y="1173" width="0.9318%" height="15" fill="rgb(237,12,29)" fg:x="152503" fg:w="2059"/><text x="69.2684%" y="1183.50"></text></g><g><title>CHashWriter::write (2,059 samples, 0.93%)</title><rect x="69.0184%" y="1157" width="0.9318%" height="15" fill="rgb(214,77,8)" fg:x="152503" fg:w="2059"/><text x="69.2684%" y="1167.50"></text></g><g><title>CHash256::Write (2,059 samples, 0.93%)</title><rect x="69.0184%" y="1141" width="0.9318%" height="15" fill="rgb(217,168,37)" fg:x="152503" fg:w="2059"/><text x="69.2684%" y="1151.50"></text></g><g><title>CSHA256::Write (1,972 samples, 0.89%)</title><rect x="69.0577%" y="1125" width="0.8925%" height="15" fill="rgb(221,217,23)" fg:x="152590" fg:w="1972"/><text x="69.3077%" y="1135.50"></text></g><g><title>sigma1 (111 samples, 0.05%)</title><rect x="69.9000%" y="1109" width="0.0502%" height="15" fill="rgb(243,229,36)" fg:x="154451" fg:w="111"/><text x="70.1500%" y="1119.50"></text></g><g><title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (16,632 samples, 7.53%)</title><rect x="62.4285%" y="1381" width="7.5272%" height="15" fill="rgb(251,163,40)" fg:x="137942" fg:w="16632"/><text x="62.6785%" y="1391.50">CHashWrite..</text></g><g><title>Serialize&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (16,632 samples, 7.53%)</title><rect x="62.4285%" y="1365" width="7.5272%" height="15" fill="rgb(237,222,12)" fg:x="137942" fg:w="16632"/><text x="62.6785%" y="1375.50">Serialize&lt;..</text></g><g><title>Serialize_impl&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt;, CTxIn&gt; (16,630 samples, 7.53%)</title><rect x="62.4294%" y="1349" width="7.5262%" height="15" fill="rgb(248,132,6)" fg:x="137944" fg:w="16630"/><text x="62.6794%" y="1359.50">Serialize_..</text></g><g><title>Serialize&lt;CHashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (16,630 samples, 7.53%)</title><rect x="62.4294%" y="1333" width="7.5262%" height="15" fill="rgb(227,167,50)" fg:x="137944" fg:w="16630"/><text x="62.6794%" y="1343.50">Serialize&lt;..</text></g><g><title>Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;CHashWriter&gt; (16,630 samples, 7.53%)</title><rect x="62.4294%" y="1317" width="7.5262%" height="15" fill="rgb(242,84,37)" fg:x="137944" fg:w="16630"/><text x="62.6794%" y="1327.50">Wrapper&lt;Ve..</text></g><g><title>VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;CHashWriter, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (16,630 samples, 7.53%)</title><rect x="62.4294%" y="1301" width="7.5262%" height="15" fill="rgb(212,4,50)" fg:x="137944" fg:w="16630"/><text x="62.6794%" y="1311.50">VectorForm..</text></g><g><title>Round (64 samples, 0.03%)</title><rect x="69.9724%" y="1029" width="0.0290%" height="15" fill="rgb(230,228,32)" fg:x="154611" fg:w="64"/><text x="70.2224%" y="1039.50"></text></g><g><title>CHashWriter::write (125 samples, 0.06%)</title><rect x="69.9570%" y="1077" width="0.0566%" height="15" fill="rgb(248,217,23)" fg:x="154577" fg:w="125"/><text x="70.2070%" y="1087.50"></text></g><g><title>CHash256::Write (125 samples, 0.06%)</title><rect x="69.9570%" y="1061" width="0.0566%" height="15" fill="rgb(238,197,32)" fg:x="154577" fg:w="125"/><text x="70.2070%" y="1071.50"></text></g><g><title>CSHA256::Write (125 samples, 0.06%)</title><rect x="69.9570%" y="1045" width="0.0566%" height="15" fill="rgb(236,106,1)" fg:x="154577" fg:w="125"/><text x="70.2070%" y="1055.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, CScript&gt; (138 samples, 0.06%)</title><rect x="69.9570%" y="1221" width="0.0625%" height="15" fill="rgb(219,228,13)" fg:x="154577" fg:w="138"/><text x="70.2070%" y="1231.50"></text></g><g><title>SerializeMany&lt;CHashWriter, CScript&gt; (138 samples, 0.06%)</title><rect x="69.9570%" y="1205" width="0.0625%" height="15" fill="rgb(238,30,35)" fg:x="154577" fg:w="138"/><text x="70.2070%" y="1215.50"></text></g><g><title>Serialize&lt;CHashWriter, CScript&gt; (138 samples, 0.06%)</title><rect x="69.9570%" y="1189" width="0.0625%" height="15" fill="rgb(236,70,23)" fg:x="154577" fg:w="138"/><text x="70.2070%" y="1199.50"></text></g><g><title>CScript::Serialize&lt;CHashWriter&gt; (138 samples, 0.06%)</title><rect x="69.9570%" y="1173" width="0.0625%" height="15" fill="rgb(249,104,48)" fg:x="154577" fg:w="138"/><text x="70.2070%" y="1183.50"></text></g><g><title>CScript::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (138 samples, 0.06%)</title><rect x="69.9570%" y="1157" width="0.0625%" height="15" fill="rgb(254,117,50)" fg:x="154577" fg:w="138"/><text x="70.2070%" y="1167.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (138 samples, 0.06%)</title><rect x="69.9570%" y="1141" width="0.0625%" height="15" fill="rgb(223,152,4)" fg:x="154577" fg:w="138"/><text x="70.2070%" y="1151.50"></text></g><g><title>SerializeMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (138 samples, 0.06%)</title><rect x="69.9570%" y="1125" width="0.0625%" height="15" fill="rgb(245,6,2)" fg:x="154577" fg:w="138"/><text x="70.2070%" y="1135.50"></text></g><g><title>Serialize&lt;CHashWriter, 28u, unsigned char&gt; (138 samples, 0.06%)</title><rect x="69.9570%" y="1109" width="0.0625%" height="15" fill="rgb(249,150,24)" fg:x="154577" fg:w="138"/><text x="70.2070%" y="1119.50"></text></g><g><title>Serialize_impl&lt;CHashWriter, 28u, unsigned char&gt; (138 samples, 0.06%)</title><rect x="69.9570%" y="1093" width="0.0625%" height="15" fill="rgb(228,185,42)" fg:x="154577" fg:w="138"/><text x="70.2070%" y="1103.50"></text></g><g><title>DefaultFormatter::Ser&lt;CHashWriter, CTxOut&gt; (147 samples, 0.07%)</title><rect x="69.9570%" y="1285" width="0.0665%" height="15" fill="rgb(226,39,33)" fg:x="154577" fg:w="147"/><text x="70.2070%" y="1295.50"></text></g><g><title>Serialize&lt;CHashWriter, CTxOut&gt; (147 samples, 0.07%)</title><rect x="69.9570%" y="1269" width="0.0665%" height="15" fill="rgb(221,166,19)" fg:x="154577" fg:w="147"/><text x="70.2070%" y="1279.50"></text></g><g><title>CTxOut::Serialize&lt;CHashWriter&gt; (147 samples, 0.07%)</title><rect x="69.9570%" y="1253" width="0.0665%" height="15" fill="rgb(209,109,2)" fg:x="154577" fg:w="147"/><text x="70.2070%" y="1263.50"></text></g><g><title>CTxOut::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (147 samples, 0.07%)</title><rect x="69.9570%" y="1237" width="0.0665%" height="15" fill="rgb(252,216,26)" fg:x="154577" fg:w="147"/><text x="70.2070%" y="1247.50"></text></g><g><title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (164 samples, 0.07%)</title><rect x="69.9556%" y="1381" width="0.0742%" height="15" fill="rgb(227,173,36)" fg:x="154574" fg:w="164"/><text x="70.2056%" y="1391.50"></text></g><g><title>Serialize&lt;CHashWriter, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (164 samples, 0.07%)</title><rect x="69.9556%" y="1365" width="0.0742%" height="15" fill="rgb(209,90,7)" fg:x="154574" fg:w="164"/><text x="70.2056%" y="1375.50"></text></g><g><title>Serialize_impl&lt;CHashWriter, CTxOut, std::allocator&lt;CTxOut&gt;, CTxOut&gt; (164 samples, 0.07%)</title><rect x="69.9556%" y="1349" width="0.0742%" height="15" fill="rgb(250,194,11)" fg:x="154574" fg:w="164"/><text x="70.2056%" y="1359.50"></text></g><g><title>Serialize&lt;CHashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (164 samples, 0.07%)</title><rect x="69.9556%" y="1333" width="0.0742%" height="15" fill="rgb(220,72,50)" fg:x="154574" fg:w="164"/><text x="70.2056%" y="1343.50"></text></g><g><title>Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;CHashWriter&gt; (164 samples, 0.07%)</title><rect x="69.9556%" y="1317" width="0.0742%" height="15" fill="rgb(222,106,48)" fg:x="154574" fg:w="164"/><text x="70.2056%" y="1327.50"></text></g><g><title>VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;CHashWriter, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (164 samples, 0.07%)</title><rect x="69.9556%" y="1301" width="0.0742%" height="15" fill="rgb(216,220,45)" fg:x="154574" fg:w="164"/><text x="70.2056%" y="1311.50"></text></g><g><title>CTransaction::ComputeHash (17,113 samples, 7.74%)</title><rect x="62.2900%" y="1477" width="7.7448%" height="15" fill="rgb(234,112,18)" fg:x="137636" fg:w="17113"/><text x="62.5400%" y="1487.50">CTransactio..</text></g><g><title>SerializeHash&lt;CTransaction&gt; (17,111 samples, 7.74%)</title><rect x="62.2909%" y="1461" width="7.7439%" height="15" fill="rgb(206,179,9)" fg:x="137638" fg:w="17111"/><text x="62.5409%" y="1471.50">SerializeHa..</text></g><g><title>CHashWriter::operator&lt;&lt; &lt;CTransaction&gt; (16,815 samples, 7.61%)</title><rect x="62.4249%" y="1445" width="7.6100%" height="15" fill="rgb(215,115,40)" fg:x="137934" fg:w="16815"/><text x="62.6749%" y="1455.50">CHashWrite..</text></g><g><title>Serialize&lt;CHashWriter, CTransaction&gt; (16,815 samples, 7.61%)</title><rect x="62.4249%" y="1429" width="7.6100%" height="15" fill="rgb(222,69,34)" fg:x="137934" fg:w="16815"/><text x="62.6749%" y="1439.50">Serialize&lt;..</text></g><g><title>CTransaction::Serialize&lt;CHashWriter&gt; (16,815 samples, 7.61%)</title><rect x="62.4249%" y="1413" width="7.6100%" height="15" fill="rgb(209,161,10)" fg:x="137934" fg:w="16815"/><text x="62.6749%" y="1423.50">CTransacti..</text></g><g><title>SerializeTransaction&lt;CHashWriter, CTransaction&gt; (16,815 samples, 7.61%)</title><rect x="62.4249%" y="1397" width="7.6100%" height="15" fill="rgb(217,6,38)" fg:x="137934" fg:w="16815"/><text x="62.6749%" y="1407.50">SerializeT..</text></g><g><title>Sigma0 (38 samples, 0.02%)</title><rect x="70.1217%" y="1349" width="0.0172%" height="15" fill="rgb(229,229,48)" fg:x="154941" fg:w="38"/><text x="70.3717%" y="1359.50"></text></g><g><title>Round (166 samples, 0.08%)</title><rect x="70.0733%" y="1365" width="0.0751%" height="15" fill="rgb(225,21,28)" fg:x="154834" fg:w="166"/><text x="70.3233%" y="1375.50"></text></g><g><title>sigma0 (45 samples, 0.02%)</title><rect x="70.1503%" y="1365" width="0.0204%" height="15" fill="rgb(206,33,13)" fg:x="155004" fg:w="45"/><text x="70.4003%" y="1375.50"></text></g><g><title>CSHA256::Write (299 samples, 0.14%)</title><rect x="70.0425%" y="1381" width="0.1353%" height="15" fill="rgb(242,178,17)" fg:x="154766" fg:w="299"/><text x="70.2925%" y="1391.50"></text></g><g><title>CSHA256::Finalize (307 samples, 0.14%)</title><rect x="70.0407%" y="1397" width="0.1389%" height="15" fill="rgb(220,162,5)" fg:x="154762" fg:w="307"/><text x="70.2907%" y="1407.50"></text></g><g><title>CHash256::Finalize (314 samples, 0.14%)</title><rect x="70.0394%" y="1413" width="0.1421%" height="15" fill="rgb(210,33,43)" fg:x="154759" fg:w="314"/><text x="70.2894%" y="1423.50"></text></g><g><title>CHashWriter::GetHash (315 samples, 0.14%)</title><rect x="70.0394%" y="1429" width="0.1426%" height="15" fill="rgb(216,116,54)" fg:x="154759" fg:w="315"/><text x="70.2894%" y="1439.50"></text></g><g><title>ReadBE32 (149 samples, 0.07%)</title><rect x="71.8940%" y="1013" width="0.0674%" height="15" fill="rgb(249,92,24)" fg:x="158857" fg:w="149"/><text x="72.1440%" y="1023.50"></text></g><g><title>__bswap_32 (29 samples, 0.01%)</title><rect x="71.9483%" y="997" width="0.0131%" height="15" fill="rgb(231,189,14)" fg:x="158977" fg:w="29"/><text x="72.1983%" y="1007.50"></text></g><g><title>Ch (266 samples, 0.12%)</title><rect x="73.2531%" y="997" width="0.1204%" height="15" fill="rgb(230,8,41)" fg:x="161860" fg:w="266"/><text x="73.5031%" y="1007.50"></text></g><g><title>Maj (540 samples, 0.24%)</title><rect x="73.3735%" y="997" width="0.2444%" height="15" fill="rgb(249,7,27)" fg:x="162126" fg:w="540"/><text x="73.6235%" y="1007.50"></text></g><g><title>Sigma0 (784 samples, 0.35%)</title><rect x="73.6178%" y="997" width="0.3548%" height="15" fill="rgb(232,86,5)" fg:x="162666" fg:w="784"/><text x="73.8678%" y="1007.50"></text></g><g><title>Sigma1 (725 samples, 0.33%)</title><rect x="73.9727%" y="997" width="0.3281%" height="15" fill="rgb(224,175,18)" fg:x="163450" fg:w="725"/><text x="74.2227%" y="1007.50"></text></g><g><title>Round (5,171 samples, 2.34%)</title><rect x="71.9614%" y="1013" width="2.3402%" height="15" fill="rgb(220,129,12)" fg:x="159006" fg:w="5171"/><text x="72.2114%" y="1023.50">R..</text></g><g><title>Transform (113 samples, 0.05%)</title><rect x="74.3017%" y="1013" width="0.0511%" height="15" fill="rgb(210,19,36)" fg:x="164177" fg:w="113"/><text x="74.5517%" y="1023.50"></text></g><g><title>Round (29 samples, 0.01%)</title><rect x="74.3397%" y="997" width="0.0131%" height="15" fill="rgb(219,96,14)" fg:x="164261" fg:w="29"/><text x="74.5897%" y="1007.50"></text></g><g><title>[libc.so.6] (223 samples, 0.10%)</title><rect x="74.3528%" y="1013" width="0.1009%" height="15" fill="rgb(249,106,1)" fg:x="164290" fg:w="223"/><text x="74.6028%" y="1023.50"></text></g><g><title>[utreexo-wallet] (46 samples, 0.02%)</title><rect x="74.4569%" y="1013" width="0.0208%" height="15" fill="rgb(249,155,20)" fg:x="164520" fg:w="46"/><text x="74.7069%" y="1023.50"></text></g><g><title>sigma0 (1,362 samples, 0.62%)</title><rect x="74.4777%" y="1013" width="0.6164%" height="15" fill="rgb(244,168,9)" fg:x="164566" fg:w="1362"/><text x="74.7277%" y="1023.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, uint256&gt; (11,737 samples, 5.31%)</title><rect x="70.2421%" y="1125" width="5.3118%" height="15" fill="rgb(216,23,50)" fg:x="155207" fg:w="11737"/><text x="70.4921%" y="1135.50">SerRead..</text></g><g><title>SerializeMany&lt;CHashWriter, uint256&gt; (11,737 samples, 5.31%)</title><rect x="70.2421%" y="1109" width="5.3118%" height="15" fill="rgb(224,219,20)" fg:x="155207" fg:w="11737"/><text x="70.4921%" y="1119.50">Seriali..</text></g><g><title>Serialize&lt;CHashWriter, uint256&gt; (11,737 samples, 5.31%)</title><rect x="70.2421%" y="1093" width="5.3118%" height="15" fill="rgb(222,156,15)" fg:x="155207" fg:w="11737"/><text x="70.4921%" y="1103.50">Seriali..</text></g><g><title>base_blob&lt;256u&gt;::Serialize&lt;CHashWriter&gt; (11,737 samples, 5.31%)</title><rect x="70.2421%" y="1077" width="5.3118%" height="15" fill="rgb(231,97,17)" fg:x="155207" fg:w="11737"/><text x="70.4921%" y="1087.50">base_bl..</text></g><g><title>CHashWriter::write (11,737 samples, 5.31%)</title><rect x="70.2421%" y="1061" width="5.3118%" height="15" fill="rgb(218,70,48)" fg:x="155207" fg:w="11737"/><text x="70.4921%" y="1071.50">CHashWr..</text></g><g><title>CHash256::Write (11,737 samples, 5.31%)</title><rect x="70.2421%" y="1045" width="5.3118%" height="15" fill="rgb(212,196,52)" fg:x="155207" fg:w="11737"/><text x="70.4921%" y="1055.50">CHash25..</text></g><g><title>CSHA256::Write (11,736 samples, 5.31%)</title><rect x="70.2426%" y="1029" width="5.3114%" height="15" fill="rgb(243,203,18)" fg:x="155208" fg:w="11736"/><text x="70.4926%" y="1039.50">CSHA256..</text></g><g><title>sigma1 (1,016 samples, 0.46%)</title><rect x="75.0941%" y="1013" width="0.4598%" height="15" fill="rgb(252,125,41)" fg:x="165928" fg:w="1016"/><text x="75.3441%" y="1023.50"></text></g><g><title>Ch (28 samples, 0.01%)</title><rect x="76.0930%" y="997" width="0.0127%" height="15" fill="rgb(223,180,33)" fg:x="168135" fg:w="28"/><text x="76.3430%" y="1007.50"></text></g><g><title>Maj (76 samples, 0.03%)</title><rect x="76.1056%" y="997" width="0.0344%" height="15" fill="rgb(254,159,46)" fg:x="168163" fg:w="76"/><text x="76.3556%" y="1007.50"></text></g><g><title>Sigma0 (99 samples, 0.04%)</title><rect x="76.1400%" y="997" width="0.0448%" height="15" fill="rgb(254,38,10)" fg:x="168239" fg:w="99"/><text x="76.3900%" y="1007.50"></text></g><g><title>Round (683 samples, 0.31%)</title><rect x="75.9115%" y="1013" width="0.3091%" height="15" fill="rgb(208,217,32)" fg:x="167734" fg:w="683"/><text x="76.1615%" y="1023.50"></text></g><g><title>Sigma1 (79 samples, 0.04%)</title><rect x="76.1848%" y="997" width="0.0358%" height="15" fill="rgb(221,120,13)" fg:x="168338" fg:w="79"/><text x="76.4348%" y="1007.50"></text></g><g><title>[libc.so.6] (174 samples, 0.08%)</title><rect x="76.2305%" y="1013" width="0.0787%" height="15" fill="rgb(246,54,52)" fg:x="168439" fg:w="174"/><text x="76.4805%" y="1023.50"></text></g><g><title>sigma0 (188 samples, 0.09%)</title><rect x="76.3143%" y="1013" width="0.0851%" height="15" fill="rgb(242,34,25)" fg:x="168624" fg:w="188"/><text x="76.5643%" y="1023.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, COutPoint&gt; (13,715 samples, 6.21%)</title><rect x="70.2421%" y="1205" width="6.2070%" height="15" fill="rgb(247,209,9)" fg:x="155207" fg:w="13715"/><text x="70.4921%" y="1215.50">SerReadW..</text></g><g><title>SerializeMany&lt;CHashWriter, COutPoint&gt; (13,715 samples, 6.21%)</title><rect x="70.2421%" y="1189" width="6.2070%" height="15" fill="rgb(228,71,26)" fg:x="155207" fg:w="13715"/><text x="70.4921%" y="1199.50">Serializ..</text></g><g><title>Serialize&lt;CHashWriter, COutPoint&gt; (13,715 samples, 6.21%)</title><rect x="70.2421%" y="1173" width="6.2070%" height="15" fill="rgb(222,145,49)" fg:x="155207" fg:w="13715"/><text x="70.4921%" y="1183.50">Serializ..</text></g><g><title>COutPoint::Serialize&lt;CHashWriter&gt; (13,715 samples, 6.21%)</title><rect x="70.2421%" y="1157" width="6.2070%" height="15" fill="rgb(218,121,17)" fg:x="155207" fg:w="13715"/><text x="70.4921%" y="1167.50">COutPoin..</text></g><g><title>COutPoint::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (13,715 samples, 6.21%)</title><rect x="70.2421%" y="1141" width="6.2070%" height="15" fill="rgb(244,50,7)" fg:x="155207" fg:w="13715"/><text x="70.4921%" y="1151.50">COutPoin..</text></g><g><title>SerReadWriteMany&lt;CHashWriter, unsigned int&gt; (1,978 samples, 0.90%)</title><rect x="75.5539%" y="1125" width="0.8952%" height="15" fill="rgb(246,229,37)" fg:x="166944" fg:w="1978"/><text x="75.8039%" y="1135.50"></text></g><g><title>SerializeMany&lt;CHashWriter, unsigned int&gt; (1,978 samples, 0.90%)</title><rect x="75.5539%" y="1109" width="0.8952%" height="15" fill="rgb(225,18,5)" fg:x="166944" fg:w="1978"/><text x="75.8039%" y="1119.50"></text></g><g><title>Serialize&lt;CHashWriter&gt; (1,965 samples, 0.89%)</title><rect x="75.5598%" y="1093" width="0.8893%" height="15" fill="rgb(213,204,8)" fg:x="166957" fg:w="1965"/><text x="75.8098%" y="1103.50"></text></g><g><title>ser_writedata32&lt;CHashWriter&gt; (1,965 samples, 0.89%)</title><rect x="75.5598%" y="1077" width="0.8893%" height="15" fill="rgb(238,103,6)" fg:x="166957" fg:w="1965"/><text x="75.8098%" y="1087.50"></text></g><g><title>CHashWriter::write (1,965 samples, 0.89%)</title><rect x="75.5598%" y="1061" width="0.8893%" height="15" fill="rgb(222,25,35)" fg:x="166957" fg:w="1965"/><text x="75.8098%" y="1071.50"></text></g><g><title>CHash256::Write (1,965 samples, 0.89%)</title><rect x="75.5598%" y="1045" width="0.8893%" height="15" fill="rgb(213,203,35)" fg:x="166957" fg:w="1965"/><text x="75.8098%" y="1055.50"></text></g><g><title>CSHA256::Write (1,845 samples, 0.83%)</title><rect x="75.6141%" y="1029" width="0.8350%" height="15" fill="rgb(221,79,53)" fg:x="167077" fg:w="1845"/><text x="75.8641%" y="1039.50"></text></g><g><title>sigma1 (110 samples, 0.05%)</title><rect x="76.3993%" y="1013" width="0.0498%" height="15" fill="rgb(243,200,35)" fg:x="168812" fg:w="110"/><text x="76.6493%" y="1023.50"></text></g><g><title>Maj (32 samples, 0.01%)</title><rect x="76.6858%" y="965" width="0.0145%" height="15" fill="rgb(248,60,25)" fg:x="169445" fg:w="32"/><text x="76.9358%" y="975.50"></text></g><g><title>Sigma0 (33 samples, 0.01%)</title><rect x="76.7003%" y="965" width="0.0149%" height="15" fill="rgb(227,53,46)" fg:x="169477" fg:w="33"/><text x="76.9503%" y="975.50"></text></g><g><title>Round (181 samples, 0.08%)</title><rect x="76.6451%" y="981" width="0.0819%" height="15" fill="rgb(216,120,32)" fg:x="169355" fg:w="181"/><text x="76.8951%" y="991.50"></text></g><g><title>Sigma1 (26 samples, 0.01%)</title><rect x="76.7152%" y="965" width="0.0118%" height="15" fill="rgb(220,134,1)" fg:x="169510" fg:w="26"/><text x="76.9652%" y="975.50"></text></g><g><title>[libc.so.6] (163 samples, 0.07%)</title><rect x="76.7284%" y="981" width="0.0738%" height="15" fill="rgb(237,168,5)" fg:x="169539" fg:w="163"/><text x="76.9784%" y="991.50"></text></g><g><title>sigma0 (52 samples, 0.02%)</title><rect x="76.8089%" y="981" width="0.0235%" height="15" fill="rgb(231,100,33)" fg:x="169717" fg:w="52"/><text x="77.0589%" y="991.50"></text></g><g><title>CSHA256::Write (834 samples, 0.38%)</title><rect x="76.4699%" y="997" width="0.3774%" height="15" fill="rgb(236,177,47)" fg:x="168968" fg:w="834"/><text x="76.7199%" y="1007.50"></text></g><g><title>sigma1 (33 samples, 0.01%)</title><rect x="76.8325%" y="981" width="0.0149%" height="15" fill="rgb(235,7,49)" fg:x="169769" fg:w="33"/><text x="77.0825%" y="991.50"></text></g><g><title>WriteCompactSize&lt;CHashWriter&gt; (858 samples, 0.39%)</title><rect x="76.4595%" y="1061" width="0.3883%" height="15" fill="rgb(232,119,22)" fg:x="168945" fg:w="858"/><text x="76.7095%" y="1071.50"></text></g><g><title>ser_writedata8&lt;CHashWriter&gt; (857 samples, 0.39%)</title><rect x="76.4600%" y="1045" width="0.3879%" height="15" fill="rgb(254,73,53)" fg:x="168946" fg:w="857"/><text x="76.7100%" y="1055.50"></text></g><g><title>CHashWriter::write (857 samples, 0.39%)</title><rect x="76.4600%" y="1029" width="0.3879%" height="15" fill="rgb(251,35,20)" fg:x="168946" fg:w="857"/><text x="76.7100%" y="1039.50"></text></g><g><title>CHash256::Write (857 samples, 0.39%)</title><rect x="76.4600%" y="1013" width="0.3879%" height="15" fill="rgb(241,119,20)" fg:x="168946" fg:w="857"/><text x="76.7100%" y="1023.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::empty (93 samples, 0.04%)</title><rect x="76.8478%" y="1061" width="0.0421%" height="15" fill="rgb(207,102,14)" fg:x="169803" fg:w="93"/><text x="77.0978%" y="1071.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (93 samples, 0.04%)</title><rect x="76.8478%" y="1045" width="0.0421%" height="15" fill="rgb(248,201,50)" fg:x="169803" fg:w="93"/><text x="77.0978%" y="1055.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, CScript&gt; (1,011 samples, 0.46%)</title><rect x="76.4491%" y="1205" width="0.4575%" height="15" fill="rgb(222,185,44)" fg:x="168922" fg:w="1011"/><text x="76.6991%" y="1215.50"></text></g><g><title>SerializeMany&lt;CHashWriter, CScript&gt; (1,011 samples, 0.46%)</title><rect x="76.4491%" y="1189" width="0.4575%" height="15" fill="rgb(218,107,18)" fg:x="168922" fg:w="1011"/><text x="76.6991%" y="1199.50"></text></g><g><title>Serialize&lt;CHashWriter, CScript&gt; (1,011 samples, 0.46%)</title><rect x="76.4491%" y="1173" width="0.4575%" height="15" fill="rgb(237,177,39)" fg:x="168922" fg:w="1011"/><text x="76.6991%" y="1183.50"></text></g><g><title>CScript::Serialize&lt;CHashWriter&gt; (1,011 samples, 0.46%)</title><rect x="76.4491%" y="1157" width="0.4575%" height="15" fill="rgb(246,69,6)" fg:x="168922" fg:w="1011"/><text x="76.6991%" y="1167.50"></text></g><g><title>CScript::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (1,011 samples, 0.46%)</title><rect x="76.4491%" y="1141" width="0.4575%" height="15" fill="rgb(234,208,37)" fg:x="168922" fg:w="1011"/><text x="76.6991%" y="1151.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (1,011 samples, 0.46%)</title><rect x="76.4491%" y="1125" width="0.4575%" height="15" fill="rgb(225,4,6)" fg:x="168922" fg:w="1011"/><text x="76.6991%" y="1135.50"></text></g><g><title>SerializeMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (1,011 samples, 0.46%)</title><rect x="76.4491%" y="1109" width="0.4575%" height="15" fill="rgb(233,45,0)" fg:x="168922" fg:w="1011"/><text x="76.6991%" y="1119.50"></text></g><g><title>Serialize&lt;CHashWriter, 28u, unsigned char&gt; (1,011 samples, 0.46%)</title><rect x="76.4491%" y="1093" width="0.4575%" height="15" fill="rgb(226,136,5)" fg:x="168922" fg:w="1011"/><text x="76.6991%" y="1103.50"></text></g><g><title>Serialize_impl&lt;CHashWriter, 28u, unsigned char&gt; (1,011 samples, 0.46%)</title><rect x="76.4491%" y="1077" width="0.4575%" height="15" fill="rgb(211,91,47)" fg:x="168922" fg:w="1011"/><text x="76.6991%" y="1087.50"></text></g><g><title>prevector&lt;28u, unsigned char, unsigned int, int&gt;::size (37 samples, 0.02%)</title><rect x="76.8899%" y="1061" width="0.0167%" height="15" fill="rgb(242,88,51)" fg:x="169896" fg:w="37"/><text x="77.1399%" y="1071.50"></text></g><g><title>ReadBE32 (23 samples, 0.01%)</title><rect x="77.2678%" y="1093" width="0.0104%" height="15" fill="rgb(230,91,28)" fg:x="170731" fg:w="23"/><text x="77.5178%" y="1103.50"></text></g><g><title>Ch (24 samples, 0.01%)</title><rect x="77.4403%" y="1077" width="0.0109%" height="15" fill="rgb(254,186,29)" fg:x="171112" fg:w="24"/><text x="77.6903%" y="1087.50"></text></g><g><title>Maj (56 samples, 0.03%)</title><rect x="77.4511%" y="1077" width="0.0253%" height="15" fill="rgb(238,6,4)" fg:x="171136" fg:w="56"/><text x="77.7011%" y="1087.50"></text></g><g><title>Sigma0 (107 samples, 0.05%)</title><rect x="77.4765%" y="1077" width="0.0484%" height="15" fill="rgb(221,151,16)" fg:x="171192" fg:w="107"/><text x="77.7265%" y="1087.50"></text></g><g><title>Sigma1 (87 samples, 0.04%)</title><rect x="77.5249%" y="1077" width="0.0394%" height="15" fill="rgb(251,143,52)" fg:x="171299" fg:w="87"/><text x="77.7749%" y="1087.50"></text></g><g><title>Round (634 samples, 0.29%)</title><rect x="77.2782%" y="1093" width="0.2869%" height="15" fill="rgb(206,90,15)" fg:x="170754" fg:w="634"/><text x="77.5282%" y="1103.50"></text></g><g><title>[libc.so.6] (188 samples, 0.09%)</title><rect x="77.5706%" y="1093" width="0.0851%" height="15" fill="rgb(218,35,8)" fg:x="171400" fg:w="188"/><text x="77.8206%" y="1103.50"></text></g><g><title>[utreexo-wallet] (24 samples, 0.01%)</title><rect x="77.6570%" y="1093" width="0.0109%" height="15" fill="rgb(239,215,6)" fg:x="171591" fg:w="24"/><text x="77.9070%" y="1103.50"></text></g><g><title>sigma0 (181 samples, 0.08%)</title><rect x="77.6679%" y="1093" width="0.0819%" height="15" fill="rgb(245,116,39)" fg:x="171615" fg:w="181"/><text x="77.9179%" y="1103.50"></text></g><g><title>DefaultFormatter::Ser&lt;CHashWriter, CTxIn&gt; (16,694 samples, 7.56%)</title><rect x="70.2421%" y="1269" width="7.5552%" height="15" fill="rgb(242,65,28)" fg:x="155207" fg:w="16694"/><text x="70.4921%" y="1279.50">DefaultFor..</text></g><g><title>Serialize&lt;CHashWriter, CTxIn&gt; (16,694 samples, 7.56%)</title><rect x="70.2421%" y="1253" width="7.5552%" height="15" fill="rgb(252,132,53)" fg:x="155207" fg:w="16694"/><text x="70.4921%" y="1263.50">Serialize&lt;..</text></g><g><title>CTxIn::Serialize&lt;CHashWriter&gt; (16,694 samples, 7.56%)</title><rect x="70.2421%" y="1237" width="7.5552%" height="15" fill="rgb(224,159,50)" fg:x="155207" fg:w="16694"/><text x="70.4921%" y="1247.50">CTxIn::Ser..</text></g><g><title>CTxIn::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (16,694 samples, 7.56%)</title><rect x="70.2421%" y="1221" width="7.5552%" height="15" fill="rgb(224,93,4)" fg:x="155207" fg:w="16694"/><text x="70.4921%" y="1231.50">CTxIn::Ser..</text></g><g><title>SerReadWriteMany&lt;CHashWriter, unsigned int&gt; (1,968 samples, 0.89%)</title><rect x="76.9067%" y="1205" width="0.8907%" height="15" fill="rgb(208,81,34)" fg:x="169933" fg:w="1968"/><text x="77.1567%" y="1215.50"></text></g><g><title>SerializeMany&lt;CHashWriter, unsigned int&gt; (1,968 samples, 0.89%)</title><rect x="76.9067%" y="1189" width="0.8907%" height="15" fill="rgb(233,92,54)" fg:x="169933" fg:w="1968"/><text x="77.1567%" y="1199.50"></text></g><g><title>Serialize&lt;CHashWriter&gt; (1,968 samples, 0.89%)</title><rect x="76.9067%" y="1173" width="0.8907%" height="15" fill="rgb(237,21,14)" fg:x="169933" fg:w="1968"/><text x="77.1567%" y="1183.50"></text></g><g><title>ser_writedata32&lt;CHashWriter&gt; (1,968 samples, 0.89%)</title><rect x="76.9067%" y="1157" width="0.8907%" height="15" fill="rgb(249,128,51)" fg:x="169933" fg:w="1968"/><text x="77.1567%" y="1167.50"></text></g><g><title>CHashWriter::write (1,968 samples, 0.89%)</title><rect x="76.9067%" y="1141" width="0.8907%" height="15" fill="rgb(223,129,24)" fg:x="169933" fg:w="1968"/><text x="77.1567%" y="1151.50"></text></g><g><title>CHash256::Write (1,968 samples, 0.89%)</title><rect x="76.9067%" y="1125" width="0.8907%" height="15" fill="rgb(231,168,25)" fg:x="169933" fg:w="1968"/><text x="77.1567%" y="1135.50"></text></g><g><title>CSHA256::Write (1,921 samples, 0.87%)</title><rect x="76.9280%" y="1109" width="0.8694%" height="15" fill="rgb(224,39,20)" fg:x="169980" fg:w="1921"/><text x="77.1780%" y="1119.50"></text></g><g><title>sigma1 (105 samples, 0.05%)</title><rect x="77.7498%" y="1093" width="0.0475%" height="15" fill="rgb(225,152,53)" fg:x="171796" fg:w="105"/><text x="77.9998%" y="1103.50"></text></g><g><title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (16,807 samples, 7.61%)</title><rect x="70.1955%" y="1365" width="7.6064%" height="15" fill="rgb(252,17,24)" fg:x="155104" fg:w="16807"/><text x="70.4455%" y="1375.50">CHashWrite..</text></g><g><title>Serialize&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt; &gt; (16,807 samples, 7.61%)</title><rect x="70.1955%" y="1349" width="7.6064%" height="15" fill="rgb(250,114,30)" fg:x="155104" fg:w="16807"/><text x="70.4455%" y="1359.50">Serialize&lt;..</text></g><g><title>Serialize_impl&lt;CHashWriter, CTxIn, std::allocator&lt;CTxIn&gt;, CTxIn&gt; (16,807 samples, 7.61%)</title><rect x="70.1955%" y="1333" width="7.6064%" height="15" fill="rgb(229,5,4)" fg:x="155104" fg:w="16807"/><text x="70.4455%" y="1343.50">Serialize_..</text></g><g><title>Serialize&lt;CHashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt; &gt; (16,807 samples, 7.61%)</title><rect x="70.1955%" y="1317" width="7.6064%" height="15" fill="rgb(225,176,49)" fg:x="155104" fg:w="16807"/><text x="70.4455%" y="1327.50">Serialize&lt;..</text></g><g><title>Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; const&amp;&gt;::Serialize&lt;CHashWriter&gt; (16,807 samples, 7.61%)</title><rect x="70.1955%" y="1301" width="7.6064%" height="15" fill="rgb(224,221,49)" fg:x="155104" fg:w="16807"/><text x="70.4455%" y="1311.50">Wrapper&lt;Ve..</text></g><g><title>VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;CHashWriter, std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt; &gt; (16,807 samples, 7.61%)</title><rect x="70.1955%" y="1285" width="7.6064%" height="15" fill="rgb(253,169,27)" fg:x="155104" fg:w="16807"/><text x="70.4455%" y="1295.50">VectorForm..</text></g><g><title>Round (44 samples, 0.02%)</title><rect x="77.8159%" y="1013" width="0.0199%" height="15" fill="rgb(211,206,16)" fg:x="171942" fg:w="44"/><text x="78.0659%" y="1023.50"></text></g><g><title>CHashWriter::write (108 samples, 0.05%)</title><rect x="77.8023%" y="1061" width="0.0489%" height="15" fill="rgb(244,87,35)" fg:x="171912" fg:w="108"/><text x="78.0523%" y="1071.50"></text></g><g><title>CHash256::Write (108 samples, 0.05%)</title><rect x="77.8023%" y="1045" width="0.0489%" height="15" fill="rgb(246,28,10)" fg:x="171912" fg:w="108"/><text x="78.0523%" y="1055.50"></text></g><g><title>CSHA256::Write (108 samples, 0.05%)</title><rect x="77.8023%" y="1029" width="0.0489%" height="15" fill="rgb(229,12,44)" fg:x="171912" fg:w="108"/><text x="78.0523%" y="1039.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, CScript&gt; (124 samples, 0.06%)</title><rect x="77.8023%" y="1205" width="0.0561%" height="15" fill="rgb(210,145,37)" fg:x="171912" fg:w="124"/><text x="78.0523%" y="1215.50"></text></g><g><title>SerializeMany&lt;CHashWriter, CScript&gt; (124 samples, 0.06%)</title><rect x="77.8023%" y="1189" width="0.0561%" height="15" fill="rgb(227,112,52)" fg:x="171912" fg:w="124"/><text x="78.0523%" y="1199.50"></text></g><g><title>Serialize&lt;CHashWriter, CScript&gt; (124 samples, 0.06%)</title><rect x="77.8023%" y="1173" width="0.0561%" height="15" fill="rgb(238,155,34)" fg:x="171912" fg:w="124"/><text x="78.0523%" y="1183.50"></text></g><g><title>CScript::Serialize&lt;CHashWriter&gt; (124 samples, 0.06%)</title><rect x="77.8023%" y="1157" width="0.0561%" height="15" fill="rgb(239,226,36)" fg:x="171912" fg:w="124"/><text x="78.0523%" y="1167.50"></text></g><g><title>CScript::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (124 samples, 0.06%)</title><rect x="77.8023%" y="1141" width="0.0561%" height="15" fill="rgb(230,16,23)" fg:x="171912" fg:w="124"/><text x="78.0523%" y="1151.50"></text></g><g><title>SerReadWriteMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt; &gt; (124 samples, 0.06%)</title><rect x="77.8023%" y="1125" width="0.0561%" height="15" fill="rgb(236,171,36)" fg:x="171912" fg:w="124"/><text x="78.0523%" y="1135.50"></text></g><g><title>SerializeMany&lt;CHashWriter, prevector&lt;28u, unsigned char, unsigned int, int&gt;&gt; (124 samples, 0.06%)</title><rect x="77.8023%" y="1109" width="0.0561%" height="15" fill="rgb(221,22,14)" fg:x="171912" fg:w="124"/><text x="78.0523%" y="1119.50"></text></g><g><title>Serialize&lt;CHashWriter, 28u, unsigned char&gt; (124 samples, 0.06%)</title><rect x="77.8023%" y="1093" width="0.0561%" height="15" fill="rgb(242,43,11)" fg:x="171912" fg:w="124"/><text x="78.0523%" y="1103.50"></text></g><g><title>Serialize_impl&lt;CHashWriter, 28u, unsigned char&gt; (124 samples, 0.06%)</title><rect x="77.8023%" y="1077" width="0.0561%" height="15" fill="rgb(232,69,23)" fg:x="171912" fg:w="124"/><text x="78.0523%" y="1087.50"></text></g><g><title>DefaultFormatter::Ser&lt;CHashWriter, CTxOut&gt; (134 samples, 0.06%)</title><rect x="77.8023%" y="1269" width="0.0606%" height="15" fill="rgb(216,180,54)" fg:x="171912" fg:w="134"/><text x="78.0523%" y="1279.50"></text></g><g><title>Serialize&lt;CHashWriter, CTxOut&gt; (134 samples, 0.06%)</title><rect x="77.8023%" y="1253" width="0.0606%" height="15" fill="rgb(216,5,24)" fg:x="171912" fg:w="134"/><text x="78.0523%" y="1263.50"></text></g><g><title>CTxOut::Serialize&lt;CHashWriter&gt; (134 samples, 0.06%)</title><rect x="77.8023%" y="1237" width="0.0606%" height="15" fill="rgb(225,89,9)" fg:x="171912" fg:w="134"/><text x="78.0523%" y="1247.50"></text></g><g><title>CTxOut::SerializationOp&lt;CHashWriter, CSerActionSerialize&gt; (134 samples, 0.06%)</title><rect x="77.8023%" y="1221" width="0.0606%" height="15" fill="rgb(243,75,33)" fg:x="171912" fg:w="134"/><text x="78.0523%" y="1231.50"></text></g><g><title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (139 samples, 0.06%)</title><rect x="77.8019%" y="1365" width="0.0629%" height="15" fill="rgb(247,141,45)" fg:x="171911" fg:w="139"/><text x="78.0519%" y="1375.50"></text></g><g><title>Serialize&lt;CHashWriter, CTxOut, std::allocator&lt;CTxOut&gt; &gt; (139 samples, 0.06%)</title><rect x="77.8019%" y="1349" width="0.0629%" height="15" fill="rgb(232,177,36)" fg:x="171911" fg:w="139"/><text x="78.0519%" y="1359.50"></text></g><g><title>Serialize_impl&lt;CHashWriter, CTxOut, std::allocator&lt;CTxOut&gt;, CTxOut&gt; (139 samples, 0.06%)</title><rect x="77.8019%" y="1333" width="0.0629%" height="15" fill="rgb(219,125,36)" fg:x="171911" fg:w="139"/><text x="78.0519%" y="1343.50"></text></g><g><title>Serialize&lt;CHashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt; &gt; (139 samples, 0.06%)</title><rect x="77.8019%" y="1317" width="0.0629%" height="15" fill="rgb(227,94,9)" fg:x="171911" fg:w="139"/><text x="78.0519%" y="1327.50"></text></g><g><title>Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; const&amp;&gt;::Serialize&lt;CHashWriter&gt; (139 samples, 0.06%)</title><rect x="77.8019%" y="1301" width="0.0629%" height="15" fill="rgb(240,34,52)" fg:x="171911" fg:w="139"/><text x="78.0519%" y="1311.50"></text></g><g><title>VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;CHashWriter, std::vector&lt;CTxOut, std::allocator&lt;CTxOut&gt; &gt; &gt; (139 samples, 0.06%)</title><rect x="77.8019%" y="1285" width="0.0629%" height="15" fill="rgb(216,45,12)" fg:x="171911" fg:w="139"/><text x="78.0519%" y="1295.50"></text></g><g><title>ReadBE32 (439 samples, 0.20%)</title><rect x="82.7829%" y="1173" width="0.1987%" height="15" fill="rgb(246,21,19)" fg:x="182917" fg:w="439"/><text x="83.0329%" y="1183.50"></text></g><g><title>__bswap_32 (97 samples, 0.04%)</title><rect x="82.9376%" y="1157" width="0.0439%" height="15" fill="rgb(213,98,42)" fg:x="183259" fg:w="97"/><text x="83.1876%" y="1167.50"></text></g><g><title>Ch (921 samples, 0.42%)</title><rect x="87.2316%" y="1157" width="0.4168%" height="15" fill="rgb(250,136,47)" fg:x="192747" fg:w="921"/><text x="87.4816%" y="1167.50"></text></g><g><title>Maj (1,851 samples, 0.84%)</title><rect x="87.6484%" y="1157" width="0.8377%" height="15" fill="rgb(251,124,27)" fg:x="193668" fg:w="1851"/><text x="87.8984%" y="1167.50"></text></g><g><title>Sigma0 (2,660 samples, 1.20%)</title><rect x="88.4862%" y="1157" width="1.2038%" height="15" fill="rgb(229,180,14)" fg:x="195519" fg:w="2660"/><text x="88.7362%" y="1167.50"></text></g><g><title>Sigma1 (2,440 samples, 1.10%)</title><rect x="89.6900%" y="1157" width="1.1043%" height="15" fill="rgb(245,216,25)" fg:x="198179" fg:w="2440"/><text x="89.9400%" y="1167.50"></text></g><g><title>Round (17,276 samples, 7.82%)</title><rect x="82.9815%" y="1173" width="7.8186%" height="15" fill="rgb(251,43,5)" fg:x="183356" fg:w="17276"/><text x="83.2315%" y="1183.50">Round</text></g><g><title>Transform (365 samples, 0.17%)</title><rect x="90.8001%" y="1173" width="0.1652%" height="15" fill="rgb(250,128,24)" fg:x="200632" fg:w="365"/><text x="91.0501%" y="1183.50"></text></g><g><title>Round (95 samples, 0.04%)</title><rect x="90.9223%" y="1157" width="0.0430%" height="15" fill="rgb(217,117,27)" fg:x="200902" fg:w="95"/><text x="91.1723%" y="1167.50"></text></g><g><title>[libc.so.6] (642 samples, 0.29%)</title><rect x="90.9653%" y="1173" width="0.2906%" height="15" fill="rgb(245,147,4)" fg:x="200997" fg:w="642"/><text x="91.2153%" y="1183.50"></text></g><g><title>sigma0 (4,399 samples, 1.99%)</title><rect x="91.2631%" y="1173" width="1.9909%" height="15" fill="rgb(242,201,35)" fg:x="201655" fg:w="4399"/><text x="91.5131%" y="1183.50">s..</text></g><g><title>CSHA256::Write (36,307 samples, 16.43%)</title><rect x="78.2576%" y="1189" width="16.4315%" height="15" fill="rgb(218,181,1)" fg:x="172918" fg:w="36307"/><text x="78.5076%" y="1199.50">CSHA256::Write</text></g><g><title>sigma1 (3,171 samples, 1.44%)</title><rect x="93.2540%" y="1173" width="1.4351%" height="15" fill="rgb(222,6,29)" fg:x="206054" fg:w="3171"/><text x="93.5040%" y="1183.50"></text></g><g><title>CHashWriter::write (36,311 samples, 16.43%)</title><rect x="78.2562%" y="1221" width="16.4333%" height="15" fill="rgb(208,186,3)" fg:x="172915" fg:w="36311"/><text x="78.5062%" y="1231.50">CHashWriter::write</text></g><g><title>CHash256::Write (36,311 samples, 16.43%)</title><rect x="78.2562%" y="1205" width="16.4333%" height="15" fill="rgb(216,36,26)" fg:x="172915" fg:w="36311"/><text x="78.5062%" y="1215.50">CHash256::Write</text></g><g><title>Maj (45 samples, 0.02%)</title><rect x="95.1806%" y="1125" width="0.0204%" height="15" fill="rgb(248,201,23)" fg:x="210311" fg:w="45"/><text x="95.4306%" y="1135.50"></text></g><g><title>Sigma0 (51 samples, 0.02%)</title><rect x="95.2009%" y="1125" width="0.0231%" height="15" fill="rgb(251,170,31)" fg:x="210356" fg:w="51"/><text x="95.4509%" y="1135.50"></text></g><g><title>Sigma1 (52 samples, 0.02%)</title><rect x="95.2240%" y="1125" width="0.0235%" height="15" fill="rgb(207,110,25)" fg:x="210407" fg:w="52"/><text x="95.4740%" y="1135.50"></text></g><g><title>Round (329 samples, 0.15%)</title><rect x="95.0991%" y="1141" width="0.1489%" height="15" fill="rgb(250,54,15)" fg:x="210131" fg:w="329"/><text x="95.3491%" y="1151.50"></text></g><g><title>[libc.so.6] (193 samples, 0.09%)</title><rect x="95.2498%" y="1141" width="0.0873%" height="15" fill="rgb(227,68,33)" fg:x="210464" fg:w="193"/><text x="95.4998%" y="1151.50"></text></g><g><title>sigma0 (83 samples, 0.04%)</title><rect x="95.3430%" y="1141" width="0.0376%" height="15" fill="rgb(238,34,41)" fg:x="210670" fg:w="83"/><text x="95.5930%" y="1151.50"></text></g><g><title>WriteCompactSize&lt;CHashWriter&gt; (1,589 samples, 0.72%)</title><rect x="94.6895%" y="1221" width="0.7191%" height="15" fill="rgb(220,11,15)" fg:x="209226" fg:w="1589"/><text x="94.9395%" y="1231.50"></text></g><g><title>ser_writedata8&lt;CHashWriter&gt; (1,257 samples, 0.57%)</title><rect x="94.8398%" y="1205" width="0.5689%" height="15" fill="rgb(246,111,35)" fg:x="209558" fg:w="1257"/><text x="95.0898%" y="1215.50"></text></g><g><title>CHashWriter::write (1,257 samples, 0.57%)</title><rect x="94.8398%" y="1189" width="0.5689%" height="15" fill="rgb(209,88,53)" fg:x="209558" fg:w="1257"/><text x="95.0898%" y="1199.50"></text></g><g><title>CHash256::Write (1,257 samples, 0.57%)</title><rect x="94.8398%" y="1173" width="0.5689%" height="15" fill="rgb(231,185,47)" fg:x="209558" fg:w="1257"/><text x="95.0898%" y="1183.50"></text></g><g><title>CSHA256::Write (1,253 samples, 0.57%)</title><rect x="94.8416%" y="1157" width="0.5671%" height="15" fill="rgb(233,154,1)" fg:x="209562" fg:w="1253"/><text x="95.0916%" y="1167.50"></text></g><g><title>sigma1 (62 samples, 0.03%)</title><rect x="95.3806%" y="1141" width="0.0281%" height="15" fill="rgb(225,15,46)" fg:x="210753" fg:w="62"/><text x="95.6306%" y="1151.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::begin (29 samples, 0.01%)</title><rect x="95.4087%" y="1205" width="0.0131%" height="15" fill="rgb(211,135,41)" fg:x="210815" fg:w="29"/><text x="95.6587%" y="1215.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;unsigned char const*, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;::__normal_iterator (29 samples, 0.01%)</title><rect x="95.4087%" y="1189" width="0.0131%" height="15" fill="rgb(208,54,0)" fg:x="210815" fg:w="29"/><text x="95.6587%" y="1199.50"></text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::empty (49 samples, 0.02%)</title><rect x="95.4087%" y="1221" width="0.0222%" height="15" fill="rgb(244,136,14)" fg:x="210815" fg:w="49"/><text x="95.6587%" y="1231.50"></text></g><g><title>DefaultFormatter::Ser&lt;CHashWriter, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (38,656 samples, 17.49%)</title><rect x="77.9372%" y="1269" width="17.4946%" height="15" fill="rgb(241,56,14)" fg:x="172210" fg:w="38656"/><text x="78.1872%" y="1279.50">DefaultFormatter::Ser&lt;CHash..</text></g><g><title>Serialize&lt;CHashWriter, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (38,656 samples, 17.49%)</title><rect x="77.9372%" y="1253" width="17.4946%" height="15" fill="rgb(205,80,24)" fg:x="172210" fg:w="38656"/><text x="78.1872%" y="1263.50">Serialize&lt;CHashWriter, unsi..</text></g><g><title>Serialize_impl&lt;CHashWriter, unsigned char, std::allocator&lt;unsigned char&gt; &gt; (38,656 samples, 17.49%)</title><rect x="77.9372%" y="1237" width="17.4946%" height="15" fill="rgb(220,57,4)" fg:x="172210" fg:w="38656"/><text x="78.1872%" y="1247.50">Serialize_impl&lt;CHashWriter,..</text></g><g><title>Sigma0 (24 samples, 0.01%)</title><rect x="95.6748%" y="1173" width="0.0109%" height="15" fill="rgb(226,193,50)" fg:x="211403" fg:w="24"/><text x="95.9248%" y="1183.50"></text></g><g><title>Round (179 samples, 0.08%)</title><rect x="95.6159%" y="1189" width="0.0810%" height="15" fill="rgb(231,168,22)" fg:x="211273" fg:w="179"/><text x="95.8659%" y="1199.50"></text></g><g><title>Sigma1 (25 samples, 0.01%)</title><rect x="95.6856%" y="1173" width="0.0113%" height="15" fill="rgb(254,215,14)" fg:x="211427" fg:w="25"/><text x="95.9356%" y="1183.50"></text></g><g><title>[libc.so.6] (89 samples, 0.04%)</title><rect x="95.6983%" y="1189" width="0.0403%" height="15" fill="rgb(211,115,16)" fg:x="211455" fg:w="89"/><text x="95.9483%" y="1199.50"></text></g><g><title>sigma0 (39 samples, 0.02%)</title><rect x="95.7467%" y="1189" width="0.0177%" height="15" fill="rgb(236,210,16)" fg:x="211562" fg:w="39"/><text x="95.9967%" y="1199.50"></text></g><g><title>WriteCompactSize&lt;CHashWriter&gt; (776 samples, 0.35%)</title><rect x="95.4318%" y="1269" width="0.3512%" height="15" fill="rgb(221,94,12)" fg:x="210866" fg:w="776"/><text x="95.6818%" y="1279.50"></text></g><g><title>ser_writedata8&lt;CHashWriter&gt; (591 samples, 0.27%)</title><rect x="95.5155%" y="1253" width="0.2675%" height="15" fill="rgb(235,218,49)" fg:x="211051" fg:w="591"/><text x="95.7655%" y="1263.50"></text></g><g><title>CHashWriter::write (591 samples, 0.27%)</title><rect x="95.5155%" y="1237" width="0.2675%" height="15" fill="rgb(217,114,14)" fg:x="211051" fg:w="591"/><text x="95.7655%" y="1247.50"></text></g><g><title>CHash256::Write (591 samples, 0.27%)</title><rect x="95.5155%" y="1221" width="0.2675%" height="15" fill="rgb(216,145,22)" fg:x="211051" fg:w="591"/><text x="95.7655%" y="1231.50"></text></g><g><title>CSHA256::Write (591 samples, 0.27%)</title><rect x="95.5155%" y="1205" width="0.2675%" height="15" fill="rgb(217,112,39)" fg:x="211051" fg:w="591"/><text x="95.7655%" y="1215.50"></text></g><g><title>sigma1 (41 samples, 0.02%)</title><rect x="95.7644%" y="1189" width="0.0186%" height="15" fill="rgb(225,85,32)" fg:x="211601" fg:w="41"/><text x="96.0144%" y="1199.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::begin (25 samples, 0.01%)</title><rect x="95.7829%" y="1269" width="0.0113%" height="15" fill="rgb(245,209,47)" fg:x="211642" fg:w="25"/><text x="96.0329%" y="1279.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const*, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (25 samples, 0.01%)</title><rect x="95.7829%" y="1253" width="0.0113%" height="15" fill="rgb(218,220,15)" fg:x="211642" fg:w="25"/><text x="96.0329%" y="1263.50"></text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::end (30 samples, 0.01%)</title><rect x="95.7943%" y="1269" width="0.0136%" height="15" fill="rgb(222,202,31)" fg:x="211667" fg:w="30"/><text x="96.0443%" y="1279.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; const*, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (30 samples, 0.01%)</title><rect x="95.7943%" y="1253" width="0.0136%" height="15" fill="rgb(243,203,4)" fg:x="211667" fg:w="30"/><text x="96.0443%" y="1263.50"></text></g><g><title>CHashWriter::operator&lt;&lt; &lt;std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (39,738 samples, 17.98%)</title><rect x="77.8648%" y="1365" width="17.9843%" height="15" fill="rgb(237,92,17)" fg:x="172050" fg:w="39738"/><text x="78.1148%" y="1375.50">CHashWriter::operator&lt;&lt; &lt;std..</text></g><g><title>Serialize&lt;CHashWriter, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; (39,738 samples, 17.98%)</title><rect x="77.8648%" y="1349" width="17.9843%" height="15" fill="rgb(231,119,7)" fg:x="172050" fg:w="39738"/><text x="78.1148%" y="1359.50">Serialize&lt;CHashWriter, std::..</text></g><g><title>Serialize_impl&lt;CHashWriter, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;, std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; (39,738 samples, 17.98%)</title><rect x="77.8648%" y="1333" width="17.9843%" height="15" fill="rgb(237,82,41)" fg:x="172050" fg:w="39738"/><text x="78.1148%" y="1343.50">Serialize_impl&lt;CHashWriter, ..</text></g><g><title>Serialize&lt;CHashWriter, Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt; &gt; (39,738 samples, 17.98%)</title><rect x="77.8648%" y="1317" width="17.9843%" height="15" fill="rgb(226,81,48)" fg:x="172050" fg:w="39738"/><text x="78.1148%" y="1327.50">Serialize&lt;CHashWriter, Wrapp..</text></g><g><title>Wrapper&lt;VectorFormatter&lt;DefaultFormatter&gt;, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; const&amp;&gt;::Serialize&lt;CHashWriter&gt; (39,738 samples, 17.98%)</title><rect x="77.8648%" y="1301" width="17.9843%" height="15" fill="rgb(234,70,51)" fg:x="172050" fg:w="39738"/><text x="78.1148%" y="1311.50">Wrapper&lt;VectorFormatter&lt;Defa..</text></g><g><title>VectorFormatter&lt;DefaultFormatter&gt;::Ser&lt;CHashWriter, std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt; &gt; (39,738 samples, 17.98%)</title><rect x="77.8648%" y="1285" width="17.9843%" height="15" fill="rgb(251,86,4)" fg:x="172050" fg:w="39738"/><text x="78.1148%" y="1295.50">VectorFormatter&lt;DefaultForma..</text></g><g><title>std::vector&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt; &gt;::size (91 samples, 0.04%)</title><rect x="95.8078%" y="1269" width="0.0412%" height="15" fill="rgb(244,144,28)" fg:x="211697" fg:w="91"/><text x="96.0578%" y="1279.50"></text></g><g><title>CTransaction::ComputeWitnessHash (57,191 samples, 25.88%)</title><rect x="70.0358%" y="1461" width="25.8830%" height="15" fill="rgb(232,161,39)" fg:x="154751" fg:w="57191"/><text x="70.2858%" y="1471.50">CTransaction::ComputeWitnessHash</text></g><g><title>SerializeHash&lt;CTransaction&gt; (57,187 samples, 25.88%)</title><rect x="70.0376%" y="1445" width="25.8812%" height="15" fill="rgb(247,34,51)" fg:x="154755" fg:w="57187"/><text x="70.2876%" y="1455.50">SerializeHash&lt;CTransaction&gt;</text></g><g><title>CHashWriter::operator&lt;&lt; &lt;CTransaction&gt; (56,868 samples, 25.74%)</title><rect x="70.1819%" y="1429" width="25.7368%" height="15" fill="rgb(225,132,2)" fg:x="155074" fg:w="56868"/><text x="70.4319%" y="1439.50">CHashWriter::operator&lt;&lt; &lt;CTransaction&gt;</text></g><g><title>Serialize&lt;CHashWriter, CTransaction&gt; (56,868 samples, 25.74%)</title><rect x="70.1819%" y="1413" width="25.7368%" height="15" fill="rgb(209,159,44)" fg:x="155074" fg:w="56868"/><text x="70.4319%" y="1423.50">Serialize&lt;CHashWriter, CTransaction&gt;</text></g><g><title>CTransaction::Serialize&lt;CHashWriter&gt; (56,868 samples, 25.74%)</title><rect x="70.1819%" y="1397" width="25.7368%" height="15" fill="rgb(251,214,1)" fg:x="155074" fg:w="56868"/><text x="70.4319%" y="1407.50">CTransaction::Serialize&lt;CHashWriter&gt;</text></g><g><title>SerializeTransaction&lt;CHashWriter, CTransaction&gt; (56,868 samples, 25.74%)</title><rect x="70.1819%" y="1381" width="25.7368%" height="15" fill="rgb(247,84,47)" fg:x="155074" fg:w="56868"/><text x="70.4319%" y="1391.50">SerializeTransaction&lt;CHashWriter, CTransa..</text></g><g><title>std::vector&lt;CTxIn, std::allocator&lt;CTxIn&gt; &gt;::size (145 samples, 0.07%)</title><rect x="95.8531%" y="1365" width="0.0656%" height="15" fill="rgb(240,111,43)" fg:x="211797" fg:w="145"/><text x="96.1031%" y="1375.50"></text></g><g><title>CTransaction::ComputeWitnessHash (57,194 samples, 25.88%)</title><rect x="70.0348%" y="1477" width="25.8843%" height="15" fill="rgb(215,214,35)" fg:x="154749" fg:w="57194"/><text x="70.2848%" y="1487.50">CTransaction::ComputeWitnessHash</text></g><g><title>CTransaction::CTransaction (74,311 samples, 33.63%)</title><rect x="62.2886%" y="1493" width="33.6310%" height="15" fill="rgb(248,207,23)" fg:x="137633" fg:w="74311"/><text x="62.5386%" y="1503.50">CTransaction::CTransaction</text></g><g><title>bitcoin::blockdata::script::Script::verify_with_flags (157,845 samples, 71.44%)</title><rect x="24.4841%" y="1557" width="71.4360%" height="15" fill="rgb(214,186,4)" fg:x="54100" fg:w="157845"/><text x="24.7341%" y="1567.50">bitcoin::blockdata::script::Script::verify_with_flags</text></g><g><title>bitcoinconsensus::verify_with_flags (157,842 samples, 71.43%)</title><rect x="24.4854%" y="1541" width="71.4346%" height="15" fill="rgb(220,133,22)" fg:x="54103" fg:w="157842"/><text x="24.7354%" y="1551.50">bitcoinconsensus::verify_with_flags</text></g><g><title>verify_script (157,837 samples, 71.43%)</title><rect x="24.4877%" y="1525" width="71.4324%" height="15" fill="rgb(239,134,19)" fg:x="54108" fg:w="157837"/><text x="24.7377%" y="1535.50">verify_script</text></g><g><title>verify_script (74,315 samples, 33.63%)</title><rect x="62.2873%" y="1509" width="33.6328%" height="15" fill="rgb(250,140,9)" fg:x="137630" fg:w="74315"/><text x="62.5373%" y="1519.50">verify_script</text></g><g><title>alloc::raw_vec::finish_grow (28 samples, 0.01%)</title><rect x="95.9264%" y="1285" width="0.0127%" height="15" fill="rgb(225,59,14)" fg:x="211959" fg:w="28"/><text x="96.1764%" y="1295.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (27 samples, 0.01%)</title><rect x="95.9269%" y="1269" width="0.0122%" height="15" fill="rgb(214,152,51)" fg:x="211960" fg:w="27"/><text x="96.1769%" y="1279.50"></text></g><g><title>alloc::alloc::Global::grow_impl (27 samples, 0.01%)</title><rect x="95.9269%" y="1253" width="0.0122%" height="15" fill="rgb(251,227,43)" fg:x="211960" fg:w="27"/><text x="96.1769%" y="1263.50"></text></g><g><title>alloc::alloc::realloc (26 samples, 0.01%)</title><rect x="95.9273%" y="1237" width="0.0118%" height="15" fill="rgb(241,96,17)" fg:x="211961" fg:w="26"/><text x="96.1773%" y="1247.50"></text></g><g><title>realloc (25 samples, 0.01%)</title><rect x="95.9278%" y="1221" width="0.0113%" height="15" fill="rgb(234,198,43)" fg:x="211962" fg:w="25"/><text x="96.1778%" y="1231.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Txid as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (31 samples, 0.01%)</title><rect x="95.9255%" y="1477" width="0.0140%" height="15" fill="rgb(220,108,29)" fg:x="211957" fg:w="31"/><text x="96.1755%" y="1487.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (31 samples, 0.01%)</title><rect x="95.9255%" y="1461" width="0.0140%" height="15" fill="rgb(226,163,33)" fg:x="211957" fg:w="31"/><text x="96.1755%" y="1471.50"></text></g><g><title>&lt;[u8: 32] as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (31 samples, 0.01%)</title><rect x="95.9255%" y="1445" width="0.0140%" height="15" fill="rgb(205,194,45)" fg:x="211957" fg:w="31"/><text x="96.1755%" y="1455.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (31 samples, 0.01%)</title><rect x="95.9255%" y="1429" width="0.0140%" height="15" fill="rgb(206,143,44)" fg:x="211957" fg:w="31"/><text x="96.1755%" y="1439.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (31 samples, 0.01%)</title><rect x="95.9255%" y="1413" width="0.0140%" height="15" fill="rgb(236,136,36)" fg:x="211957" fg:w="31"/><text x="96.1755%" y="1423.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (31 samples, 0.01%)</title><rect x="95.9255%" y="1397" width="0.0140%" height="15" fill="rgb(249,172,42)" fg:x="211957" fg:w="31"/><text x="96.1755%" y="1407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (31 samples, 0.01%)</title><rect x="95.9255%" y="1381" width="0.0140%" height="15" fill="rgb(216,139,23)" fg:x="211957" fg:w="31"/><text x="96.1755%" y="1391.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (31 samples, 0.01%)</title><rect x="95.9255%" y="1365" width="0.0140%" height="15" fill="rgb(207,166,20)" fg:x="211957" fg:w="31"/><text x="96.1755%" y="1375.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (31 samples, 0.01%)</title><rect x="95.9255%" y="1349" width="0.0140%" height="15" fill="rgb(210,209,22)" fg:x="211957" fg:w="31"/><text x="96.1755%" y="1359.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (31 samples, 0.01%)</title><rect x="95.9255%" y="1333" width="0.0140%" height="15" fill="rgb(232,118,20)" fg:x="211957" fg:w="31"/><text x="96.1755%" y="1343.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (31 samples, 0.01%)</title><rect x="95.9255%" y="1317" width="0.0140%" height="15" fill="rgb(238,113,42)" fg:x="211957" fg:w="31"/><text x="96.1755%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (31 samples, 0.01%)</title><rect x="95.9255%" y="1301" width="0.0140%" height="15" fill="rgb(231,42,5)" fg:x="211957" fg:w="31"/><text x="96.1755%" y="1311.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (26 samples, 0.01%)</title><rect x="95.9395%" y="1301" width="0.0118%" height="15" fill="rgb(243,166,24)" fg:x="211988" fg:w="26"/><text x="96.1895%" y="1311.50"></text></g><g><title>alloc::alloc::Global::grow_impl (26 samples, 0.01%)</title><rect x="95.9395%" y="1285" width="0.0118%" height="15" fill="rgb(237,226,12)" fg:x="211988" fg:w="26"/><text x="96.1895%" y="1295.50"></text></g><g><title>alloc::alloc::realloc (26 samples, 0.01%)</title><rect x="95.9395%" y="1269" width="0.0118%" height="15" fill="rgb(229,133,24)" fg:x="211988" fg:w="26"/><text x="96.1895%" y="1279.50"></text></g><g><title>realloc (26 samples, 0.01%)</title><rect x="95.9395%" y="1253" width="0.0118%" height="15" fill="rgb(238,33,43)" fg:x="211988" fg:w="26"/><text x="96.1895%" y="1263.50"></text></g><g><title>alloc::raw_vec::finish_grow (27 samples, 0.01%)</title><rect x="95.9395%" y="1317" width="0.0122%" height="15" fill="rgb(227,59,38)" fg:x="211988" fg:w="27"/><text x="96.1895%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (28 samples, 0.01%)</title><rect x="95.9395%" y="1381" width="0.0127%" height="15" fill="rgb(230,97,0)" fg:x="211988" fg:w="28"/><text x="96.1895%" y="1391.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (28 samples, 0.01%)</title><rect x="95.9395%" y="1365" width="0.0127%" height="15" fill="rgb(250,173,50)" fg:x="211988" fg:w="28"/><text x="96.1895%" y="1375.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (28 samples, 0.01%)</title><rect x="95.9395%" y="1349" width="0.0127%" height="15" fill="rgb(240,15,50)" fg:x="211988" fg:w="28"/><text x="96.1895%" y="1359.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (28 samples, 0.01%)</title><rect x="95.9395%" y="1333" width="0.0127%" height="15" fill="rgb(221,93,22)" fg:x="211988" fg:w="28"/><text x="96.1895%" y="1343.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxIn as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (65 samples, 0.03%)</title><rect x="95.9232%" y="1509" width="0.0294%" height="15" fill="rgb(245,180,53)" fg:x="211952" fg:w="65"/><text x="96.1732%" y="1519.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::OutPoint as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (60 samples, 0.03%)</title><rect x="95.9255%" y="1493" width="0.0272%" height="15" fill="rgb(231,88,51)" fg:x="211957" fg:w="60"/><text x="96.1755%" y="1503.50"></text></g><g><title>&lt;u32 as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (29 samples, 0.01%)</title><rect x="95.9395%" y="1477" width="0.0131%" height="15" fill="rgb(240,58,21)" fg:x="211988" fg:w="29"/><text x="96.1895%" y="1487.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_u32 (29 samples, 0.01%)</title><rect x="95.9395%" y="1461" width="0.0131%" height="15" fill="rgb(237,21,10)" fg:x="211988" fg:w="29"/><text x="96.1895%" y="1471.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (29 samples, 0.01%)</title><rect x="95.9395%" y="1445" width="0.0131%" height="15" fill="rgb(218,43,11)" fg:x="211988" fg:w="29"/><text x="96.1895%" y="1455.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (29 samples, 0.01%)</title><rect x="95.9395%" y="1429" width="0.0131%" height="15" fill="rgb(218,221,29)" fg:x="211988" fg:w="29"/><text x="96.1895%" y="1439.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (29 samples, 0.01%)</title><rect x="95.9395%" y="1413" width="0.0131%" height="15" fill="rgb(214,118,42)" fg:x="211988" fg:w="29"/><text x="96.1895%" y="1423.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (29 samples, 0.01%)</title><rect x="95.9395%" y="1397" width="0.0131%" height="15" fill="rgb(251,200,26)" fg:x="211988" fg:w="29"/><text x="96.1895%" y="1407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxIn&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (72 samples, 0.03%)</title><rect x="95.9228%" y="1525" width="0.0326%" height="15" fill="rgb(237,101,39)" fg:x="211951" fg:w="72"/><text x="96.1728%" y="1535.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (49 samples, 0.02%)</title><rect x="95.9572%" y="1269" width="0.0222%" height="15" fill="rgb(251,117,11)" fg:x="212027" fg:w="49"/><text x="96.2072%" y="1279.50"></text></g><g><title>alloc::alloc::Global::grow_impl (49 samples, 0.02%)</title><rect x="95.9572%" y="1253" width="0.0222%" height="15" fill="rgb(216,223,23)" fg:x="212027" fg:w="49"/><text x="96.2072%" y="1263.50"></text></g><g><title>alloc::alloc::realloc (49 samples, 0.02%)</title><rect x="95.9572%" y="1237" width="0.0222%" height="15" fill="rgb(251,54,12)" fg:x="212027" fg:w="49"/><text x="96.2072%" y="1247.50"></text></g><g><title>realloc (49 samples, 0.02%)</title><rect x="95.9572%" y="1221" width="0.0222%" height="15" fill="rgb(254,176,54)" fg:x="212027" fg:w="49"/><text x="96.2072%" y="1231.50"></text></g><g><title>[libc.so.6] (46 samples, 0.02%)</title><rect x="95.9585%" y="1205" width="0.0208%" height="15" fill="rgb(210,32,8)" fg:x="212030" fg:w="46"/><text x="96.2085%" y="1215.50"></text></g><g><title>[libc.so.6] (43 samples, 0.02%)</title><rect x="95.9599%" y="1189" width="0.0195%" height="15" fill="rgb(235,52,38)" fg:x="212033" fg:w="43"/><text x="96.2099%" y="1199.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (53 samples, 0.02%)</title><rect x="95.9563%" y="1349" width="0.0240%" height="15" fill="rgb(231,4,44)" fg:x="212025" fg:w="53"/><text x="96.2063%" y="1359.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (53 samples, 0.02%)</title><rect x="95.9563%" y="1333" width="0.0240%" height="15" fill="rgb(249,2,32)" fg:x="212025" fg:w="53"/><text x="96.2063%" y="1343.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (53 samples, 0.02%)</title><rect x="95.9563%" y="1317" width="0.0240%" height="15" fill="rgb(224,65,26)" fg:x="212025" fg:w="53"/><text x="96.2063%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (53 samples, 0.02%)</title><rect x="95.9563%" y="1301" width="0.0240%" height="15" fill="rgb(250,73,40)" fg:x="212025" fg:w="53"/><text x="96.2063%" y="1311.50"></text></g><g><title>alloc::raw_vec::finish_grow (53 samples, 0.02%)</title><rect x="95.9563%" y="1285" width="0.0240%" height="15" fill="rgb(253,177,16)" fg:x="212025" fg:w="53"/><text x="96.2063%" y="1295.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (67 samples, 0.03%)</title><rect x="95.9563%" y="1445" width="0.0303%" height="15" fill="rgb(217,32,34)" fg:x="212025" fg:w="67"/><text x="96.2063%" y="1455.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (67 samples, 0.03%)</title><rect x="95.9563%" y="1429" width="0.0303%" height="15" fill="rgb(212,7,10)" fg:x="212025" fg:w="67"/><text x="96.2063%" y="1439.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (67 samples, 0.03%)</title><rect x="95.9563%" y="1413" width="0.0303%" height="15" fill="rgb(245,89,8)" fg:x="212025" fg:w="67"/><text x="96.2063%" y="1423.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (67 samples, 0.03%)</title><rect x="95.9563%" y="1397" width="0.0303%" height="15" fill="rgb(237,16,53)" fg:x="212025" fg:w="67"/><text x="96.2063%" y="1407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (67 samples, 0.03%)</title><rect x="95.9563%" y="1381" width="0.0303%" height="15" fill="rgb(250,204,30)" fg:x="212025" fg:w="67"/><text x="96.2063%" y="1391.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (67 samples, 0.03%)</title><rect x="95.9563%" y="1365" width="0.0303%" height="15" fill="rgb(208,77,27)" fg:x="212025" fg:w="67"/><text x="96.2063%" y="1375.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (70 samples, 0.03%)</title><rect x="95.9554%" y="1493" width="0.0317%" height="15" fill="rgb(250,204,28)" fg:x="212023" fg:w="70"/><text x="96.2054%" y="1503.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[u8]&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (70 samples, 0.03%)</title><rect x="95.9554%" y="1477" width="0.0317%" height="15" fill="rgb(244,63,21)" fg:x="212023" fg:w="70"/><text x="96.2054%" y="1487.50"></text></g><g><title>bitcoin::consensus::encode::consensus_encode_with_size (69 samples, 0.03%)</title><rect x="95.9558%" y="1461" width="0.0312%" height="15" fill="rgb(236,85,44)" fg:x="212024" fg:w="69"/><text x="96.2058%" y="1471.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxOut as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (77 samples, 0.03%)</title><rect x="95.9554%" y="1509" width="0.0348%" height="15" fill="rgb(215,98,4)" fg:x="212023" fg:w="77"/><text x="96.2054%" y="1519.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxOut&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (79 samples, 0.04%)</title><rect x="95.9554%" y="1525" width="0.0358%" height="15" fill="rgb(235,38,11)" fg:x="212023" fg:w="79"/><text x="96.2054%" y="1535.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (42 samples, 0.02%)</title><rect x="95.9929%" y="1349" width="0.0190%" height="15" fill="rgb(254,186,25)" fg:x="212106" fg:w="42"/><text x="96.2429%" y="1359.50"></text></g><g><title>alloc::alloc::Global::grow_impl (42 samples, 0.02%)</title><rect x="95.9929%" y="1333" width="0.0190%" height="15" fill="rgb(225,55,31)" fg:x="212106" fg:w="42"/><text x="96.2429%" y="1343.50"></text></g><g><title>alloc::alloc::realloc (42 samples, 0.02%)</title><rect x="95.9929%" y="1317" width="0.0190%" height="15" fill="rgb(211,15,21)" fg:x="212106" fg:w="42"/><text x="96.2429%" y="1327.50"></text></g><g><title>realloc (40 samples, 0.02%)</title><rect x="95.9938%" y="1301" width="0.0181%" height="15" fill="rgb(215,187,41)" fg:x="212108" fg:w="40"/><text x="96.2438%" y="1311.50"></text></g><g><title>[libc.so.6] (29 samples, 0.01%)</title><rect x="95.9988%" y="1285" width="0.0131%" height="15" fill="rgb(248,69,32)" fg:x="212119" fg:w="29"/><text x="96.2488%" y="1295.50"></text></g><g><title>[libc.so.6] (24 samples, 0.01%)</title><rect x="96.0011%" y="1269" width="0.0109%" height="15" fill="rgb(252,102,52)" fg:x="212124" fg:w="24"/><text x="96.2511%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (46 samples, 0.02%)</title><rect x="95.9916%" y="1429" width="0.0208%" height="15" fill="rgb(253,140,32)" fg:x="212103" fg:w="46"/><text x="96.2416%" y="1439.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (46 samples, 0.02%)</title><rect x="95.9916%" y="1413" width="0.0208%" height="15" fill="rgb(216,56,42)" fg:x="212103" fg:w="46"/><text x="96.2416%" y="1423.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (45 samples, 0.02%)</title><rect x="95.9920%" y="1397" width="0.0204%" height="15" fill="rgb(216,184,14)" fg:x="212104" fg:w="45"/><text x="96.2420%" y="1407.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (45 samples, 0.02%)</title><rect x="95.9920%" y="1381" width="0.0204%" height="15" fill="rgb(237,187,27)" fg:x="212104" fg:w="45"/><text x="96.2420%" y="1391.50"></text></g><g><title>alloc::raw_vec::finish_grow (43 samples, 0.02%)</title><rect x="95.9929%" y="1365" width="0.0195%" height="15" fill="rgb(219,65,3)" fg:x="212106" fg:w="43"/><text x="96.2429%" y="1375.50"></text></g><g><title>&lt;bitcoin::blockdata::witness::Witness as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (57 samples, 0.03%)</title><rect x="95.9911%" y="1525" width="0.0258%" height="15" fill="rgb(245,83,25)" fg:x="212102" fg:w="57"/><text x="96.2411%" y="1535.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (56 samples, 0.03%)</title><rect x="95.9916%" y="1509" width="0.0253%" height="15" fill="rgb(214,205,45)" fg:x="212103" fg:w="56"/><text x="96.2416%" y="1519.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (56 samples, 0.03%)</title><rect x="95.9916%" y="1493" width="0.0253%" height="15" fill="rgb(241,20,18)" fg:x="212103" fg:w="56"/><text x="96.2416%" y="1503.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (56 samples, 0.03%)</title><rect x="95.9916%" y="1477" width="0.0253%" height="15" fill="rgb(232,163,23)" fg:x="212103" fg:w="56"/><text x="96.2416%" y="1487.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (56 samples, 0.03%)</title><rect x="95.9916%" y="1461" width="0.0253%" height="15" fill="rgb(214,5,46)" fg:x="212103" fg:w="56"/><text x="96.2416%" y="1471.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (56 samples, 0.03%)</title><rect x="95.9916%" y="1445" width="0.0253%" height="15" fill="rgb(229,78,17)" fg:x="212103" fg:w="56"/><text x="96.2416%" y="1455.50"></text></g><g><title>bitcoin::consensus::encode::serialize (232 samples, 0.10%)</title><rect x="95.9201%" y="1557" width="0.1050%" height="15" fill="rgb(248,89,10)" fg:x="211945" fg:w="232"/><text x="96.1701%" y="1567.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::Transaction as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (230 samples, 0.10%)</title><rect x="95.9210%" y="1541" width="0.1041%" height="15" fill="rgb(248,54,15)" fg:x="211947" fg:w="230"/><text x="96.1710%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::transaction::TxOut&gt; (26 samples, 0.01%)</title><rect x="96.0305%" y="1557" width="0.0118%" height="15" fill="rgb(223,116,6)" fg:x="212189" fg:w="26"/><text x="96.2805%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::script::Script&gt; (26 samples, 0.01%)</title><rect x="96.0305%" y="1541" width="0.0118%" height="15" fill="rgb(205,125,38)" fg:x="212189" fg:w="26"/><text x="96.2805%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u8]&gt;&gt; (26 samples, 0.01%)</title><rect x="96.0305%" y="1525" width="0.0118%" height="15" fill="rgb(251,78,38)" fg:x="212189" fg:w="26"/><text x="96.2805%" y="1535.50"></text></g><g><title>alloc::alloc::box_free (26 samples, 0.01%)</title><rect x="96.0305%" y="1509" width="0.0118%" height="15" fill="rgb(253,78,28)" fg:x="212189" fg:w="26"/><text x="96.2805%" y="1519.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26 samples, 0.01%)</title><rect x="96.0305%" y="1493" width="0.0118%" height="15" fill="rgb(209,120,3)" fg:x="212189" fg:w="26"/><text x="96.2805%" y="1503.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.01%)</title><rect x="96.0310%" y="1477" width="0.0113%" height="15" fill="rgb(238,229,9)" fg:x="212190" fg:w="25"/><text x="96.2810%" y="1487.50"></text></g><g><title>cfree (25 samples, 0.01%)</title><rect x="96.0310%" y="1461" width="0.0113%" height="15" fill="rgb(253,159,18)" fg:x="212190" fg:w="25"/><text x="96.2810%" y="1471.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (37 samples, 0.02%)</title><rect x="96.0518%" y="1429" width="0.0167%" height="15" fill="rgb(244,42,34)" fg:x="212236" fg:w="37"/><text x="96.3018%" y="1439.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::OutPoint as core::cmp::PartialEq&gt;::eq (37 samples, 0.02%)</title><rect x="96.0518%" y="1413" width="0.0167%" height="15" fill="rgb(224,8,7)" fg:x="212236" fg:w="37"/><text x="96.3018%" y="1423.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Txid as core::cmp::PartialEq&gt;::eq (37 samples, 0.02%)</title><rect x="96.0518%" y="1397" width="0.0167%" height="15" fill="rgb(210,201,45)" fg:x="212236" fg:w="37"/><text x="96.3018%" y="1407.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as core::cmp::PartialEq&gt;::eq (37 samples, 0.02%)</title><rect x="96.0518%" y="1381" width="0.0167%" height="15" fill="rgb(252,185,21)" fg:x="212236" fg:w="37"/><text x="96.3018%" y="1391.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (37 samples, 0.02%)</title><rect x="96.0518%" y="1365" width="0.0167%" height="15" fill="rgb(223,131,1)" fg:x="212236" fg:w="37"/><text x="96.3018%" y="1375.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (37 samples, 0.02%)</title><rect x="96.0518%" y="1349" width="0.0167%" height="15" fill="rgb(245,141,16)" fg:x="212236" fg:w="37"/><text x="96.3018%" y="1359.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (38 samples, 0.02%)</title><rect x="96.0518%" y="1445" width="0.0172%" height="15" fill="rgb(229,55,45)" fg:x="212236" fg:w="38"/><text x="96.3018%" y="1455.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (51 samples, 0.02%)</title><rect x="96.0513%" y="1477" width="0.0231%" height="15" fill="rgb(208,92,15)" fg:x="212235" fg:w="51"/><text x="96.3013%" y="1487.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (51 samples, 0.02%)</title><rect x="96.0513%" y="1461" width="0.0231%" height="15" fill="rgb(234,185,47)" fg:x="212235" fg:w="51"/><text x="96.3013%" y="1471.50"></text></g><g><title>&lt;utreexo_wallet::blockchain::chain_state::ChainState&lt;PersistedState&gt; as utreexo_wallet::blockchain::BlockchainProviderInterface&gt;::connect_block (211,950 samples, 95.92%)</title><rect x="0.1525%" y="1621" width="95.9223%" height="15" fill="rgb(253,104,50)" fg:x="337" fg:w="211950"/><text x="0.4025%" y="1631.50">&lt;utreexo_wallet::blockchain::chain_state::ChainState&lt;PersistedState&gt; as utreexo_wallet::blockchain::BlockchainProviderInterface&gt;::connect_block</text></g><g><title>utreexo_wallet::blockchain::chain_state::ChainState&lt;PersistedState&gt;::verify_block_transactions (158,197 samples, 71.60%)</title><rect x="24.4795%" y="1605" width="71.5953%" height="15" fill="rgb(205,70,7)" fg:x="54090" fg:w="158197"/><text x="24.7295%" y="1615.50">utreexo_wallet::blockchain::chain_state::ChainState&lt;PersistedState&gt;::verify_block_transactions</text></g><g><title>bitcoin::blockdata::transaction::Transaction::verify (158,187 samples, 71.59%)</title><rect x="24.4841%" y="1589" width="71.5908%" height="15" fill="rgb(240,178,43)" fg:x="54100" fg:w="158187"/><text x="24.7341%" y="1599.50">bitcoin::blockdata::transaction::Transaction::verify</text></g><g><title>bitcoin::blockdata::transaction::Transaction::verify_with_flags (158,187 samples, 71.59%)</title><rect x="24.4841%" y="1573" width="71.5908%" height="15" fill="rgb(214,112,2)" fg:x="54100" fg:w="158187"/><text x="24.7341%" y="1583.50">bitcoin::blockdata::transaction::Transaction::verify_with_flags</text></g><g><title>utreexo_wallet::blockchain::chain_state::ChainState&lt;PersistedState&gt;::verify_block_transactions::{{closure}} (72 samples, 0.03%)</title><rect x="96.0423%" y="1557" width="0.0326%" height="15" fill="rgb(206,46,17)" fg:x="212215" fg:w="72"/><text x="96.2923%" y="1567.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (72 samples, 0.03%)</title><rect x="96.0423%" y="1541" width="0.0326%" height="15" fill="rgb(225,220,16)" fg:x="212215" fg:w="72"/><text x="96.2923%" y="1551.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (72 samples, 0.03%)</title><rect x="96.0423%" y="1525" width="0.0326%" height="15" fill="rgb(238,65,40)" fg:x="212215" fg:w="72"/><text x="96.2923%" y="1535.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (71 samples, 0.03%)</title><rect x="96.0427%" y="1509" width="0.0321%" height="15" fill="rgb(230,151,21)" fg:x="212216" fg:w="71"/><text x="96.2927%" y="1519.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (53 samples, 0.02%)</title><rect x="96.0509%" y="1493" width="0.0240%" height="15" fill="rgb(218,58,49)" fg:x="212234" fg:w="53"/><text x="96.3009%" y="1503.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (24 samples, 0.01%)</title><rect x="96.0789%" y="1573" width="0.0109%" height="15" fill="rgb(219,179,14)" fg:x="212296" fg:w="24"/><text x="96.3289%" y="1583.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[u8]&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (24 samples, 0.01%)</title><rect x="96.0789%" y="1557" width="0.0109%" height="15" fill="rgb(223,72,1)" fg:x="212296" fg:w="24"/><text x="96.3289%" y="1567.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (24 samples, 0.01%)</title><rect x="96.0975%" y="1445" width="0.0109%" height="15" fill="rgb(238,126,10)" fg:x="212337" fg:w="24"/><text x="96.3475%" y="1455.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (33 samples, 0.01%)</title><rect x="96.0948%" y="1477" width="0.0149%" height="15" fill="rgb(224,206,38)" fg:x="212331" fg:w="33"/><text x="96.3448%" y="1487.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (31 samples, 0.01%)</title><rect x="96.0957%" y="1461" width="0.0140%" height="15" fill="rgb(212,201,54)" fg:x="212333" fg:w="31"/><text x="96.3457%" y="1471.50"></text></g><g><title>&lt;[u8: 32] as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (38 samples, 0.02%)</title><rect x="96.0934%" y="1525" width="0.0172%" height="15" fill="rgb(218,154,48)" fg:x="212328" fg:w="38"/><text x="96.3434%" y="1535.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (38 samples, 0.02%)</title><rect x="96.0934%" y="1509" width="0.0172%" height="15" fill="rgb(232,93,24)" fg:x="212328" fg:w="38"/><text x="96.3434%" y="1519.50"></text></g><g><title>std::io::Write::write_all (38 samples, 0.02%)</title><rect x="96.0934%" y="1493" width="0.0172%" height="15" fill="rgb(245,30,21)" fg:x="212328" fg:w="38"/><text x="96.3434%" y="1503.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Txid as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (48 samples, 0.02%)</title><rect x="96.0898%" y="1557" width="0.0217%" height="15" fill="rgb(242,148,29)" fg:x="212320" fg:w="48"/><text x="96.3398%" y="1567.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (48 samples, 0.02%)</title><rect x="96.0898%" y="1541" width="0.0217%" height="15" fill="rgb(244,153,54)" fg:x="212320" fg:w="48"/><text x="96.3398%" y="1551.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::OutPoint as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (63 samples, 0.03%)</title><rect x="96.0898%" y="1573" width="0.0285%" height="15" fill="rgb(252,87,22)" fg:x="212320" fg:w="63"/><text x="96.3398%" y="1583.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxIn as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (106 samples, 0.05%)</title><rect x="96.0789%" y="1589" width="0.0480%" height="15" fill="rgb(210,51,29)" fg:x="212296" fg:w="106"/><text x="96.3289%" y="1599.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxIn&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (124 samples, 0.06%)</title><rect x="96.0762%" y="1605" width="0.0561%" height="15" fill="rgb(242,136,47)" fg:x="212290" fg:w="124"/><text x="96.3262%" y="1615.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (64 samples, 0.03%)</title><rect x="96.1930%" y="1429" width="0.0290%" height="15" fill="rgb(238,68,4)" fg:x="212548" fg:w="64"/><text x="96.4430%" y="1439.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (297 samples, 0.13%)</title><rect x="96.1382%" y="1445" width="0.1344%" height="15" fill="rgb(242,161,30)" fg:x="212427" fg:w="297"/><text x="96.3882%" y="1455.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (112 samples, 0.05%)</title><rect x="96.2219%" y="1429" width="0.0507%" height="15" fill="rgb(218,58,44)" fg:x="212612" fg:w="112"/><text x="96.4719%" y="1439.50"></text></g><g><title>bitcoin_hashes::impls::&lt;impl std::io::Write for bitcoin_hashes::sha256::HashEngine&gt;::write (336 samples, 0.15%)</title><rect x="96.1346%" y="1477" width="0.1521%" height="15" fill="rgb(252,125,32)" fg:x="212419" fg:w="336"/><text x="96.3846%" y="1487.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (333 samples, 0.15%)</title><rect x="96.1360%" y="1461" width="0.1507%" height="15" fill="rgb(219,178,0)" fg:x="212422" fg:w="333"/><text x="96.3860%" y="1471.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (342 samples, 0.15%)</title><rect x="96.1328%" y="1525" width="0.1548%" height="15" fill="rgb(213,152,7)" fg:x="212415" fg:w="342"/><text x="96.3828%" y="1535.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (342 samples, 0.15%)</title><rect x="96.1328%" y="1509" width="0.1548%" height="15" fill="rgb(249,109,34)" fg:x="212415" fg:w="342"/><text x="96.3828%" y="1519.50"></text></g><g><title>std::io::Write::write_all (342 samples, 0.15%)</title><rect x="96.1328%" y="1493" width="0.1548%" height="15" fill="rgb(232,96,21)" fg:x="212415" fg:w="342"/><text x="96.3828%" y="1503.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (372 samples, 0.17%)</title><rect x="96.1323%" y="1573" width="0.1684%" height="15" fill="rgb(228,27,39)" fg:x="212414" fg:w="372"/><text x="96.3823%" y="1583.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[u8]&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (372 samples, 0.17%)</title><rect x="96.1323%" y="1557" width="0.1684%" height="15" fill="rgb(211,182,52)" fg:x="212414" fg:w="372"/><text x="96.3823%" y="1567.50"></text></g><g><title>bitcoin::consensus::encode::consensus_encode_with_size (372 samples, 0.17%)</title><rect x="96.1323%" y="1541" width="0.1684%" height="15" fill="rgb(234,178,38)" fg:x="212414" fg:w="372"/><text x="96.3823%" y="1551.50"></text></g><g><title>&lt;bitcoin::consensus::encode::VarInt as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (29 samples, 0.01%)</title><rect x="96.2876%" y="1525" width="0.0131%" height="15" fill="rgb(221,111,3)" fg:x="212757" fg:w="29"/><text x="96.5376%" y="1535.50"></text></g><g><title>&lt;u8 as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (29 samples, 0.01%)</title><rect x="96.2876%" y="1509" width="0.0131%" height="15" fill="rgb(228,175,21)" fg:x="212757" fg:w="29"/><text x="96.5376%" y="1519.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_u8 (29 samples, 0.01%)</title><rect x="96.2876%" y="1493" width="0.0131%" height="15" fill="rgb(228,174,43)" fg:x="212757" fg:w="29"/><text x="96.5376%" y="1503.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (26 samples, 0.01%)</title><rect x="96.2889%" y="1477" width="0.0118%" height="15" fill="rgb(211,191,0)" fg:x="212760" fg:w="26"/><text x="96.5389%" y="1487.50"></text></g><g><title>std::io::Write::write_all (26 samples, 0.01%)</title><rect x="96.2889%" y="1461" width="0.0118%" height="15" fill="rgb(253,117,3)" fg:x="212760" fg:w="26"/><text x="96.5389%" y="1471.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxOut as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (395 samples, 0.18%)</title><rect x="96.1323%" y="1589" width="0.1788%" height="15" fill="rgb(241,127,19)" fg:x="212414" fg:w="395"/><text x="96.3823%" y="1599.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxOut&gt; as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (412 samples, 0.19%)</title><rect x="96.1323%" y="1605" width="0.1865%" height="15" fill="rgb(218,103,12)" fg:x="212414" fg:w="412"/><text x="96.3823%" y="1615.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (50 samples, 0.02%)</title><rect x="96.3812%" y="1525" width="0.0226%" height="15" fill="rgb(236,214,43)" fg:x="212964" fg:w="50"/><text x="96.6312%" y="1535.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (235 samples, 0.11%)</title><rect x="96.3373%" y="1541" width="0.1064%" height="15" fill="rgb(244,144,19)" fg:x="212867" fg:w="235"/><text x="96.5873%" y="1551.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (88 samples, 0.04%)</title><rect x="96.4039%" y="1525" width="0.0398%" height="15" fill="rgb(246,188,10)" fg:x="213014" fg:w="88"/><text x="96.6539%" y="1535.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (255 samples, 0.12%)</title><rect x="96.3346%" y="1557" width="0.1154%" height="15" fill="rgb(212,193,33)" fg:x="212861" fg:w="255"/><text x="96.5846%" y="1567.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (268 samples, 0.12%)</title><rect x="96.3324%" y="1573" width="0.1213%" height="15" fill="rgb(241,51,29)" fg:x="212856" fg:w="268"/><text x="96.5824%" y="1583.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (46 samples, 0.02%)</title><rect x="96.5116%" y="1509" width="0.0208%" height="15" fill="rgb(211,58,19)" fg:x="213252" fg:w="46"/><text x="96.7616%" y="1519.50"></text></g><g><title>bitcoin_hashes::sha256::HashEngine::process_block (228 samples, 0.10%)</title><rect x="96.4623%" y="1525" width="0.1032%" height="15" fill="rgb(229,111,26)" fg:x="213143" fg:w="228"/><text x="96.7123%" y="1535.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (73 samples, 0.03%)</title><rect x="96.5324%" y="1509" width="0.0330%" height="15" fill="rgb(213,115,40)" fg:x="213298" fg:w="73"/><text x="96.7824%" y="1519.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::HashEngine as bitcoin_hashes::HashEngine&gt;::input (240 samples, 0.11%)</title><rect x="96.4600%" y="1541" width="0.1086%" height="15" fill="rgb(209,56,44)" fg:x="213138" fg:w="240"/><text x="96.7100%" y="1551.50"></text></g><g><title>&lt;bitcoin_hashes::sha256::Hash as bitcoin_hashes::Hash&gt;::from_engine (252 samples, 0.11%)</title><rect x="96.4582%" y="1557" width="0.1140%" height="15" fill="rgb(230,108,32)" fg:x="213134" fg:w="252"/><text x="96.7082%" y="1567.50"></text></g><g><title>bitcoin_hashes::Hash::hash (266 samples, 0.12%)</title><rect x="96.4537%" y="1573" width="0.1204%" height="15" fill="rgb(216,165,31)" fg:x="213124" fg:w="266"/><text x="96.7037%" y="1583.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Txid as bitcoin_hashes::Hash&gt;::from_engine (551 samples, 0.25%)</title><rect x="96.3256%" y="1605" width="0.2494%" height="15" fill="rgb(218,122,21)" fg:x="212841" fg:w="551"/><text x="96.5756%" y="1615.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin_hashes::Hash&gt;::from_engine (542 samples, 0.25%)</title><rect x="96.3297%" y="1589" width="0.2453%" height="15" fill="rgb(223,224,47)" fg:x="212850" fg:w="542"/><text x="96.5797%" y="1599.50"></text></g><g><title>bitcoin::blockdata::transaction::Transaction::txid (1,119 samples, 0.51%)</title><rect x="96.0749%" y="1621" width="0.5064%" height="15" fill="rgb(238,102,44)" fg:x="212287" fg:w="1119"/><text x="96.3249%" y="1631.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.02%)</title><rect x="96.5817%" y="1525" width="0.0167%" height="15" fill="rgb(236,46,40)" fg:x="213407" fg:w="37"/><text x="96.8317%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;[bitcoin::blockdata::transaction::TxIn]&gt; (37 samples, 0.02%)</title><rect x="96.5817%" y="1509" width="0.0167%" height="15" fill="rgb(247,202,50)" fg:x="213407" fg:w="37"/><text x="96.8317%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::transaction::TxIn&gt; (35 samples, 0.02%)</title><rect x="96.5826%" y="1493" width="0.0158%" height="15" fill="rgb(209,99,20)" fg:x="213409" fg:w="35"/><text x="96.8326%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::witness::Witness&gt; (32 samples, 0.01%)</title><rect x="96.5840%" y="1477" width="0.0145%" height="15" fill="rgb(252,27,34)" fg:x="213412" fg:w="32"/><text x="96.8340%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (32 samples, 0.01%)</title><rect x="96.5840%" y="1461" width="0.0145%" height="15" fill="rgb(215,206,23)" fg:x="213412" fg:w="32"/><text x="96.8340%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (32 samples, 0.01%)</title><rect x="96.5840%" y="1445" width="0.0145%" height="15" fill="rgb(212,135,36)" fg:x="213412" fg:w="32"/><text x="96.8340%" y="1455.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.01%)</title><rect x="96.5840%" y="1429" width="0.0145%" height="15" fill="rgb(240,189,1)" fg:x="213412" fg:w="32"/><text x="96.8340%" y="1439.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (32 samples, 0.01%)</title><rect x="96.5840%" y="1413" width="0.0145%" height="15" fill="rgb(242,56,20)" fg:x="213412" fg:w="32"/><text x="96.8340%" y="1423.50"></text></g><g><title>alloc::alloc::dealloc (32 samples, 0.01%)</title><rect x="96.5840%" y="1397" width="0.0145%" height="15" fill="rgb(247,132,33)" fg:x="213412" fg:w="32"/><text x="96.8340%" y="1407.50"></text></g><g><title>cfree (32 samples, 0.01%)</title><rect x="96.5840%" y="1381" width="0.0145%" height="15" fill="rgb(208,149,11)" fg:x="213412" fg:w="32"/><text x="96.8340%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxIn&gt;&gt; (49 samples, 0.02%)</title><rect x="96.5817%" y="1541" width="0.0222%" height="15" fill="rgb(211,33,11)" fg:x="213407" fg:w="49"/><text x="96.8317%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.01%)</title><rect x="96.6039%" y="1525" width="0.0122%" height="15" fill="rgb(221,29,38)" fg:x="213456" fg:w="27"/><text x="96.8539%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;[bitcoin::blockdata::transaction::TxOut]&gt; (27 samples, 0.01%)</title><rect x="96.6039%" y="1509" width="0.0122%" height="15" fill="rgb(206,182,49)" fg:x="213456" fg:w="27"/><text x="96.8539%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::transaction::TxOut&gt; (25 samples, 0.01%)</title><rect x="96.6048%" y="1493" width="0.0113%" height="15" fill="rgb(216,140,1)" fg:x="213458" fg:w="25"/><text x="96.8548%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::script::Script&gt; (25 samples, 0.01%)</title><rect x="96.6048%" y="1477" width="0.0113%" height="15" fill="rgb(232,57,40)" fg:x="213458" fg:w="25"/><text x="96.8548%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u8]&gt;&gt; (25 samples, 0.01%)</title><rect x="96.6048%" y="1461" width="0.0113%" height="15" fill="rgb(224,186,18)" fg:x="213458" fg:w="25"/><text x="96.8548%" y="1471.50"></text></g><g><title>alloc::alloc::box_free (25 samples, 0.01%)</title><rect x="96.6048%" y="1445" width="0.0113%" height="15" fill="rgb(215,121,11)" fg:x="213458" fg:w="25"/><text x="96.8548%" y="1455.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.01%)</title><rect x="96.6048%" y="1429" width="0.0113%" height="15" fill="rgb(245,147,10)" fg:x="213458" fg:w="25"/><text x="96.8548%" y="1439.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.01%)</title><rect x="96.6053%" y="1413" width="0.0109%" height="15" fill="rgb(238,153,13)" fg:x="213459" fg:w="24"/><text x="96.8553%" y="1423.50"></text></g><g><title>cfree (24 samples, 0.01%)</title><rect x="96.6053%" y="1397" width="0.0109%" height="15" fill="rgb(233,108,0)" fg:x="213459" fg:w="24"/><text x="96.8553%" y="1407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.04%)</title><rect x="96.5817%" y="1589" width="0.0416%" height="15" fill="rgb(212,157,17)" fg:x="213407" fg:w="92"/><text x="96.8317%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;[bitcoin::blockdata::transaction::Transaction]&gt; (92 samples, 0.04%)</title><rect x="96.5817%" y="1573" width="0.0416%" height="15" fill="rgb(225,213,38)" fg:x="213407" fg:w="92"/><text x="96.8317%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::transaction::Transaction&gt; (92 samples, 0.04%)</title><rect x="96.5817%" y="1557" width="0.0416%" height="15" fill="rgb(248,16,11)" fg:x="213407" fg:w="92"/><text x="96.8317%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxOut&gt;&gt; (43 samples, 0.02%)</title><rect x="96.6039%" y="1541" width="0.0195%" height="15" fill="rgb(241,33,4)" fg:x="213456" fg:w="43"/><text x="96.8539%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::block::Block&gt; (98 samples, 0.04%)</title><rect x="96.5817%" y="1621" width="0.0444%" height="15" fill="rgb(222,26,43)" fg:x="213407" fg:w="98"/><text x="96.8317%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::Transaction&gt;&gt; (98 samples, 0.04%)</title><rect x="96.5817%" y="1605" width="0.0444%" height="15" fill="rgb(243,29,36)" fg:x="213407" fg:w="98"/><text x="96.8317%" y="1615.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (46 samples, 0.02%)</title><rect x="96.6351%" y="1237" width="0.0208%" height="15" fill="rgb(241,9,27)" fg:x="213525" fg:w="46"/><text x="96.8851%" y="1247.50"></text></g><g><title>&lt;bitcoin::blockdata::block::_::&lt;impl serde::de::Deserialize for bitcoin::blockdata::block::BlockHeader&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (48 samples, 0.02%)</title><rect x="96.6347%" y="1301" width="0.0217%" height="15" fill="rgb(205,117,26)" fg:x="213524" fg:w="48"/><text x="96.8847%" y="1311.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (47 samples, 0.02%)</title><rect x="96.6351%" y="1285" width="0.0213%" height="15" fill="rgb(209,80,39)" fg:x="213525" fg:w="47"/><text x="96.8851%" y="1295.50"></text></g><g><title>serde::de::SeqAccess::next_element (47 samples, 0.02%)</title><rect x="96.6351%" y="1269" width="0.0213%" height="15" fill="rgb(239,155,6)" fg:x="213525" fg:w="47"/><text x="96.8851%" y="1279.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (47 samples, 0.02%)</title><rect x="96.6351%" y="1253" width="0.0213%" height="15" fill="rgb(212,104,12)" fg:x="213525" fg:w="47"/><text x="96.8851%" y="1263.50"></text></g><g><title>bitcoin::blockdata::block::_::&lt;impl serde::de::Deserialize for bitcoin::blockdata::block::BlockHeader&gt;::deserialize (54 samples, 0.02%)</title><rect x="96.6329%" y="1349" width="0.0244%" height="15" fill="rgb(234,204,3)" fg:x="213520" fg:w="54"/><text x="96.8829%" y="1359.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_struct (54 samples, 0.02%)</title><rect x="96.6329%" y="1333" width="0.0244%" height="15" fill="rgb(251,218,7)" fg:x="213520" fg:w="54"/><text x="96.8829%" y="1343.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (54 samples, 0.02%)</title><rect x="96.6329%" y="1317" width="0.0244%" height="15" fill="rgb(221,81,32)" fg:x="213520" fg:w="54"/><text x="96.8829%" y="1327.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as serde::de::Deserialize&gt;::deserialize (28 samples, 0.01%)</title><rect x="96.6867%" y="837" width="0.0127%" height="15" fill="rgb(214,152,26)" fg:x="213639" fg:w="28"/><text x="96.9367%" y="847.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_bytes (28 samples, 0.01%)</title><rect x="96.6867%" y="821" width="0.0127%" height="15" fill="rgb(223,22,3)" fg:x="213639" fg:w="28"/><text x="96.9367%" y="831.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (28 samples, 0.01%)</title><rect x="96.6867%" y="805" width="0.0127%" height="15" fill="rgb(207,174,7)" fg:x="213639" fg:w="28"/><text x="96.9367%" y="815.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (23 samples, 0.01%)</title><rect x="96.7171%" y="581" width="0.0104%" height="15" fill="rgb(224,19,52)" fg:x="213706" fg:w="23"/><text x="96.9671%" y="591.50"></text></g><g><title>rmp_serde::decode::read_bin_data (26 samples, 0.01%)</title><rect x="96.7161%" y="645" width="0.0118%" height="15" fill="rgb(228,24,14)" fg:x="213704" fg:w="26"/><text x="96.9661%" y="655.50"></text></g><g><title>&lt;rmp_serde::decode::ReadReader&lt;R&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (26 samples, 0.01%)</title><rect x="96.7161%" y="629" width="0.0118%" height="15" fill="rgb(230,153,43)" fg:x="213704" fg:w="26"/><text x="96.9661%" y="639.50"></text></g><g><title>std::io::Read::read_to_end (25 samples, 0.01%)</title><rect x="96.7166%" y="613" width="0.0113%" height="15" fill="rgb(231,106,12)" fg:x="213705" fg:w="25"/><text x="96.9666%" y="623.50"></text></g><g><title>std::io::default_read_to_end (25 samples, 0.01%)</title><rect x="96.7166%" y="597" width="0.0113%" height="15" fill="rgb(215,92,2)" fg:x="213705" fg:w="25"/><text x="96.9666%" y="607.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::Txid as serde::de::Deserialize&gt;::deserialize (54 samples, 0.02%)</title><rect x="96.7039%" y="709" width="0.0244%" height="15" fill="rgb(249,143,25)" fg:x="213677" fg:w="54"/><text x="96.9539%" y="719.50"></text></g><g><title>bitcoin_hashes::serde_macros::serde_details::SerdeHash::deserialize (54 samples, 0.02%)</title><rect x="96.7039%" y="693" width="0.0244%" height="15" fill="rgb(252,7,35)" fg:x="213677" fg:w="54"/><text x="96.9539%" y="703.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_bytes (54 samples, 0.02%)</title><rect x="96.7039%" y="677" width="0.0244%" height="15" fill="rgb(216,69,40)" fg:x="213677" fg:w="54"/><text x="96.9539%" y="687.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (54 samples, 0.02%)</title><rect x="96.7039%" y="661" width="0.0244%" height="15" fill="rgb(240,36,33)" fg:x="213677" fg:w="54"/><text x="96.9539%" y="671.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (56 samples, 0.03%)</title><rect x="96.7039%" y="725" width="0.0253%" height="15" fill="rgb(231,128,14)" fg:x="213677" fg:w="56"/><text x="96.9539%" y="735.50"></text></g><g><title>&lt;&lt;bitcoin::blockdata::transaction::OutPoint as serde::de::Deserialize&gt;::deserialize::Visitor as serde::de::Visitor&gt;::visit_seq (61 samples, 0.03%)</title><rect x="96.7026%" y="789" width="0.0276%" height="15" fill="rgb(245,143,14)" fg:x="213674" fg:w="61"/><text x="96.9526%" y="799.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (59 samples, 0.03%)</title><rect x="96.7035%" y="773" width="0.0267%" height="15" fill="rgb(222,130,28)" fg:x="213676" fg:w="59"/><text x="96.9535%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (59 samples, 0.03%)</title><rect x="96.7035%" y="757" width="0.0267%" height="15" fill="rgb(212,10,48)" fg:x="213676" fg:w="59"/><text x="96.9535%" y="767.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (59 samples, 0.03%)</title><rect x="96.7035%" y="741" width="0.0267%" height="15" fill="rgb(254,118,45)" fg:x="213676" fg:w="59"/><text x="96.9535%" y="751.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::OutPoint as serde::de::Deserialize&gt;::deserialize (73 samples, 0.03%)</title><rect x="96.6994%" y="837" width="0.0330%" height="15" fill="rgb(228,6,45)" fg:x="213667" fg:w="73"/><text x="96.9494%" y="847.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_struct (73 samples, 0.03%)</title><rect x="96.6994%" y="821" width="0.0330%" height="15" fill="rgb(241,18,35)" fg:x="213667" fg:w="73"/><text x="96.9494%" y="831.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (73 samples, 0.03%)</title><rect x="96.6994%" y="805" width="0.0330%" height="15" fill="rgb(227,214,53)" fg:x="213667" fg:w="73"/><text x="96.9494%" y="815.50"></text></g><g><title>[libc.so.6] (30 samples, 0.01%)</title><rect x="96.7537%" y="677" width="0.0136%" height="15" fill="rgb(224,107,51)" fg:x="213787" fg:w="30"/><text x="97.0037%" y="687.50"></text></g><g><title>__libc_calloc (42 samples, 0.02%)</title><rect x="96.7492%" y="693" width="0.0190%" height="15" fill="rgb(248,60,28)" fg:x="213777" fg:w="42"/><text x="96.9992%" y="703.50"></text></g><g><title>alloc::vec::from_elem (51 samples, 0.02%)</title><rect x="96.7460%" y="805" width="0.0231%" height="15" fill="rgb(249,101,23)" fg:x="213770" fg:w="51"/><text x="96.9960%" y="815.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (51 samples, 0.02%)</title><rect x="96.7460%" y="789" width="0.0231%" height="15" fill="rgb(228,51,19)" fg:x="213770" fg:w="51"/><text x="96.9960%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (51 samples, 0.02%)</title><rect x="96.7460%" y="773" width="0.0231%" height="15" fill="rgb(213,20,6)" fg:x="213770" fg:w="51"/><text x="96.9960%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (51 samples, 0.02%)</title><rect x="96.7460%" y="757" width="0.0231%" height="15" fill="rgb(212,124,10)" fg:x="213770" fg:w="51"/><text x="96.9960%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (50 samples, 0.02%)</title><rect x="96.7465%" y="741" width="0.0226%" height="15" fill="rgb(248,3,40)" fg:x="213771" fg:w="50"/><text x="96.9965%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (50 samples, 0.02%)</title><rect x="96.7465%" y="725" width="0.0226%" height="15" fill="rgb(223,178,23)" fg:x="213771" fg:w="50"/><text x="96.9965%" y="735.50"></text></g><g><title>alloc::alloc::alloc_zeroed (50 samples, 0.02%)</title><rect x="96.7465%" y="709" width="0.0226%" height="15" fill="rgb(240,132,45)" fg:x="213771" fg:w="50"/><text x="96.9965%" y="719.50"></text></g><g><title>bitcoin::blockdata::witness::Witness::from_vec (94 samples, 0.04%)</title><rect x="96.7383%" y="821" width="0.0425%" height="15" fill="rgb(245,164,36)" fg:x="213753" fg:w="94"/><text x="96.9883%" y="831.50"></text></g><g><title>rmp::decode::RmpRead::read_data_u8 (42 samples, 0.02%)</title><rect x="96.8890%" y="517" width="0.0190%" height="15" fill="rgb(231,188,53)" fg:x="214086" fg:w="42"/><text x="97.1390%" y="527.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (42 samples, 0.02%)</title><rect x="96.8890%" y="501" width="0.0190%" height="15" fill="rgb(237,198,39)" fg:x="214086" fg:w="42"/><text x="97.1390%" y="511.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (42 samples, 0.02%)</title><rect x="96.8890%" y="485" width="0.0190%" height="15" fill="rgb(223,120,35)" fg:x="214086" fg:w="42"/><text x="97.1390%" y="495.50"></text></g><g><title>&lt;rmp_serde::decode::ReadReader&lt;R&gt; as std::io::Read&gt;::read_exact (42 samples, 0.02%)</title><rect x="96.8890%" y="469" width="0.0190%" height="15" fill="rgb(253,107,49)" fg:x="214086" fg:w="42"/><text x="97.1390%" y="479.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (42 samples, 0.02%)</title><rect x="96.8890%" y="453" width="0.0190%" height="15" fill="rgb(216,44,31)" fg:x="214086" fg:w="42"/><text x="97.1390%" y="463.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (42 samples, 0.02%)</title><rect x="96.8890%" y="437" width="0.0190%" height="15" fill="rgb(253,87,21)" fg:x="214086" fg:w="42"/><text x="97.1390%" y="447.50"></text></g><g><title>std::io::default_read_exact (26 samples, 0.01%)</title><rect x="96.8963%" y="421" width="0.0118%" height="15" fill="rgb(226,18,2)" fg:x="214102" fg:w="26"/><text x="97.1463%" y="431.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (26 samples, 0.01%)</title><rect x="96.8963%" y="405" width="0.0118%" height="15" fill="rgb(216,8,46)" fg:x="214102" fg:w="26"/><text x="97.1463%" y="415.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (26 samples, 0.01%)</title><rect x="96.8963%" y="389" width="0.0118%" height="15" fill="rgb(226,140,39)" fg:x="214102" fg:w="26"/><text x="97.1463%" y="399.50"></text></g><g><title>std::io::Read::read_buf (26 samples, 0.01%)</title><rect x="96.8963%" y="373" width="0.0118%" height="15" fill="rgb(221,194,54)" fg:x="214102" fg:w="26"/><text x="97.1463%" y="383.50"></text></g><g><title>std::io::default_read_buf (26 samples, 0.01%)</title><rect x="96.8963%" y="357" width="0.0118%" height="15" fill="rgb(213,92,11)" fg:x="214102" fg:w="26"/><text x="97.1463%" y="367.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (26 samples, 0.01%)</title><rect x="96.8963%" y="341" width="0.0118%" height="15" fill="rgb(229,162,46)" fg:x="214102" fg:w="26"/><text x="97.1463%" y="351.50"></text></g><g><title>std::net::udp::UdpSocket::recv (26 samples, 0.01%)</title><rect x="96.8963%" y="325" width="0.0118%" height="15" fill="rgb(214,111,36)" fg:x="214102" fg:w="26"/><text x="97.1463%" y="335.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv (26 samples, 0.01%)</title><rect x="96.8963%" y="309" width="0.0118%" height="15" fill="rgb(207,6,21)" fg:x="214102" fg:w="26"/><text x="97.1463%" y="319.50"></text></g><g><title>std::sys::unix::net::Socket::read (26 samples, 0.01%)</title><rect x="96.8963%" y="293" width="0.0118%" height="15" fill="rgb(213,127,38)" fg:x="214102" fg:w="26"/><text x="97.1463%" y="303.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (26 samples, 0.01%)</title><rect x="96.8963%" y="277" width="0.0118%" height="15" fill="rgb(238,118,32)" fg:x="214102" fg:w="26"/><text x="97.1463%" y="287.50"></text></g><g><title>recv (26 samples, 0.01%)</title><rect x="96.8963%" y="261" width="0.0118%" height="15" fill="rgb(240,139,39)" fg:x="214102" fg:w="26"/><text x="97.1463%" y="271.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="96.8963%" y="245" width="0.0118%" height="15" fill="rgb(235,10,37)" fg:x="214102" fg:w="26"/><text x="97.1463%" y="255.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="96.8963%" y="229" width="0.0118%" height="15" fill="rgb(249,171,38)" fg:x="214102" fg:w="26"/><text x="97.1463%" y="239.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="96.8967%" y="213" width="0.0113%" height="15" fill="rgb(242,144,32)" fg:x="214103" fg:w="25"/><text x="97.1467%" y="223.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="96.8967%" y="197" width="0.0113%" height="15" fill="rgb(217,117,21)" fg:x="214103" fg:w="25"/><text x="97.1467%" y="207.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="96.8967%" y="181" width="0.0113%" height="15" fill="rgb(249,87,1)" fg:x="214103" fg:w="25"/><text x="97.1467%" y="191.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="96.8972%" y="165" width="0.0109%" height="15" fill="rgb(248,196,48)" fg:x="214104" fg:w="24"/><text x="97.1472%" y="175.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (68 samples, 0.03%)</title><rect x="96.9139%" y="373" width="0.0308%" height="15" fill="rgb(251,206,33)" fg:x="214141" fg:w="68"/><text x="97.1639%" y="383.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::buffer (41 samples, 0.02%)</title><rect x="96.9488%" y="373" width="0.0186%" height="15" fill="rgb(232,141,28)" fg:x="214218" fg:w="41"/><text x="97.1988%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (27 samples, 0.01%)</title><rect x="96.9551%" y="357" width="0.0122%" height="15" fill="rgb(209,167,14)" fg:x="214232" fg:w="27"/><text x="97.2051%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (27 samples, 0.01%)</title><rect x="96.9551%" y="341" width="0.0122%" height="15" fill="rgb(225,11,50)" fg:x="214232" fg:w="27"/><text x="97.2051%" y="351.50"></text></g><g><title>rmp::decode::RmpRead::read_u8 (182 samples, 0.08%)</title><rect x="96.9108%" y="453" width="0.0824%" height="15" fill="rgb(209,50,20)" fg:x="214134" fg:w="182"/><text x="97.1608%" y="463.50"></text></g><g><title>&lt;T as rmp::decode::RmpRead&gt;::read_exact_buf (179 samples, 0.08%)</title><rect x="96.9121%" y="437" width="0.0810%" height="15" fill="rgb(212,17,46)" fg:x="214137" fg:w="179"/><text x="97.1621%" y="447.50"></text></g><g><title>&lt;rmp_serde::decode::ReadReader&lt;R&gt; as std::io::Read&gt;::read_exact (179 samples, 0.08%)</title><rect x="96.9121%" y="421" width="0.0810%" height="15" fill="rgb(216,101,39)" fg:x="214137" fg:w="179"/><text x="97.1621%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (179 samples, 0.08%)</title><rect x="96.9121%" y="405" width="0.0810%" height="15" fill="rgb(212,228,48)" fg:x="214137" fg:w="179"/><text x="97.1621%" y="415.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (179 samples, 0.08%)</title><rect x="96.9121%" y="389" width="0.0810%" height="15" fill="rgb(250,6,50)" fg:x="214137" fg:w="179"/><text x="97.1621%" y="399.50"></text></g><g><title>std::io::default_read_exact (57 samples, 0.03%)</title><rect x="96.9673%" y="373" width="0.0258%" height="15" fill="rgb(250,160,48)" fg:x="214259" fg:w="57"/><text x="97.2173%" y="383.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (57 samples, 0.03%)</title><rect x="96.9673%" y="357" width="0.0258%" height="15" fill="rgb(244,216,33)" fg:x="214259" fg:w="57"/><text x="97.2173%" y="367.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (57 samples, 0.03%)</title><rect x="96.9673%" y="341" width="0.0258%" height="15" fill="rgb(207,157,5)" fg:x="214259" fg:w="57"/><text x="97.2173%" y="351.50"></text></g><g><title>std::io::Read::read_buf (57 samples, 0.03%)</title><rect x="96.9673%" y="325" width="0.0258%" height="15" fill="rgb(228,199,8)" fg:x="214259" fg:w="57"/><text x="97.2173%" y="335.50"></text></g><g><title>std::io::default_read_buf (57 samples, 0.03%)</title><rect x="96.9673%" y="309" width="0.0258%" height="15" fill="rgb(227,80,20)" fg:x="214259" fg:w="57"/><text x="97.2173%" y="319.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (57 samples, 0.03%)</title><rect x="96.9673%" y="293" width="0.0258%" height="15" fill="rgb(222,9,33)" fg:x="214259" fg:w="57"/><text x="97.2173%" y="303.50"></text></g><g><title>std::net::udp::UdpSocket::recv (57 samples, 0.03%)</title><rect x="96.9673%" y="277" width="0.0258%" height="15" fill="rgb(239,44,28)" fg:x="214259" fg:w="57"/><text x="97.2173%" y="287.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv (57 samples, 0.03%)</title><rect x="96.9673%" y="261" width="0.0258%" height="15" fill="rgb(249,187,43)" fg:x="214259" fg:w="57"/><text x="97.2173%" y="271.50"></text></g><g><title>std::sys::unix::net::Socket::read (57 samples, 0.03%)</title><rect x="96.9673%" y="245" width="0.0258%" height="15" fill="rgb(216,141,28)" fg:x="214259" fg:w="57"/><text x="97.2173%" y="255.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (57 samples, 0.03%)</title><rect x="96.9673%" y="229" width="0.0258%" height="15" fill="rgb(230,154,53)" fg:x="214259" fg:w="57"/><text x="97.2173%" y="239.50"></text></g><g><title>recv (57 samples, 0.03%)</title><rect x="96.9673%" y="213" width="0.0258%" height="15" fill="rgb(227,82,4)" fg:x="214259" fg:w="57"/><text x="97.2173%" y="223.50"></text></g><g><title>[unknown] (56 samples, 0.03%)</title><rect x="96.9678%" y="197" width="0.0253%" height="15" fill="rgb(220,107,16)" fg:x="214260" fg:w="56"/><text x="97.2178%" y="207.50"></text></g><g><title>[unknown] (56 samples, 0.03%)</title><rect x="96.9678%" y="181" width="0.0253%" height="15" fill="rgb(207,187,2)" fg:x="214260" fg:w="56"/><text x="97.2178%" y="191.50"></text></g><g><title>[unknown] (53 samples, 0.02%)</title><rect x="96.9691%" y="165" width="0.0240%" height="15" fill="rgb(210,162,52)" fg:x="214263" fg:w="53"/><text x="97.2191%" y="175.50"></text></g><g><title>[unknown] (53 samples, 0.02%)</title><rect x="96.9691%" y="149" width="0.0240%" height="15" fill="rgb(217,216,49)" fg:x="214263" fg:w="53"/><text x="97.2191%" y="159.50"></text></g><g><title>[unknown] (51 samples, 0.02%)</title><rect x="96.9700%" y="133" width="0.0231%" height="15" fill="rgb(218,146,49)" fg:x="214265" fg:w="51"/><text x="97.2200%" y="143.50"></text></g><g><title>[unknown] (51 samples, 0.02%)</title><rect x="96.9700%" y="117" width="0.0231%" height="15" fill="rgb(216,55,40)" fg:x="214265" fg:w="51"/><text x="97.2200%" y="127.50"></text></g><g><title>[unknown] (48 samples, 0.02%)</title><rect x="96.9714%" y="101" width="0.0217%" height="15" fill="rgb(208,196,21)" fg:x="214268" fg:w="48"/><text x="97.2214%" y="111.50"></text></g><g><title>[unknown] (46 samples, 0.02%)</title><rect x="96.9723%" y="85" width="0.0208%" height="15" fill="rgb(242,117,42)" fg:x="214270" fg:w="46"/><text x="97.2223%" y="95.50"></text></g><g><title>[unknown] (45 samples, 0.02%)</title><rect x="96.9728%" y="69" width="0.0204%" height="15" fill="rgb(210,11,23)" fg:x="214271" fg:w="45"/><text x="97.2228%" y="79.50"></text></g><g><title>[unknown] (44 samples, 0.02%)</title><rect x="96.9732%" y="53" width="0.0199%" height="15" fill="rgb(217,110,2)" fg:x="214272" fg:w="44"/><text x="97.2232%" y="63.50"></text></g><g><title>[unknown] (39 samples, 0.02%)</title><rect x="96.9755%" y="37" width="0.0177%" height="15" fill="rgb(229,77,54)" fg:x="214277" fg:w="39"/><text x="97.2255%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (393 samples, 0.18%)</title><rect x="96.9080%" y="501" width="0.1779%" height="15" fill="rgb(218,53,16)" fg:x="214128" fg:w="393"/><text x="97.1580%" y="511.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker::{{closure}} (393 samples, 0.18%)</title><rect x="96.9080%" y="485" width="0.1779%" height="15" fill="rgb(215,38,13)" fg:x="214128" fg:w="393"/><text x="97.1580%" y="495.50"></text></g><g><title>rmp::decode::read_marker (393 samples, 0.18%)</title><rect x="96.9080%" y="469" width="0.1779%" height="15" fill="rgb(235,42,18)" fg:x="214128" fg:w="393"/><text x="97.1580%" y="479.50"></text></g><g><title>rmp::marker::Marker::from_u8 (205 samples, 0.09%)</title><rect x="96.9931%" y="453" width="0.0928%" height="15" fill="rgb(219,66,54)" fg:x="214316" fg:w="205"/><text x="97.2431%" y="463.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (640 samples, 0.29%)</title><rect x="96.7994%" y="581" width="0.2896%" height="15" fill="rgb(222,205,4)" fg:x="213888" fg:w="640"/><text x="97.0494%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u8&gt;::deserialize (640 samples, 0.29%)</title><rect x="96.7994%" y="565" width="0.2896%" height="15" fill="rgb(227,213,46)" fg:x="213888" fg:w="640"/><text x="97.0494%" y="575.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_u8 (640 samples, 0.29%)</title><rect x="96.7994%" y="549" width="0.2896%" height="15" fill="rgb(250,145,42)" fg:x="213888" fg:w="640"/><text x="97.0494%" y="559.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (637 samples, 0.29%)</title><rect x="96.8008%" y="533" width="0.2883%" height="15" fill="rgb(219,15,2)" fg:x="213891" fg:w="637"/><text x="97.0508%" y="543.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::take_or_read_marker (400 samples, 0.18%)</title><rect x="96.9080%" y="517" width="0.1810%" height="15" fill="rgb(231,181,52)" fg:x="214128" fg:w="400"/><text x="97.1580%" y="527.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (698 samples, 0.32%)</title><rect x="96.7976%" y="629" width="0.3159%" height="15" fill="rgb(235,1,42)" fg:x="213884" fg:w="698"/><text x="97.0476%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (698 samples, 0.32%)</title><rect x="96.7976%" y="613" width="0.3159%" height="15" fill="rgb(249,88,27)" fg:x="213884" fg:w="698"/><text x="97.0476%" y="623.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (698 samples, 0.32%)</title><rect x="96.7976%" y="597" width="0.3159%" height="15" fill="rgb(235,145,16)" fg:x="213884" fg:w="698"/><text x="97.0476%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (54 samples, 0.02%)</title><rect x="97.0891%" y="581" width="0.0244%" height="15" fill="rgb(237,114,19)" fg:x="214528" fg:w="54"/><text x="97.3391%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (35 samples, 0.02%)</title><rect x="97.1135%" y="629" width="0.0158%" height="15" fill="rgb(238,51,50)" fg:x="214582" fg:w="35"/><text x="97.3635%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (760 samples, 0.34%)</title><rect x="96.7917%" y="645" width="0.3440%" height="15" fill="rgb(205,194,25)" fg:x="213871" fg:w="760"/><text x="97.0417%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (782 samples, 0.35%)</title><rect x="96.7858%" y="709" width="0.3539%" height="15" fill="rgb(215,203,17)" fg:x="213858" fg:w="782"/><text x="97.0358%" y="719.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (782 samples, 0.35%)</title><rect x="96.7858%" y="693" width="0.3539%" height="15" fill="rgb(233,112,49)" fg:x="213858" fg:w="782"/><text x="97.0358%" y="703.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_seq (782 samples, 0.35%)</title><rect x="96.7858%" y="677" width="0.3539%" height="15" fill="rgb(241,130,26)" fg:x="213858" fg:w="782"/><text x="97.0358%" y="687.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (782 samples, 0.35%)</title><rect x="96.7858%" y="661" width="0.3539%" height="15" fill="rgb(252,223,19)" fg:x="213858" fg:w="782"/><text x="97.0358%" y="671.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (791 samples, 0.36%)</title><rect x="96.7845%" y="757" width="0.3580%" height="15" fill="rgb(211,95,25)" fg:x="213855" fg:w="791"/><text x="97.0345%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (791 samples, 0.36%)</title><rect x="96.7845%" y="741" width="0.3580%" height="15" fill="rgb(251,182,27)" fg:x="213855" fg:w="791"/><text x="97.0345%" y="751.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (791 samples, 0.36%)</title><rect x="96.7845%" y="725" width="0.3580%" height="15" fill="rgb(238,24,4)" fg:x="213855" fg:w="791"/><text x="97.0345%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (24 samples, 0.01%)</title><rect x="97.1456%" y="757" width="0.0109%" height="15" fill="rgb(224,220,25)" fg:x="214653" fg:w="24"/><text x="97.3956%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (24 samples, 0.01%)</title><rect x="97.1456%" y="741" width="0.0109%" height="15" fill="rgb(239,133,26)" fg:x="214653" fg:w="24"/><text x="97.3956%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (24 samples, 0.01%)</title><rect x="97.1456%" y="725" width="0.0109%" height="15" fill="rgb(211,94,48)" fg:x="214653" fg:w="24"/><text x="97.3956%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (24 samples, 0.01%)</title><rect x="97.1456%" y="709" width="0.0109%" height="15" fill="rgb(239,87,6)" fg:x="214653" fg:w="24"/><text x="97.3956%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.01%)</title><rect x="97.1456%" y="693" width="0.0109%" height="15" fill="rgb(227,62,0)" fg:x="214653" fg:w="24"/><text x="97.3956%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.01%)</title><rect x="97.1456%" y="677" width="0.0109%" height="15" fill="rgb(211,226,4)" fg:x="214653" fg:w="24"/><text x="97.3956%" y="687.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.01%)</title><rect x="97.1456%" y="661" width="0.0109%" height="15" fill="rgb(253,38,52)" fg:x="214653" fg:w="24"/><text x="97.3956%" y="671.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (825 samples, 0.37%)</title><rect x="96.7836%" y="773" width="0.3734%" height="15" fill="rgb(229,126,40)" fg:x="213853" fg:w="825"/><text x="97.0336%" y="783.50"></text></g><g><title>&lt;bitcoin::blockdata::witness::Witness as serde::de::Deserialize&gt;::deserialize (941 samples, 0.43%)</title><rect x="96.7324%" y="837" width="0.4259%" height="15" fill="rgb(229,165,44)" fg:x="213740" fg:w="941"/><text x="96.9824%" y="847.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (834 samples, 0.38%)</title><rect x="96.7809%" y="821" width="0.3774%" height="15" fill="rgb(247,95,47)" fg:x="213847" fg:w="834"/><text x="97.0309%" y="831.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_seq (834 samples, 0.38%)</title><rect x="96.7809%" y="805" width="0.3774%" height="15" fill="rgb(216,140,30)" fg:x="213847" fg:w="834"/><text x="97.0309%" y="815.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (834 samples, 0.38%)</title><rect x="96.7809%" y="789" width="0.3774%" height="15" fill="rgb(246,214,8)" fg:x="213847" fg:w="834"/><text x="97.0309%" y="799.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,055 samples, 0.48%)</title><rect x="96.6867%" y="853" width="0.4775%" height="15" fill="rgb(227,224,15)" fg:x="213639" fg:w="1055"/><text x="96.9367%" y="863.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::_::&lt;impl serde::de::Deserialize for bitcoin::blockdata::transaction::TxIn&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1,065 samples, 0.48%)</title><rect x="96.6854%" y="917" width="0.4820%" height="15" fill="rgb(233,175,4)" fg:x="213636" fg:w="1065"/><text x="96.9354%" y="927.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (1,063 samples, 0.48%)</title><rect x="96.6863%" y="901" width="0.4811%" height="15" fill="rgb(221,66,45)" fg:x="213638" fg:w="1063"/><text x="96.9363%" y="911.50"></text></g><g><title>serde::de::SeqAccess::next_element (1,063 samples, 0.48%)</title><rect x="96.6863%" y="885" width="0.4811%" height="15" fill="rgb(221,178,18)" fg:x="213638" fg:w="1063"/><text x="96.9363%" y="895.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,063 samples, 0.48%)</title><rect x="96.6863%" y="869" width="0.4811%" height="15" fill="rgb(213,81,29)" fg:x="213638" fg:w="1063"/><text x="96.9363%" y="879.50"></text></g><g><title>bitcoin::blockdata::transaction::_::&lt;impl serde::de::Deserialize for bitcoin::blockdata::transaction::TxIn&gt;::deserialize (1,089 samples, 0.49%)</title><rect x="96.6768%" y="965" width="0.4928%" height="15" fill="rgb(220,89,49)" fg:x="213617" fg:w="1089"/><text x="96.9268%" y="975.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,089 samples, 0.49%)</title><rect x="96.6768%" y="949" width="0.4928%" height="15" fill="rgb(227,60,33)" fg:x="213617" fg:w="1089"/><text x="96.9268%" y="959.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1,089 samples, 0.49%)</title><rect x="96.6768%" y="933" width="0.4928%" height="15" fill="rgb(205,113,12)" fg:x="213617" fg:w="1089"/><text x="96.9268%" y="943.50"></text></g><g><title>[libc.so.6] (48 samples, 0.02%)</title><rect x="97.1837%" y="597" width="0.0217%" height="15" fill="rgb(211,32,1)" fg:x="214737" fg:w="48"/><text x="97.4337%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (57 samples, 0.03%)</title><rect x="97.1800%" y="709" width="0.0258%" height="15" fill="rgb(246,2,12)" fg:x="214729" fg:w="57"/><text x="97.4300%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (57 samples, 0.03%)</title><rect x="97.1800%" y="693" width="0.0258%" height="15" fill="rgb(243,37,27)" fg:x="214729" fg:w="57"/><text x="97.4300%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (57 samples, 0.03%)</title><rect x="97.1800%" y="677" width="0.0258%" height="15" fill="rgb(248,211,31)" fg:x="214729" fg:w="57"/><text x="97.4300%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (57 samples, 0.03%)</title><rect x="97.1800%" y="661" width="0.0258%" height="15" fill="rgb(242,146,47)" fg:x="214729" fg:w="57"/><text x="97.4300%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (57 samples, 0.03%)</title><rect x="97.1800%" y="645" width="0.0258%" height="15" fill="rgb(206,70,20)" fg:x="214729" fg:w="57"/><text x="97.4300%" y="655.50"></text></g><g><title>alloc::alloc::alloc (57 samples, 0.03%)</title><rect x="97.1800%" y="629" width="0.0258%" height="15" fill="rgb(215,10,51)" fg:x="214729" fg:w="57"/><text x="97.4300%" y="639.50"></text></g><g><title>malloc (56 samples, 0.03%)</title><rect x="97.1805%" y="613" width="0.0253%" height="15" fill="rgb(243,178,53)" fg:x="214730" fg:w="56"/><text x="97.4305%" y="623.50"></text></g><g><title>&lt;&lt;bitcoin::blockdata::script::Script as serde::de::Deserialize&gt;::deserialize::BytesVisitor as serde::de::Visitor&gt;::visit_bytes (63 samples, 0.03%)</title><rect x="97.1782%" y="789" width="0.0285%" height="15" fill="rgb(233,221,20)" fg:x="214725" fg:w="63"/><text x="97.4282%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (60 samples, 0.03%)</title><rect x="97.1796%" y="773" width="0.0272%" height="15" fill="rgb(218,95,35)" fg:x="214728" fg:w="60"/><text x="97.4296%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (60 samples, 0.03%)</title><rect x="97.1796%" y="757" width="0.0272%" height="15" fill="rgb(229,13,5)" fg:x="214728" fg:w="60"/><text x="97.4296%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (60 samples, 0.03%)</title><rect x="97.1796%" y="741" width="0.0272%" height="15" fill="rgb(252,164,30)" fg:x="214728" fg:w="60"/><text x="97.4296%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (60 samples, 0.03%)</title><rect x="97.1796%" y="725" width="0.0272%" height="15" fill="rgb(232,68,36)" fg:x="214728" fg:w="60"/><text x="97.4296%" y="735.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (32 samples, 0.01%)</title><rect x="97.2126%" y="661" width="0.0145%" height="15" fill="rgb(219,59,54)" fg:x="214801" fg:w="32"/><text x="97.4626%" y="671.50"></text></g><g><title>std::io::Read::read_buf (32 samples, 0.01%)</title><rect x="97.2126%" y="645" width="0.0145%" height="15" fill="rgb(250,92,33)" fg:x="214801" fg:w="32"/><text x="97.4626%" y="655.50"></text></g><g><title>std::io::default_read_buf (32 samples, 0.01%)</title><rect x="97.2126%" y="629" width="0.0145%" height="15" fill="rgb(229,162,54)" fg:x="214801" fg:w="32"/><text x="97.4626%" y="639.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (32 samples, 0.01%)</title><rect x="97.2126%" y="613" width="0.0145%" height="15" fill="rgb(244,114,52)" fg:x="214801" fg:w="32"/><text x="97.4626%" y="623.50"></text></g><g><title>std::net::udp::UdpSocket::recv (32 samples, 0.01%)</title><rect x="97.2126%" y="597" width="0.0145%" height="15" fill="rgb(212,211,43)" fg:x="214801" fg:w="32"/><text x="97.4626%" y="607.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv (32 samples, 0.01%)</title><rect x="97.2126%" y="581" width="0.0145%" height="15" fill="rgb(226,147,8)" fg:x="214801" fg:w="32"/><text x="97.4626%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (32 samples, 0.01%)</title><rect x="97.2126%" y="565" width="0.0145%" height="15" fill="rgb(226,23,13)" fg:x="214801" fg:w="32"/><text x="97.4626%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (32 samples, 0.01%)</title><rect x="97.2126%" y="549" width="0.0145%" height="15" fill="rgb(240,63,4)" fg:x="214801" fg:w="32"/><text x="97.4626%" y="559.50"></text></g><g><title>recv (32 samples, 0.01%)</title><rect x="97.2126%" y="533" width="0.0145%" height="15" fill="rgb(221,1,32)" fg:x="214801" fg:w="32"/><text x="97.4626%" y="543.50"></text></g><g><title>[unknown] (32 samples, 0.01%)</title><rect x="97.2126%" y="517" width="0.0145%" height="15" fill="rgb(242,117,10)" fg:x="214801" fg:w="32"/><text x="97.4626%" y="527.50"></text></g><g><title>[unknown] (30 samples, 0.01%)</title><rect x="97.2135%" y="501" width="0.0136%" height="15" fill="rgb(249,172,44)" fg:x="214803" fg:w="30"/><text x="97.4635%" y="511.50"></text></g><g><title>[unknown] (30 samples, 0.01%)</title><rect x="97.2135%" y="485" width="0.0136%" height="15" fill="rgb(244,46,45)" fg:x="214803" fg:w="30"/><text x="97.4635%" y="495.50"></text></g><g><title>[unknown] (30 samples, 0.01%)</title><rect x="97.2135%" y="469" width="0.0136%" height="15" fill="rgb(206,43,17)" fg:x="214803" fg:w="30"/><text x="97.4635%" y="479.50"></text></g><g><title>[unknown] (29 samples, 0.01%)</title><rect x="97.2140%" y="453" width="0.0131%" height="15" fill="rgb(239,218,39)" fg:x="214804" fg:w="29"/><text x="97.4640%" y="463.50"></text></g><g><title>[unknown] (29 samples, 0.01%)</title><rect x="97.2140%" y="437" width="0.0131%" height="15" fill="rgb(208,169,54)" fg:x="214804" fg:w="29"/><text x="97.4640%" y="447.50"></text></g><g><title>[unknown] (28 samples, 0.01%)</title><rect x="97.2144%" y="421" width="0.0127%" height="15" fill="rgb(247,25,42)" fg:x="214805" fg:w="28"/><text x="97.4644%" y="431.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="97.2158%" y="405" width="0.0113%" height="15" fill="rgb(226,23,31)" fg:x="214808" fg:w="25"/><text x="97.4658%" y="415.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="97.2158%" y="389" width="0.0113%" height="15" fill="rgb(247,16,28)" fg:x="214808" fg:w="25"/><text x="97.4658%" y="399.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="97.2162%" y="373" width="0.0109%" height="15" fill="rgb(231,147,38)" fg:x="214809" fg:w="24"/><text x="97.4662%" y="383.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (36 samples, 0.02%)</title><rect x="97.2122%" y="709" width="0.0163%" height="15" fill="rgb(253,81,48)" fg:x="214800" fg:w="36"/><text x="97.4622%" y="719.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (36 samples, 0.02%)</title><rect x="97.2122%" y="693" width="0.0163%" height="15" fill="rgb(249,222,43)" fg:x="214800" fg:w="36"/><text x="97.4622%" y="703.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_buf (36 samples, 0.02%)</title><rect x="97.2122%" y="677" width="0.0163%" height="15" fill="rgb(221,3,27)" fg:x="214800" fg:w="36"/><text x="97.4622%" y="687.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (39 samples, 0.02%)</title><rect x="97.2122%" y="725" width="0.0177%" height="15" fill="rgb(228,180,5)" fg:x="214800" fg:w="39"/><text x="97.4622%" y="735.50"></text></g><g><title>rmp_serde::decode::read_bin_data (45 samples, 0.02%)</title><rect x="97.2099%" y="789" width="0.0204%" height="15" fill="rgb(227,131,42)" fg:x="214795" fg:w="45"/><text x="97.4599%" y="799.50"></text></g><g><title>&lt;rmp_serde::decode::ReadReader&lt;R&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (44 samples, 0.02%)</title><rect x="97.2104%" y="773" width="0.0199%" height="15" fill="rgb(212,3,39)" fg:x="214796" fg:w="44"/><text x="97.4604%" y="783.50"></text></g><g><title>std::io::Read::read_to_end (42 samples, 0.02%)</title><rect x="97.2113%" y="757" width="0.0190%" height="15" fill="rgb(226,45,5)" fg:x="214798" fg:w="42"/><text x="97.4613%" y="767.50"></text></g><g><title>std::io::default_read_to_end (41 samples, 0.02%)</title><rect x="97.2117%" y="741" width="0.0186%" height="15" fill="rgb(215,167,45)" fg:x="214799" fg:w="41"/><text x="97.4617%" y="751.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as serde::de::Deserialize&gt;::deserialize (122 samples, 0.06%)</title><rect x="97.1760%" y="837" width="0.0552%" height="15" fill="rgb(250,218,53)" fg:x="214720" fg:w="122"/><text x="97.4260%" y="847.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_bytes (122 samples, 0.06%)</title><rect x="97.1760%" y="821" width="0.0552%" height="15" fill="rgb(207,140,0)" fg:x="214720" fg:w="122"/><text x="97.4260%" y="831.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (122 samples, 0.06%)</title><rect x="97.1760%" y="805" width="0.0552%" height="15" fill="rgb(238,133,51)" fg:x="214720" fg:w="122"/><text x="97.4260%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (136 samples, 0.06%)</title><rect x="97.1760%" y="853" width="0.0615%" height="15" fill="rgb(218,203,53)" fg:x="214720" fg:w="136"/><text x="97.4260%" y="863.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::_::&lt;impl serde::de::Deserialize for bitcoin::blockdata::transaction::TxOut&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (142 samples, 0.06%)</title><rect x="97.1746%" y="917" width="0.0643%" height="15" fill="rgb(226,184,25)" fg:x="214717" fg:w="142"/><text x="97.4246%" y="927.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (141 samples, 0.06%)</title><rect x="97.1751%" y="901" width="0.0638%" height="15" fill="rgb(231,121,21)" fg:x="214718" fg:w="141"/><text x="97.4251%" y="911.50"></text></g><g><title>serde::de::SeqAccess::next_element (141 samples, 0.06%)</title><rect x="97.1751%" y="885" width="0.0638%" height="15" fill="rgb(251,14,34)" fg:x="214718" fg:w="141"/><text x="97.4251%" y="895.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (141 samples, 0.06%)</title><rect x="97.1751%" y="869" width="0.0638%" height="15" fill="rgb(249,193,11)" fg:x="214718" fg:w="141"/><text x="97.4251%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,246 samples, 0.56%)</title><rect x="96.6768%" y="981" width="0.5639%" height="15" fill="rgb(220,172,37)" fg:x="213617" fg:w="1246"/><text x="96.9268%" y="991.50"></text></g><g><title>bitcoin::blockdata::transaction::_::&lt;impl serde::de::Deserialize for bitcoin::blockdata::transaction::TxOut&gt;::deserialize (157 samples, 0.07%)</title><rect x="97.1696%" y="965" width="0.0711%" height="15" fill="rgb(231,229,43)" fg:x="214706" fg:w="157"/><text x="97.4196%" y="975.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_struct (157 samples, 0.07%)</title><rect x="97.1696%" y="949" width="0.0711%" height="15" fill="rgb(250,161,5)" fg:x="214706" fg:w="157"/><text x="97.4196%" y="959.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (157 samples, 0.07%)</title><rect x="97.1696%" y="933" width="0.0711%" height="15" fill="rgb(218,225,18)" fg:x="214706" fg:w="157"/><text x="97.4196%" y="943.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (1,259 samples, 0.57%)</title><rect x="96.6768%" y="1029" width="0.5698%" height="15" fill="rgb(245,45,42)" fg:x="213617" fg:w="1259"/><text x="96.9268%" y="1039.50"></text></g><g><title>serde::de::SeqAccess::next_element (1,259 samples, 0.57%)</title><rect x="96.6768%" y="1013" width="0.5698%" height="15" fill="rgb(211,115,1)" fg:x="213617" fg:w="1259"/><text x="96.9268%" y="1023.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,259 samples, 0.57%)</title><rect x="96.6768%" y="997" width="0.5698%" height="15" fill="rgb(248,133,52)" fg:x="213617" fg:w="1259"/><text x="96.9268%" y="1007.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,295 samples, 0.59%)</title><rect x="96.6741%" y="1045" width="0.5861%" height="15" fill="rgb(238,100,21)" fg:x="213611" fg:w="1295"/><text x="96.9241%" y="1055.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (1,315 samples, 0.60%)</title><rect x="96.6668%" y="1093" width="0.5951%" height="15" fill="rgb(247,144,11)" fg:x="213595" fg:w="1315"/><text x="96.9168%" y="1103.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,315 samples, 0.60%)</title><rect x="96.6668%" y="1077" width="0.5951%" height="15" fill="rgb(206,164,16)" fg:x="213595" fg:w="1315"/><text x="96.9168%" y="1087.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1,314 samples, 0.59%)</title><rect x="96.6673%" y="1061" width="0.5947%" height="15" fill="rgb(222,34,3)" fg:x="213596" fg:w="1314"/><text x="96.9173%" y="1071.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,321 samples, 0.60%)</title><rect x="96.6655%" y="1109" width="0.5978%" height="15" fill="rgb(248,82,4)" fg:x="213592" fg:w="1321"/><text x="96.9155%" y="1119.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::_::&lt;impl serde::de::Deserialize for bitcoin::blockdata::transaction::Transaction&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1,336 samples, 0.60%)</title><rect x="96.6632%" y="1173" width="0.6046%" height="15" fill="rgb(228,81,46)" fg:x="213587" fg:w="1336"/><text x="96.9132%" y="1183.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (1,333 samples, 0.60%)</title><rect x="96.6646%" y="1157" width="0.6033%" height="15" fill="rgb(227,67,47)" fg:x="213590" fg:w="1333"/><text x="96.9146%" y="1167.50"></text></g><g><title>serde::de::SeqAccess::next_element (1,333 samples, 0.60%)</title><rect x="96.6646%" y="1141" width="0.6033%" height="15" fill="rgb(215,93,53)" fg:x="213590" fg:w="1333"/><text x="96.9146%" y="1151.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,333 samples, 0.60%)</title><rect x="96.6646%" y="1125" width="0.6033%" height="15" fill="rgb(248,194,39)" fg:x="213590" fg:w="1333"/><text x="96.9146%" y="1135.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,345 samples, 0.61%)</title><rect x="96.6596%" y="1237" width="0.6087%" height="15" fill="rgb(215,5,19)" fg:x="213579" fg:w="1345"/><text x="96.9096%" y="1247.50"></text></g><g><title>bitcoin::blockdata::transaction::_::&lt;impl serde::de::Deserialize for bitcoin::blockdata::transaction::Transaction&gt;::deserialize (1,345 samples, 0.61%)</title><rect x="96.6596%" y="1221" width="0.6087%" height="15" fill="rgb(226,215,51)" fg:x="213579" fg:w="1345"/><text x="96.9096%" y="1231.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,345 samples, 0.61%)</title><rect x="96.6596%" y="1205" width="0.6087%" height="15" fill="rgb(225,56,26)" fg:x="213579" fg:w="1345"/><text x="96.9096%" y="1215.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1,345 samples, 0.61%)</title><rect x="96.6596%" y="1189" width="0.6087%" height="15" fill="rgb(222,75,29)" fg:x="213579" fg:w="1345"/><text x="96.9096%" y="1199.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (1,351 samples, 0.61%)</title><rect x="96.6596%" y="1285" width="0.6114%" height="15" fill="rgb(236,139,6)" fg:x="213579" fg:w="1351"/><text x="96.9096%" y="1295.50"></text></g><g><title>serde::de::SeqAccess::next_element (1,351 samples, 0.61%)</title><rect x="96.6596%" y="1269" width="0.6114%" height="15" fill="rgb(223,137,36)" fg:x="213579" fg:w="1351"/><text x="96.9096%" y="1279.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,351 samples, 0.61%)</title><rect x="96.6596%" y="1253" width="0.6114%" height="15" fill="rgb(226,99,2)" fg:x="213579" fg:w="1351"/><text x="96.9096%" y="1263.50"></text></g><g><title>[libc.so.6] (24 samples, 0.01%)</title><rect x="97.2737%" y="1157" width="0.0109%" height="15" fill="rgb(206,133,23)" fg:x="214936" fg:w="24"/><text x="97.5237%" y="1167.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,382 samples, 0.63%)</title><rect x="96.6596%" y="1301" width="0.6255%" height="15" fill="rgb(243,173,15)" fg:x="213579" fg:w="1382"/><text x="96.9096%" y="1311.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (26 samples, 0.01%)</title><rect x="97.2733%" y="1285" width="0.0118%" height="15" fill="rgb(228,69,28)" fg:x="214935" fg:w="26"/><text x="97.5233%" y="1295.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (26 samples, 0.01%)</title><rect x="97.2733%" y="1269" width="0.0118%" height="15" fill="rgb(212,51,22)" fg:x="214935" fg:w="26"/><text x="97.5233%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (26 samples, 0.01%)</title><rect x="97.2733%" y="1253" width="0.0118%" height="15" fill="rgb(227,113,0)" fg:x="214935" fg:w="26"/><text x="97.5233%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (26 samples, 0.01%)</title><rect x="97.2733%" y="1237" width="0.0118%" height="15" fill="rgb(252,84,27)" fg:x="214935" fg:w="26"/><text x="97.5233%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.01%)</title><rect x="97.2733%" y="1221" width="0.0118%" height="15" fill="rgb(223,145,39)" fg:x="214935" fg:w="26"/><text x="97.5233%" y="1231.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.01%)</title><rect x="97.2733%" y="1205" width="0.0118%" height="15" fill="rgb(239,219,30)" fg:x="214935" fg:w="26"/><text x="97.5233%" y="1215.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.01%)</title><rect x="97.2733%" y="1189" width="0.0118%" height="15" fill="rgb(224,196,39)" fg:x="214935" fg:w="26"/><text x="97.5233%" y="1199.50"></text></g><g><title>malloc (26 samples, 0.01%)</title><rect x="97.2733%" y="1173" width="0.0118%" height="15" fill="rgb(205,35,43)" fg:x="214935" fg:w="26"/><text x="97.5233%" y="1183.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,442 samples, 0.65%)</title><rect x="96.6329%" y="1365" width="0.6526%" height="15" fill="rgb(228,201,21)" fg:x="213520" fg:w="1442"/><text x="96.8829%" y="1375.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (1,388 samples, 0.63%)</title><rect x="96.6573%" y="1349" width="0.6282%" height="15" fill="rgb(237,118,16)" fg:x="213574" fg:w="1388"/><text x="96.9073%" y="1359.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,388 samples, 0.63%)</title><rect x="96.6573%" y="1333" width="0.6282%" height="15" fill="rgb(241,17,19)" fg:x="213574" fg:w="1388"/><text x="96.9073%" y="1343.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1,388 samples, 0.63%)</title><rect x="96.6573%" y="1317" width="0.6282%" height="15" fill="rgb(214,10,25)" fg:x="213574" fg:w="1388"/><text x="96.9073%" y="1327.50"></text></g><g><title>bitcoin::blockdata::block::_::&lt;impl serde::de::Deserialize for bitcoin::blockdata::block::Block&gt;::deserialize (1,447 samples, 0.65%)</title><rect x="96.6315%" y="1477" width="0.6549%" height="15" fill="rgb(238,37,29)" fg:x="213517" fg:w="1447"/><text x="96.8815%" y="1487.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,447 samples, 0.65%)</title><rect x="96.6315%" y="1461" width="0.6549%" height="15" fill="rgb(253,83,25)" fg:x="213517" fg:w="1447"/><text x="96.8815%" y="1471.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1,447 samples, 0.65%)</title><rect x="96.6315%" y="1445" width="0.6549%" height="15" fill="rgb(234,192,12)" fg:x="213517" fg:w="1447"/><text x="96.8815%" y="1455.50"></text></g><g><title>&lt;bitcoin::blockdata::block::_::&lt;impl serde::de::Deserialize for bitcoin::blockdata::block::Block&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1,445 samples, 0.65%)</title><rect x="96.6324%" y="1429" width="0.6540%" height="15" fill="rgb(241,216,45)" fg:x="213519" fg:w="1445"/><text x="96.8824%" y="1439.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (1,445 samples, 0.65%)</title><rect x="96.6324%" y="1413" width="0.6540%" height="15" fill="rgb(242,22,33)" fg:x="213519" fg:w="1445"/><text x="96.8824%" y="1423.50"></text></g><g><title>serde::de::SeqAccess::next_element (1,445 samples, 0.65%)</title><rect x="96.6324%" y="1397" width="0.6540%" height="15" fill="rgb(231,105,49)" fg:x="213519" fg:w="1445"/><text x="96.8824%" y="1407.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,445 samples, 0.65%)</title><rect x="96.6324%" y="1381" width="0.6540%" height="15" fill="rgb(218,204,15)" fg:x="213519" fg:w="1445"/><text x="96.8824%" y="1391.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (143 samples, 0.06%)</title><rect x="97.3058%" y="1045" width="0.0647%" height="15" fill="rgb(235,138,41)" fg:x="215007" fg:w="143"/><text x="97.5558%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (143 samples, 0.06%)</title><rect x="97.3058%" y="1029" width="0.0647%" height="15" fill="rgb(246,0,9)" fg:x="215007" fg:w="143"/><text x="97.5558%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (143 samples, 0.06%)</title><rect x="97.3058%" y="1013" width="0.0647%" height="15" fill="rgb(210,74,4)" fg:x="215007" fg:w="143"/><text x="97.5558%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (143 samples, 0.06%)</title><rect x="97.3058%" y="997" width="0.0647%" height="15" fill="rgb(250,60,41)" fg:x="215007" fg:w="143"/><text x="97.5558%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (143 samples, 0.06%)</title><rect x="97.3058%" y="981" width="0.0647%" height="15" fill="rgb(220,115,12)" fg:x="215007" fg:w="143"/><text x="97.5558%" y="991.50"></text></g><g><title>alloc::alloc::alloc (143 samples, 0.06%)</title><rect x="97.3058%" y="965" width="0.0647%" height="15" fill="rgb(237,100,13)" fg:x="215007" fg:w="143"/><text x="97.5558%" y="975.50"></text></g><g><title>malloc (137 samples, 0.06%)</title><rect x="97.3086%" y="949" width="0.0620%" height="15" fill="rgb(213,55,26)" fg:x="215013" fg:w="137"/><text x="97.5586%" y="959.50"></text></g><g><title>[libc.so.6] (101 samples, 0.05%)</title><rect x="97.3249%" y="933" width="0.0457%" height="15" fill="rgb(216,17,4)" fg:x="215049" fg:w="101"/><text x="97.5749%" y="943.50"></text></g><g><title>[libc.so.6] (31 samples, 0.01%)</title><rect x="97.3565%" y="917" width="0.0140%" height="15" fill="rgb(220,153,47)" fg:x="215119" fg:w="31"/><text x="97.6065%" y="927.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (153 samples, 0.07%)</title><rect x="97.3036%" y="1157" width="0.0692%" height="15" fill="rgb(215,131,9)" fg:x="215002" fg:w="153"/><text x="97.5536%" y="1167.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (148 samples, 0.07%)</title><rect x="97.3058%" y="1141" width="0.0670%" height="15" fill="rgb(233,46,42)" fg:x="215007" fg:w="148"/><text x="97.5558%" y="1151.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (148 samples, 0.07%)</title><rect x="97.3058%" y="1125" width="0.0670%" height="15" fill="rgb(226,86,7)" fg:x="215007" fg:w="148"/><text x="97.5558%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (148 samples, 0.07%)</title><rect x="97.3058%" y="1109" width="0.0670%" height="15" fill="rgb(239,226,21)" fg:x="215007" fg:w="148"/><text x="97.5558%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (148 samples, 0.07%)</title><rect x="97.3058%" y="1093" width="0.0670%" height="15" fill="rgb(244,137,22)" fg:x="215007" fg:w="148"/><text x="97.5558%" y="1103.50"></text></g><g><title>alloc::slice::hack::to_vec (148 samples, 0.07%)</title><rect x="97.3058%" y="1077" width="0.0670%" height="15" fill="rgb(211,139,35)" fg:x="215007" fg:w="148"/><text x="97.5558%" y="1087.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (148 samples, 0.07%)</title><rect x="97.3058%" y="1061" width="0.0670%" height="15" fill="rgb(214,62,50)" fg:x="215007" fg:w="148"/><text x="97.5558%" y="1071.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (163 samples, 0.07%)</title><rect x="97.3882%" y="1029" width="0.0738%" height="15" fill="rgb(212,113,44)" fg:x="215189" fg:w="163"/><text x="97.6382%" y="1039.50"></text></g><g><title>std::io::Read::read_buf (163 samples, 0.07%)</title><rect x="97.3882%" y="1013" width="0.0738%" height="15" fill="rgb(226,150,43)" fg:x="215189" fg:w="163"/><text x="97.6382%" y="1023.50"></text></g><g><title>std::io::default_read_buf (163 samples, 0.07%)</title><rect x="97.3882%" y="997" width="0.0738%" height="15" fill="rgb(250,71,37)" fg:x="215189" fg:w="163"/><text x="97.6382%" y="1007.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (163 samples, 0.07%)</title><rect x="97.3882%" y="981" width="0.0738%" height="15" fill="rgb(219,76,19)" fg:x="215189" fg:w="163"/><text x="97.6382%" y="991.50"></text></g><g><title>std::net::udp::UdpSocket::recv (163 samples, 0.07%)</title><rect x="97.3882%" y="965" width="0.0738%" height="15" fill="rgb(250,39,11)" fg:x="215189" fg:w="163"/><text x="97.6382%" y="975.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv (163 samples, 0.07%)</title><rect x="97.3882%" y="949" width="0.0738%" height="15" fill="rgb(230,64,31)" fg:x="215189" fg:w="163"/><text x="97.6382%" y="959.50"></text></g><g><title>std::sys::unix::net::Socket::read (163 samples, 0.07%)</title><rect x="97.3882%" y="933" width="0.0738%" height="15" fill="rgb(208,222,23)" fg:x="215189" fg:w="163"/><text x="97.6382%" y="943.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (163 samples, 0.07%)</title><rect x="97.3882%" y="917" width="0.0738%" height="15" fill="rgb(227,125,18)" fg:x="215189" fg:w="163"/><text x="97.6382%" y="927.50"></text></g><g><title>recv (163 samples, 0.07%)</title><rect x="97.3882%" y="901" width="0.0738%" height="15" fill="rgb(234,210,9)" fg:x="215189" fg:w="163"/><text x="97.6382%" y="911.50"></text></g><g><title>[unknown] (157 samples, 0.07%)</title><rect x="97.3909%" y="885" width="0.0711%" height="15" fill="rgb(217,127,24)" fg:x="215195" fg:w="157"/><text x="97.6409%" y="895.50"></text></g><g><title>[unknown] (150 samples, 0.07%)</title><rect x="97.3941%" y="869" width="0.0679%" height="15" fill="rgb(239,141,48)" fg:x="215202" fg:w="150"/><text x="97.6441%" y="879.50"></text></g><g><title>[unknown] (143 samples, 0.06%)</title><rect x="97.3973%" y="853" width="0.0647%" height="15" fill="rgb(227,109,8)" fg:x="215209" fg:w="143"/><text x="97.6473%" y="863.50"></text></g><g><title>[unknown] (143 samples, 0.06%)</title><rect x="97.3973%" y="837" width="0.0647%" height="15" fill="rgb(235,184,23)" fg:x="215209" fg:w="143"/><text x="97.6473%" y="847.50"></text></g><g><title>[unknown] (139 samples, 0.06%)</title><rect x="97.3991%" y="821" width="0.0629%" height="15" fill="rgb(227,226,48)" fg:x="215213" fg:w="139"/><text x="97.6491%" y="831.50"></text></g><g><title>[unknown] (138 samples, 0.06%)</title><rect x="97.3995%" y="805" width="0.0625%" height="15" fill="rgb(206,150,11)" fg:x="215214" fg:w="138"/><text x="97.6495%" y="815.50"></text></g><g><title>[unknown] (134 samples, 0.06%)</title><rect x="97.4013%" y="789" width="0.0606%" height="15" fill="rgb(254,2,33)" fg:x="215218" fg:w="134"/><text x="97.6513%" y="799.50"></text></g><g><title>[unknown] (131 samples, 0.06%)</title><rect x="97.4027%" y="773" width="0.0593%" height="15" fill="rgb(243,160,20)" fg:x="215221" fg:w="131"/><text x="97.6527%" y="783.50"></text></g><g><title>[unknown] (121 samples, 0.05%)</title><rect x="97.4072%" y="757" width="0.0548%" height="15" fill="rgb(218,208,30)" fg:x="215231" fg:w="121"/><text x="97.6572%" y="767.50"></text></g><g><title>[unknown] (111 samples, 0.05%)</title><rect x="97.4117%" y="741" width="0.0502%" height="15" fill="rgb(224,120,49)" fg:x="215241" fg:w="111"/><text x="97.6617%" y="751.50"></text></g><g><title>[unknown] (102 samples, 0.05%)</title><rect x="97.4158%" y="725" width="0.0462%" height="15" fill="rgb(246,12,2)" fg:x="215250" fg:w="102"/><text x="97.6658%" y="735.50"></text></g><g><title>[unknown] (33 samples, 0.01%)</title><rect x="97.4470%" y="709" width="0.0149%" height="15" fill="rgb(236,117,3)" fg:x="215319" fg:w="33"/><text x="97.6970%" y="719.50"></text></g><g><title>[unknown] (31 samples, 0.01%)</title><rect x="97.4480%" y="693" width="0.0140%" height="15" fill="rgb(216,128,52)" fg:x="215321" fg:w="31"/><text x="97.6980%" y="703.50"></text></g><g><title>[unknown] (30 samples, 0.01%)</title><rect x="97.4484%" y="677" width="0.0136%" height="15" fill="rgb(246,145,19)" fg:x="215322" fg:w="30"/><text x="97.6984%" y="687.50"></text></g><g><title>[unknown] (30 samples, 0.01%)</title><rect x="97.4484%" y="661" width="0.0136%" height="15" fill="rgb(222,11,46)" fg:x="215322" fg:w="30"/><text x="97.6984%" y="671.50"></text></g><g><title>[unknown] (29 samples, 0.01%)</title><rect x="97.4489%" y="645" width="0.0131%" height="15" fill="rgb(245,82,36)" fg:x="215323" fg:w="29"/><text x="97.6989%" y="655.50"></text></g><g><title>[unknown] (27 samples, 0.01%)</title><rect x="97.4498%" y="629" width="0.0122%" height="15" fill="rgb(250,73,51)" fg:x="215325" fg:w="27"/><text x="97.6998%" y="639.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="97.4507%" y="613" width="0.0113%" height="15" fill="rgb(221,189,23)" fg:x="215327" fg:w="25"/><text x="97.7007%" y="623.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="97.4516%" y="597" width="0.0104%" height="15" fill="rgb(210,33,7)" fg:x="215329" fg:w="23"/><text x="97.7016%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (184 samples, 0.08%)</title><rect x="97.3860%" y="1077" width="0.0833%" height="15" fill="rgb(210,107,22)" fg:x="215184" fg:w="184"/><text x="97.6360%" y="1087.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (184 samples, 0.08%)</title><rect x="97.3860%" y="1061" width="0.0833%" height="15" fill="rgb(222,116,37)" fg:x="215184" fg:w="184"/><text x="97.6360%" y="1071.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_buf (184 samples, 0.08%)</title><rect x="97.3860%" y="1045" width="0.0833%" height="15" fill="rgb(254,17,48)" fg:x="215184" fg:w="184"/><text x="97.6360%" y="1055.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (187 samples, 0.08%)</title><rect x="97.3855%" y="1093" width="0.0846%" height="15" fill="rgb(224,36,32)" fg:x="215183" fg:w="187"/><text x="97.6355%" y="1103.50"></text></g><g><title>rmp_serde::decode::Deserializer&lt;R,C&gt;::read_str_data (383 samples, 0.17%)</title><rect x="97.3004%" y="1173" width="0.1733%" height="15" fill="rgb(232,90,46)" fg:x="214995" fg:w="383"/><text x="97.5504%" y="1183.50"></text></g><g><title>rmp_serde::decode::read_bin_data (210 samples, 0.10%)</title><rect x="97.3787%" y="1157" width="0.0950%" height="15" fill="rgb(241,66,40)" fg:x="215168" fg:w="210"/><text x="97.6287%" y="1167.50"></text></g><g><title>&lt;rmp_serde::decode::ReadReader&lt;R&gt; as rmp_serde::decode::ReadSlice&gt;::read_slice (210 samples, 0.10%)</title><rect x="97.3787%" y="1141" width="0.0950%" height="15" fill="rgb(249,184,29)" fg:x="215168" fg:w="210"/><text x="97.6287%" y="1151.50"></text></g><g><title>std::io::Read::read_to_end (207 samples, 0.09%)</title><rect x="97.3801%" y="1125" width="0.0937%" height="15" fill="rgb(231,181,1)" fg:x="215171" fg:w="207"/><text x="97.6301%" y="1135.50"></text></g><g><title>std::io::default_read_to_end (206 samples, 0.09%)</title><rect x="97.3805%" y="1109" width="0.0932%" height="15" fill="rgb(224,94,2)" fg:x="215172" fg:w="206"/><text x="97.6305%" y="1119.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (406 samples, 0.18%)</title><rect x="97.2977%" y="1221" width="0.1837%" height="15" fill="rgb(229,170,15)" fg:x="214989" fg:w="406"/><text x="97.5477%" y="1231.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_string (406 samples, 0.18%)</title><rect x="97.2977%" y="1205" width="0.1837%" height="15" fill="rgb(240,127,35)" fg:x="214989" fg:w="406"/><text x="97.5477%" y="1215.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (406 samples, 0.18%)</title><rect x="97.2977%" y="1189" width="0.1837%" height="15" fill="rgb(248,196,34)" fg:x="214989" fg:w="406"/><text x="97.5477%" y="1199.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (417 samples, 0.19%)</title><rect x="97.2977%" y="1237" width="0.1887%" height="15" fill="rgb(236,137,7)" fg:x="214989" fg:w="417"/><text x="97.5477%" y="1247.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (437 samples, 0.20%)</title><rect x="97.2950%" y="1285" width="0.1978%" height="15" fill="rgb(235,127,16)" fg:x="214983" fg:w="437"/><text x="97.5450%" y="1295.50"></text></g><g><title>serde::de::SeqAccess::next_element (437 samples, 0.20%)</title><rect x="97.2950%" y="1269" width="0.1978%" height="15" fill="rgb(250,192,54)" fg:x="214983" fg:w="437"/><text x="97.5450%" y="1279.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (437 samples, 0.20%)</title><rect x="97.2950%" y="1253" width="0.1978%" height="15" fill="rgb(218,98,20)" fg:x="214983" fg:w="437"/><text x="97.5450%" y="1263.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (465 samples, 0.21%)</title><rect x="97.2927%" y="1301" width="0.2104%" height="15" fill="rgb(230,176,47)" fg:x="214978" fg:w="465"/><text x="97.5427%" y="1311.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (472 samples, 0.21%)</title><rect x="97.2914%" y="1365" width="0.2136%" height="15" fill="rgb(244,2,33)" fg:x="214975" fg:w="472"/><text x="97.5414%" y="1375.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (472 samples, 0.21%)</title><rect x="97.2914%" y="1349" width="0.2136%" height="15" fill="rgb(231,100,17)" fg:x="214975" fg:w="472"/><text x="97.5414%" y="1359.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_seq (472 samples, 0.21%)</title><rect x="97.2914%" y="1333" width="0.2136%" height="15" fill="rgb(245,23,12)" fg:x="214975" fg:w="472"/><text x="97.5414%" y="1343.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (472 samples, 0.21%)</title><rect x="97.2914%" y="1317" width="0.2136%" height="15" fill="rgb(249,55,22)" fg:x="214975" fg:w="472"/><text x="97.5414%" y="1327.50"></text></g><g><title>&lt;json_types::blockchain::_::&lt;impl serde::de::Deserialize for json_types::blockchain::GetUtreexoProofResult&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (481 samples, 0.22%)</title><rect x="97.2891%" y="1429" width="0.2177%" height="15" fill="rgb(207,134,9)" fg:x="214970" fg:w="481"/><text x="97.5391%" y="1439.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (477 samples, 0.22%)</title><rect x="97.2909%" y="1413" width="0.2159%" height="15" fill="rgb(218,134,0)" fg:x="214974" fg:w="477"/><text x="97.5409%" y="1423.50"></text></g><g><title>serde::de::SeqAccess::next_element (477 samples, 0.22%)</title><rect x="97.2909%" y="1397" width="0.2159%" height="15" fill="rgb(213,212,33)" fg:x="214974" fg:w="477"/><text x="97.5409%" y="1407.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (477 samples, 0.22%)</title><rect x="97.2909%" y="1381" width="0.2159%" height="15" fill="rgb(252,106,18)" fg:x="214974" fg:w="477"/><text x="97.5409%" y="1391.50"></text></g><g><title>json_types::blockchain::_::&lt;impl serde::de::Deserialize for json_types::blockchain::GetUtreexoProofResult&gt;::deserialize (488 samples, 0.22%)</title><rect x="97.2864%" y="1477" width="0.2209%" height="15" fill="rgb(208,126,42)" fg:x="214964" fg:w="488"/><text x="97.5364%" y="1487.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_struct (488 samples, 0.22%)</title><rect x="97.2864%" y="1461" width="0.2209%" height="15" fill="rgb(246,175,29)" fg:x="214964" fg:w="488"/><text x="97.5364%" y="1471.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (488 samples, 0.22%)</title><rect x="97.2864%" y="1445" width="0.2209%" height="15" fill="rgb(215,13,50)" fg:x="214964" fg:w="488"/><text x="97.5364%" y="1455.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,940 samples, 0.88%)</title><rect x="96.6315%" y="1493" width="0.8780%" height="15" fill="rgb(216,172,15)" fg:x="213517" fg:w="1940"/><text x="96.8815%" y="1503.50"></text></g><g><title>&lt;utreexo_wallet::blockchain::cli_blockchain::_::&lt;impl serde::de::Deserialize for utreexo_wallet::blockchain::cli_blockchain::BlockData&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1,946 samples, 0.88%)</title><rect x="96.6311%" y="1557" width="0.8807%" height="15" fill="rgb(212,103,13)" fg:x="213516" fg:w="1946"/><text x="96.8811%" y="1567.50"></text></g><g><title>&lt;&amp;mut A as serde::de::SeqAccess&gt;::next_element (1,946 samples, 0.88%)</title><rect x="96.6311%" y="1541" width="0.8807%" height="15" fill="rgb(231,171,36)" fg:x="213516" fg:w="1946"/><text x="96.8811%" y="1551.50"></text></g><g><title>serde::de::SeqAccess::next_element (1,946 samples, 0.88%)</title><rect x="96.6311%" y="1525" width="0.8807%" height="15" fill="rgb(250,123,20)" fg:x="213516" fg:w="1946"/><text x="96.8811%" y="1535.50"></text></g><g><title>&lt;rmp_serde::decode::SeqAccess&lt;R,C&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,946 samples, 0.88%)</title><rect x="96.6311%" y="1509" width="0.8807%" height="15" fill="rgb(212,53,50)" fg:x="213516" fg:w="1946"/><text x="96.8811%" y="1519.50"></text></g><g><title>rmp_serde::decode::from_read (1,963 samples, 0.89%)</title><rect x="96.6261%" y="1621" width="0.8884%" height="15" fill="rgb(243,54,12)" fg:x="213505" fg:w="1963"/><text x="96.8761%" y="1631.50"></text></g><g><title>utreexo_wallet::blockchain::cli_blockchain::_::&lt;impl serde::de::Deserialize for utreexo_wallet::blockchain::cli_blockchain::BlockData&gt;::deserialize (1,957 samples, 0.89%)</title><rect x="96.6288%" y="1605" width="0.8857%" height="15" fill="rgb(234,101,34)" fg:x="213511" fg:w="1957"/><text x="96.8788%" y="1615.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_struct (1,957 samples, 0.89%)</title><rect x="96.6288%" y="1589" width="0.8857%" height="15" fill="rgb(254,67,22)" fg:x="213511" fg:w="1957"/><text x="96.8788%" y="1599.50"></text></g><g><title>&lt;&amp;mut rmp_serde::decode::Deserializer&lt;R,C&gt; as serde::de::Deserializer&gt;::deserialize_any (1,957 samples, 0.89%)</title><rect x="96.6288%" y="1573" width="0.8857%" height="15" fill="rgb(250,35,47)" fg:x="213511" fg:w="1957"/><text x="96.8788%" y="1583.50"></text></g><g><title>hashbrown::map::make_insert_hash (48 samples, 0.02%)</title><rect x="97.5163%" y="1589" width="0.0217%" height="15" fill="rgb(226,126,38)" fg:x="215472" fg:w="48"/><text x="97.7663%" y="1599.50"></text></g><g><title>core::hash::BuildHasher::hash_one (48 samples, 0.02%)</title><rect x="97.5163%" y="1573" width="0.0217%" height="15" fill="rgb(216,138,53)" fg:x="215472" fg:w="48"/><text x="97.7663%" y="1583.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (26 samples, 0.01%)</title><rect x="97.5262%" y="1557" width="0.0118%" height="15" fill="rgb(246,199,43)" fg:x="215494" fg:w="26"/><text x="97.7762%" y="1567.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::OutPoint as core::hash::Hash&gt;::hash (26 samples, 0.01%)</title><rect x="97.5262%" y="1541" width="0.0118%" height="15" fill="rgb(232,125,11)" fg:x="215494" fg:w="26"/><text x="97.7762%" y="1551.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (46 samples, 0.02%)</title><rect x="97.5493%" y="1509" width="0.0208%" height="15" fill="rgb(218,219,45)" fg:x="215545" fg:w="46"/><text x="97.7993%" y="1519.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (46 samples, 0.02%)</title><rect x="97.5493%" y="1493" width="0.0208%" height="15" fill="rgb(216,102,54)" fg:x="215545" fg:w="46"/><text x="97.7993%" y="1503.50"></text></g><g><title>hashbrown::map::make_hash (43 samples, 0.02%)</title><rect x="97.5507%" y="1477" width="0.0195%" height="15" fill="rgb(250,228,7)" fg:x="215548" fg:w="43"/><text x="97.8007%" y="1487.50"></text></g><g><title>core::hash::BuildHasher::hash_one (43 samples, 0.02%)</title><rect x="97.5507%" y="1461" width="0.0195%" height="15" fill="rgb(226,125,25)" fg:x="215548" fg:w="43"/><text x="97.8007%" y="1471.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (43 samples, 0.02%)</title><rect x="97.5783%" y="1477" width="0.0195%" height="15" fill="rgb(224,165,27)" fg:x="215609" fg:w="43"/><text x="97.8283%" y="1487.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (43 samples, 0.02%)</title><rect x="97.5783%" y="1461" width="0.0195%" height="15" fill="rgb(233,86,3)" fg:x="215609" fg:w="43"/><text x="97.8283%" y="1471.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (43 samples, 0.02%)</title><rect x="97.5783%" y="1445" width="0.0195%" height="15" fill="rgb(228,116,20)" fg:x="215609" fg:w="43"/><text x="97.8283%" y="1455.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.02%)</title><rect x="97.5783%" y="1429" width="0.0195%" height="15" fill="rgb(209,192,17)" fg:x="215609" fg:w="43"/><text x="97.8283%" y="1439.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.02%)</title><rect x="97.5783%" y="1413" width="0.0195%" height="15" fill="rgb(224,88,34)" fg:x="215609" fg:w="43"/><text x="97.8283%" y="1423.50"></text></g><g><title>malloc (42 samples, 0.02%)</title><rect x="97.5787%" y="1397" width="0.0190%" height="15" fill="rgb(233,38,6)" fg:x="215610" fg:w="42"/><text x="97.8287%" y="1407.50"></text></g><g><title>[libc.so.6] (40 samples, 0.02%)</title><rect x="97.5797%" y="1381" width="0.0181%" height="15" fill="rgb(212,59,30)" fg:x="215612" fg:w="40"/><text x="97.8297%" y="1391.50"></text></g><g><title>[libc.so.6] (27 samples, 0.01%)</title><rect x="97.5855%" y="1365" width="0.0122%" height="15" fill="rgb(213,80,3)" fg:x="215625" fg:w="27"/><text x="97.8355%" y="1375.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (116 samples, 0.05%)</title><rect x="97.5457%" y="1573" width="0.0525%" height="15" fill="rgb(251,178,7)" fg:x="215537" fg:w="116"/><text x="97.7957%" y="1583.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (116 samples, 0.05%)</title><rect x="97.5457%" y="1557" width="0.0525%" height="15" fill="rgb(213,154,26)" fg:x="215537" fg:w="116"/><text x="97.7957%" y="1567.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (115 samples, 0.05%)</title><rect x="97.5462%" y="1541" width="0.0520%" height="15" fill="rgb(238,165,49)" fg:x="215538" fg:w="115"/><text x="97.7962%" y="1551.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (115 samples, 0.05%)</title><rect x="97.5462%" y="1525" width="0.0520%" height="15" fill="rgb(248,91,46)" fg:x="215538" fg:w="115"/><text x="97.7962%" y="1535.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (45 samples, 0.02%)</title><rect x="97.5778%" y="1509" width="0.0204%" height="15" fill="rgb(244,21,52)" fg:x="215608" fg:w="45"/><text x="97.8278%" y="1519.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (45 samples, 0.02%)</title><rect x="97.5778%" y="1493" width="0.0204%" height="15" fill="rgb(247,122,20)" fg:x="215608" fg:w="45"/><text x="97.8278%" y="1503.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (195 samples, 0.09%)</title><rect x="97.5145%" y="1621" width="0.0883%" height="15" fill="rgb(218,27,9)" fg:x="215468" fg:w="195"/><text x="97.7645%" y="1631.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (195 samples, 0.09%)</title><rect x="97.5145%" y="1605" width="0.0883%" height="15" fill="rgb(246,7,6)" fg:x="215468" fg:w="195"/><text x="97.7645%" y="1615.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (135 samples, 0.06%)</title><rect x="97.5416%" y="1589" width="0.0611%" height="15" fill="rgb(227,135,54)" fg:x="215528" fg:w="135"/><text x="97.7916%" y="1599.50"></text></g><g><title>&lt;bitcoin::blockdata::transaction::TxOut as bitcoin::consensus::encode::Decodable&gt;::consensus_decode (23 samples, 0.01%)</title><rect x="97.6222%" y="1413" width="0.0104%" height="15" fill="rgb(247,14,11)" fg:x="215706" fg:w="23"/><text x="97.8722%" y="1423.50"></text></g><g><title>bitcoin::consensus::encode::deserialize_partial (64 samples, 0.03%)</title><rect x="97.6100%" y="1445" width="0.0290%" height="15" fill="rgb(206,149,34)" fg:x="215679" fg:w="64"/><text x="97.8600%" y="1455.50"></text></g><g><title>&lt;utreexo_wallet::blockchain::udata::LeafData as bitcoin::consensus::encode::Decodable&gt;::consensus_decode_from_finite_reader (59 samples, 0.03%)</title><rect x="97.6122%" y="1429" width="0.0267%" height="15" fill="rgb(227,228,4)" fg:x="215684" fg:w="59"/><text x="97.8622%" y="1439.50"></text></g><g><title>&lt;core::str::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.02%)</title><rect x="97.8245%" y="1365" width="0.0154%" height="15" fill="rgb(238,218,28)" fg:x="216153" fg:w="34"/><text x="98.0745%" y="1375.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.02%)</title><rect x="97.8245%" y="1349" width="0.0154%" height="15" fill="rgb(252,86,40)" fg:x="216153" fg:w="34"/><text x="98.0745%" y="1359.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.02%)</title><rect x="97.8245%" y="1333" width="0.0154%" height="15" fill="rgb(251,225,11)" fg:x="216153" fg:w="34"/><text x="98.0745%" y="1343.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (23 samples, 0.01%)</title><rect x="97.8408%" y="1349" width="0.0104%" height="15" fill="rgb(206,46,49)" fg:x="216189" fg:w="23"/><text x="98.0908%" y="1359.50"></text></g><g><title>&lt;bitcoin_hashes::hex::HexIterator as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 0.05%)</title><rect x="97.8055%" y="1381" width="0.0462%" height="15" fill="rgb(245,128,24)" fg:x="216111" fg:w="102"/><text x="98.0555%" y="1391.50"></text></g><g><title>bitcoin_hashes::hex::chars_to_hex (26 samples, 0.01%)</title><rect x="97.8399%" y="1365" width="0.0118%" height="15" fill="rgb(219,177,34)" fg:x="216187" fg:w="26"/><text x="98.0899%" y="1375.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (489 samples, 0.22%)</title><rect x="97.8055%" y="1397" width="0.2213%" height="15" fill="rgb(218,60,48)" fg:x="216111" fg:w="489"/><text x="98.0555%" y="1407.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (387 samples, 0.18%)</title><rect x="97.8516%" y="1381" width="0.1751%" height="15" fill="rgb(221,11,5)" fg:x="216213" fg:w="387"/><text x="98.1016%" y="1391.50"></text></g><g><title>&lt;[u8: 32] as bitcoin_hashes::hex::FromHex&gt;::from_byte_iter (863 samples, 0.39%)</title><rect x="97.6417%" y="1413" width="0.3906%" height="15" fill="rgb(220,148,13)" fg:x="215749" fg:w="863"/><text x="97.8917%" y="1423.50"></text></g><g><title>&lt;T as bitcoin_hashes::hex::FromHex&gt;::from_byte_iter (872 samples, 0.39%)</title><rect x="97.6389%" y="1429" width="0.3946%" height="15" fill="rgb(210,16,3)" fg:x="215743" fg:w="872"/><text x="97.8889%" y="1439.50"></text></g><g><title>&lt;core::str::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.01%)</title><rect x="98.0770%" y="1173" width="0.0113%" height="15" fill="rgb(236,80,2)" fg:x="216711" fg:w="25"/><text x="98.3270%" y="1183.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.01%)</title><rect x="98.0770%" y="1157" width="0.0113%" height="15" fill="rgb(239,129,19)" fg:x="216711" fg:w="25"/><text x="98.3270%" y="1167.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.01%)</title><rect x="98.0770%" y="1141" width="0.0113%" height="15" fill="rgb(220,106,35)" fg:x="216711" fg:w="25"/><text x="98.3270%" y="1151.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (42 samples, 0.02%)</title><rect x="98.0942%" y="1157" width="0.0190%" height="15" fill="rgb(252,139,45)" fg:x="216749" fg:w="42"/><text x="98.3442%" y="1167.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (25 samples, 0.01%)</title><rect x="98.1019%" y="1141" width="0.0113%" height="15" fill="rgb(229,8,36)" fg:x="216766" fg:w="25"/><text x="98.3519%" y="1151.50"></text></g><g><title>&lt;bitcoin_hashes::hex::HexIterator as core::iter::traits::iterator::Iterator&gt;::next (128 samples, 0.06%)</title><rect x="98.0576%" y="1189" width="0.0579%" height="15" fill="rgb(230,126,33)" fg:x="216668" fg:w="128"/><text x="98.3076%" y="1199.50"></text></g><g><title>bitcoin_hashes::hex::chars_to_hex (60 samples, 0.03%)</title><rect x="98.0883%" y="1173" width="0.0272%" height="15" fill="rgb(239,140,21)" fg:x="216736" fg:w="60"/><text x="98.3383%" y="1183.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (613 samples, 0.28%)</title><rect x="98.0404%" y="1253" width="0.2774%" height="15" fill="rgb(254,104,9)" fg:x="216630" fg:w="613"/><text x="98.2904%" y="1263.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (613 samples, 0.28%)</title><rect x="98.0404%" y="1237" width="0.2774%" height="15" fill="rgb(239,52,14)" fg:x="216630" fg:w="613"/><text x="98.2904%" y="1247.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (613 samples, 0.28%)</title><rect x="98.0404%" y="1221" width="0.2774%" height="15" fill="rgb(208,227,44)" fg:x="216630" fg:w="613"/><text x="98.2904%" y="1231.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (609 samples, 0.28%)</title><rect x="98.0422%" y="1205" width="0.2756%" height="15" fill="rgb(246,18,19)" fg:x="216634" fg:w="609"/><text x="98.2922%" y="1215.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::{{closure}} (447 samples, 0.20%)</title><rect x="98.1155%" y="1189" width="0.2023%" height="15" fill="rgb(235,228,25)" fg:x="216796" fg:w="447"/><text x="98.3655%" y="1199.50"></text></g><g><title>[libc.so.6] (102 samples, 0.05%)</title><rect x="98.3454%" y="1109" width="0.0462%" height="15" fill="rgb(240,156,20)" fg:x="217304" fg:w="102"/><text x="98.5954%" y="1119.50"></text></g><g><title>[libc.so.6] (89 samples, 0.04%)</title><rect x="98.3513%" y="1093" width="0.0403%" height="15" fill="rgb(224,8,20)" fg:x="217317" fg:w="89"/><text x="98.6013%" y="1103.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (158 samples, 0.07%)</title><rect x="98.3219%" y="1173" width="0.0715%" height="15" fill="rgb(214,12,52)" fg:x="217252" fg:w="158"/><text x="98.5719%" y="1183.50"></text></g><g><title>alloc::alloc::Global::grow_impl (158 samples, 0.07%)</title><rect x="98.3219%" y="1157" width="0.0715%" height="15" fill="rgb(211,220,47)" fg:x="217252" fg:w="158"/><text x="98.5719%" y="1167.50"></text></g><g><title>alloc::alloc::realloc (158 samples, 0.07%)</title><rect x="98.3219%" y="1141" width="0.0715%" height="15" fill="rgb(250,173,5)" fg:x="217252" fg:w="158"/><text x="98.5719%" y="1151.50"></text></g><g><title>realloc (150 samples, 0.07%)</title><rect x="98.3255%" y="1125" width="0.0679%" height="15" fill="rgb(250,125,52)" fg:x="217260" fg:w="150"/><text x="98.5755%" y="1135.50"></text></g><g><title>alloc::raw_vec::finish_grow (165 samples, 0.07%)</title><rect x="98.3192%" y="1189" width="0.0747%" height="15" fill="rgb(209,133,18)" fg:x="217246" fg:w="165"/><text x="98.5692%" y="1199.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (787 samples, 0.36%)</title><rect x="98.0395%" y="1285" width="0.3562%" height="15" fill="rgb(216,173,22)" fg:x="216628" fg:w="787"/><text x="98.2895%" y="1295.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (786 samples, 0.36%)</title><rect x="98.0399%" y="1269" width="0.3557%" height="15" fill="rgb(205,3,22)" fg:x="216629" fg:w="786"/><text x="98.2899%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (170 samples, 0.08%)</title><rect x="98.3187%" y="1253" width="0.0769%" height="15" fill="rgb(248,22,20)" fg:x="217245" fg:w="170"/><text x="98.5687%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (170 samples, 0.08%)</title><rect x="98.3187%" y="1237" width="0.0769%" height="15" fill="rgb(233,6,29)" fg:x="217245" fg:w="170"/><text x="98.5687%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (170 samples, 0.08%)</title><rect x="98.3187%" y="1221" width="0.0769%" height="15" fill="rgb(240,22,54)" fg:x="217245" fg:w="170"/><text x="98.5687%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (170 samples, 0.08%)</title><rect x="98.3187%" y="1205" width="0.0769%" height="15" fill="rgb(231,133,32)" fg:x="217245" fg:w="170"/><text x="98.5687%" y="1215.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as bitcoin_hashes::hex::FromHex&gt;::from_byte_iter (852 samples, 0.39%)</title><rect x="98.0336%" y="1429" width="0.3856%" height="15" fill="rgb(248,193,4)" fg:x="216615" fg:w="852"/><text x="98.2836%" y="1439.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (852 samples, 0.39%)</title><rect x="98.0336%" y="1413" width="0.3856%" height="15" fill="rgb(211,178,46)" fg:x="216615" fg:w="852"/><text x="98.2836%" y="1423.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (852 samples, 0.39%)</title><rect x="98.0336%" y="1397" width="0.3856%" height="15" fill="rgb(224,5,42)" fg:x="216615" fg:w="852"/><text x="98.2836%" y="1407.50"></text></g><g><title>core::iter::adapters::try_process (852 samples, 0.39%)</title><rect x="98.0336%" y="1381" width="0.3856%" height="15" fill="rgb(239,176,25)" fg:x="216615" fg:w="852"/><text x="98.2836%" y="1391.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (852 samples, 0.39%)</title><rect x="98.0336%" y="1365" width="0.3856%" height="15" fill="rgb(245,187,50)" fg:x="216615" fg:w="852"/><text x="98.2836%" y="1375.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (852 samples, 0.39%)</title><rect x="98.0336%" y="1349" width="0.3856%" height="15" fill="rgb(248,24,15)" fg:x="216615" fg:w="852"/><text x="98.2836%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (852 samples, 0.39%)</title><rect x="98.0336%" y="1333" width="0.3856%" height="15" fill="rgb(205,166,13)" fg:x="216615" fg:w="852"/><text x="98.2836%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (852 samples, 0.39%)</title><rect x="98.0336%" y="1317" width="0.3856%" height="15" fill="rgb(208,114,23)" fg:x="216615" fg:w="852"/><text x="98.2836%" y="1327.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (839 samples, 0.38%)</title><rect x="98.0395%" y="1301" width="0.3797%" height="15" fill="rgb(239,127,18)" fg:x="216628" fg:w="839"/><text x="98.2895%" y="1311.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (39 samples, 0.02%)</title><rect x="98.4015%" y="1285" width="0.0177%" height="15" fill="rgb(219,154,28)" fg:x="217428" fg:w="39"/><text x="98.6515%" y="1295.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (39 samples, 0.02%)</title><rect x="98.4015%" y="1269" width="0.0177%" height="15" fill="rgb(225,157,23)" fg:x="217428" fg:w="39"/><text x="98.6515%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (39 samples, 0.02%)</title><rect x="98.4015%" y="1253" width="0.0177%" height="15" fill="rgb(219,8,6)" fg:x="217428" fg:w="39"/><text x="98.6515%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (39 samples, 0.02%)</title><rect x="98.4015%" y="1237" width="0.0177%" height="15" fill="rgb(212,47,6)" fg:x="217428" fg:w="39"/><text x="98.6515%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.02%)</title><rect x="98.4015%" y="1221" width="0.0177%" height="15" fill="rgb(224,190,4)" fg:x="217428" fg:w="39"/><text x="98.6515%" y="1231.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.02%)</title><rect x="98.4015%" y="1205" width="0.0177%" height="15" fill="rgb(239,183,29)" fg:x="217428" fg:w="39"/><text x="98.6515%" y="1215.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.02%)</title><rect x="98.4015%" y="1189" width="0.0177%" height="15" fill="rgb(213,57,7)" fg:x="217428" fg:w="39"/><text x="98.6515%" y="1199.50"></text></g><g><title>malloc (39 samples, 0.02%)</title><rect x="98.4015%" y="1173" width="0.0177%" height="15" fill="rgb(216,148,1)" fg:x="217428" fg:w="39"/><text x="98.6515%" y="1183.50"></text></g><g><title>[libc.so.6] (34 samples, 0.02%)</title><rect x="98.4038%" y="1157" width="0.0154%" height="15" fill="rgb(236,182,29)" fg:x="217433" fg:w="34"/><text x="98.6538%" y="1167.50"></text></g><g><title>bitcoin_hashes::hex::FromHex::from_hex (1,726 samples, 0.78%)</title><rect x="97.6389%" y="1445" width="0.7811%" height="15" fill="rgb(244,120,48)" fg:x="215743" fg:w="1726"/><text x="97.8889%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (25 samples, 0.01%)</title><rect x="98.4201%" y="1445" width="0.0113%" height="15" fill="rgb(206,71,34)" fg:x="217469" fg:w="25"/><text x="98.6701%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (25 samples, 0.01%)</title><rect x="98.4201%" y="1429" width="0.0113%" height="15" fill="rgb(242,32,6)" fg:x="217469" fg:w="25"/><text x="98.6701%" y="1439.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.01%)</title><rect x="98.4201%" y="1413" width="0.0113%" height="15" fill="rgb(241,35,3)" fg:x="217469" fg:w="25"/><text x="98.6701%" y="1423.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.01%)</title><rect x="98.4201%" y="1397" width="0.0113%" height="15" fill="rgb(222,62,19)" fg:x="217469" fg:w="25"/><text x="98.6701%" y="1407.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.01%)</title><rect x="98.4201%" y="1381" width="0.0113%" height="15" fill="rgb(223,110,41)" fg:x="217469" fg:w="25"/><text x="98.6701%" y="1391.50"></text></g><g><title>cfree (24 samples, 0.01%)</title><rect x="98.4205%" y="1365" width="0.0109%" height="15" fill="rgb(208,224,4)" fg:x="217470" fg:w="24"/><text x="98.6705%" y="1375.50"></text></g><g><title>[libc.so.6] (24 samples, 0.01%)</title><rect x="98.4205%" y="1349" width="0.0109%" height="15" fill="rgb(241,137,19)" fg:x="217470" fg:w="24"/><text x="98.6705%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,827 samples, 0.83%)</title><rect x="97.6064%" y="1541" width="0.8268%" height="15" fill="rgb(244,24,17)" fg:x="215671" fg:w="1827"/><text x="97.8564%" y="1551.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,827 samples, 0.83%)</title><rect x="97.6064%" y="1525" width="0.8268%" height="15" fill="rgb(245,178,49)" fg:x="215671" fg:w="1827"/><text x="97.8564%" y="1535.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,827 samples, 0.83%)</title><rect x="97.6064%" y="1509" width="0.8268%" height="15" fill="rgb(219,160,38)" fg:x="215671" fg:w="1827"/><text x="97.8564%" y="1519.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,824 samples, 0.83%)</title><rect x="97.6077%" y="1493" width="0.8255%" height="15" fill="rgb(228,137,14)" fg:x="215674" fg:w="1824"/><text x="97.8577%" y="1503.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1,824 samples, 0.83%)</title><rect x="97.6077%" y="1477" width="0.8255%" height="15" fill="rgb(237,134,11)" fg:x="215674" fg:w="1824"/><text x="97.8577%" y="1487.50"></text></g><g><title>utreexo_wallet::blockchain::cli_blockchain::UtreexodBackend::process_proof::{{closure}} (1,822 samples, 0.82%)</title><rect x="97.6086%" y="1461" width="0.8246%" height="15" fill="rgb(211,126,44)" fg:x="215676" fg:w="1822"/><text x="97.8586%" y="1471.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,851 samples, 0.84%)</title><rect x="97.6041%" y="1605" width="0.8377%" height="15" fill="rgb(226,171,33)" fg:x="215666" fg:w="1851"/><text x="97.8541%" y="1615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,851 samples, 0.84%)</title><rect x="97.6041%" y="1589" width="0.8377%" height="15" fill="rgb(253,99,13)" fg:x="215666" fg:w="1851"/><text x="97.8541%" y="1599.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,851 samples, 0.84%)</title><rect x="97.6041%" y="1573" width="0.8377%" height="15" fill="rgb(244,48,7)" fg:x="215666" fg:w="1851"/><text x="97.8541%" y="1583.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,846 samples, 0.84%)</title><rect x="97.6064%" y="1557" width="0.8354%" height="15" fill="rgb(244,217,54)" fg:x="215671" fg:w="1846"/><text x="97.8564%" y="1567.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31 samples, 0.01%)</title><rect x="98.4423%" y="1493" width="0.0140%" height="15" fill="rgb(224,15,18)" fg:x="217518" fg:w="31"/><text x="98.6923%" y="1503.50"></text></g><g><title>alloc::alloc::dealloc (31 samples, 0.01%)</title><rect x="98.4423%" y="1477" width="0.0140%" height="15" fill="rgb(244,99,12)" fg:x="217518" fg:w="31"/><text x="98.6923%" y="1487.50"></text></g><g><title>cfree (29 samples, 0.01%)</title><rect x="98.4432%" y="1461" width="0.0131%" height="15" fill="rgb(233,226,8)" fg:x="217520" fg:w="29"/><text x="98.6932%" y="1471.50"></text></g><g><title>[libc.so.6] (24 samples, 0.01%)</title><rect x="98.4454%" y="1445" width="0.0109%" height="15" fill="rgb(229,211,3)" fg:x="217525" fg:w="24"/><text x="98.6954%" y="1455.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.01%)</title><rect x="98.4418%" y="1589" width="0.0149%" height="15" fill="rgb(216,140,21)" fg:x="217517" fg:w="33"/><text x="98.6918%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (33 samples, 0.01%)</title><rect x="98.4418%" y="1573" width="0.0149%" height="15" fill="rgb(234,122,30)" fg:x="217517" fg:w="33"/><text x="98.6918%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (32 samples, 0.01%)</title><rect x="98.4423%" y="1557" width="0.0145%" height="15" fill="rgb(236,25,46)" fg:x="217518" fg:w="32"/><text x="98.6923%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (32 samples, 0.01%)</title><rect x="98.4423%" y="1541" width="0.0145%" height="15" fill="rgb(217,52,54)" fg:x="217518" fg:w="32"/><text x="98.6923%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (32 samples, 0.01%)</title><rect x="98.4423%" y="1525" width="0.0145%" height="15" fill="rgb(222,29,26)" fg:x="217518" fg:w="32"/><text x="98.6923%" y="1535.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.01%)</title><rect x="98.4423%" y="1509" width="0.0145%" height="15" fill="rgb(216,177,29)" fg:x="217518" fg:w="32"/><text x="98.6923%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (39 samples, 0.02%)</title><rect x="98.4418%" y="1605" width="0.0177%" height="15" fill="rgb(247,136,51)" fg:x="217517" fg:w="39"/><text x="98.6918%" y="1615.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1877" width="98.3431%" height="15" fill="rgb(231,47,47)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1887.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1861" width="98.3431%" height="15" fill="rgb(211,192,36)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1871.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1845" width="98.3431%" height="15" fill="rgb(229,156,32)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1855.50">async_executor::Executor::run::{{closure}}::{{closure}}</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1829" width="98.3431%" height="15" fill="rgb(248,213,20)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1839.50">async_task::raw::RawTask&lt;F,T,S&gt;::run</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1813" width="98.3431%" height="15" fill="rgb(217,64,7)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1823.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async_executor::Executor::spawn::{{closure}} (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1797" width="98.3431%" height="15" fill="rgb(232,142,8)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1807.50">async_executor::Executor::spawn::{{closure}}</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1781" width="98.3431%" height="15" fill="rgb(224,92,44)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1791.50">&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1765" width="98.3431%" height="15" fill="rgb(214,169,17)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1775.50">async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1749" width="98.3431%" height="15" fill="rgb(210,59,37)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1759.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1733" width="98.3431%" height="15" fill="rgb(214,116,48)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1743.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1717" width="98.3431%" height="15" fill="rgb(244,191,6)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1727.50">async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}}</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1701" width="98.3431%" height="15" fill="rgb(241,50,52)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1711.50">&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1685" width="98.3431%" height="15" fill="rgb(236,75,39)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1695.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>utreexo_wallet::blockchain::cli_blockchain::UtreexodBackend::run::{{closure}} (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1669" width="98.3431%" height="15" fill="rgb(236,99,0)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1679.50">utreexo_wallet::blockchain::cli_blockchain::UtreexodBackend::run::{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1653" width="98.3431%" height="15" fill="rgb(207,202,15)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1663.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>utreexo_wallet::blockchain::cli_blockchain::UtreexodBackend::process_batch_block::{{closure}} (217,299 samples, 98.34%)</title><rect x="0.1181%" y="1637" width="98.3431%" height="15" fill="rgb(233,207,14)" fg:x="261" fg:w="217299"/><text x="0.3681%" y="1647.50">utreexo_wallet::blockchain::cli_blockchain::UtreexodBackend::process_batch_block::{{closure}}</text></g><g><title>utreexo_wallet::blockchain::cli_blockchain::UtreexodBackend::process_proof (1,895 samples, 0.86%)</title><rect x="97.6036%" y="1621" width="0.8576%" height="15" fill="rgb(226,27,51)" fg:x="215665" fg:w="1895"/><text x="97.8536%" y="1631.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (217,300 samples, 98.34%)</title><rect x="0.1181%" y="1893" width="98.3436%" height="15" fill="rgb(206,104,42)" fg:x="261" fg:w="217300"/><text x="0.3681%" y="1903.50">async_executor::Executor::run::{{closure}}</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (217,301 samples, 98.34%)</title><rect x="0.1181%" y="1925" width="98.3440%" height="15" fill="rgb(212,225,4)" fg:x="261" fg:w="217301"/><text x="0.3681%" y="1935.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (217,301 samples, 98.34%)</title><rect x="0.1181%" y="1909" width="98.3440%" height="15" fill="rgb(233,96,42)" fg:x="261" fg:w="217301"/><text x="0.3681%" y="1919.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>std::panic::catch_unwind (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2213" width="98.3445%" height="15" fill="rgb(229,21,32)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2223.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2197" width="98.3445%" height="15" fill="rgb(226,216,24)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2207.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2181" width="98.3445%" height="15" fill="rgb(221,163,17)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2191.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2165" width="98.3445%" height="15" fill="rgb(216,216,42)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2175.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2149" width="98.3445%" height="15" fill="rgb(240,118,7)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2159.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2133" width="98.3445%" height="15" fill="rgb(221,67,37)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2143.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2117" width="98.3445%" height="15" fill="rgb(241,32,44)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2127.50">core::ops::function::FnOnce::call_once</text></g><g><title>async_global_executor::threading::thread_main_loop (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2101" width="98.3445%" height="15" fill="rgb(235,204,43)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2111.50">async_global_executor::threading::thread_main_loop</text></g><g><title>std::panic::catch_unwind (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2085" width="98.3445%" height="15" fill="rgb(213,116,10)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2095.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2069" width="98.3445%" height="15" fill="rgb(239,15,48)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2079.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2053" width="98.3445%" height="15" fill="rgb(207,123,36)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2063.50">std::panicking::try::do_call</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2037" width="98.3445%" height="15" fill="rgb(209,103,30)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2047.50">async_global_executor::threading::thread_main_loop::{{closure}}</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2021" width="98.3445%" height="15" fill="rgb(238,100,19)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2031.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (217,302 samples, 98.34%)</title><rect x="0.1181%" y="2005" width="98.3445%" height="15" fill="rgb(244,30,14)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="2015.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (217,302 samples, 98.34%)</title><rect x="0.1181%" y="1989" width="98.3445%" height="15" fill="rgb(249,174,6)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="1999.50">async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}</text></g><g><title>async_global_executor::reactor::block_on (217,302 samples, 98.34%)</title><rect x="0.1181%" y="1973" width="98.3445%" height="15" fill="rgb(235,213,41)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="1983.50">async_global_executor::reactor::block_on</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (217,302 samples, 98.34%)</title><rect x="0.1181%" y="1957" width="98.3445%" height="15" fill="rgb(213,118,6)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="1967.50">async_global_executor::reactor::block_on::{{closure}}</text></g><g><title>async_io::driver::block_on (217,302 samples, 98.34%)</title><rect x="0.1181%" y="1941" width="98.3445%" height="15" fill="rgb(235,44,51)" fg:x="261" fg:w="217302"/><text x="0.3681%" y="1951.50">async_io::driver::block_on</text></g><g><title>[libc.so.6] (217,304 samples, 98.35%)</title><rect x="0.1181%" y="2325" width="98.3454%" height="15" fill="rgb(217,9,53)" fg:x="261" fg:w="217304"/><text x="0.3681%" y="2335.50">[libc.so.6]</text></g><g><title>[libc.so.6] (217,304 samples, 98.35%)</title><rect x="0.1181%" y="2309" width="98.3454%" height="15" fill="rgb(237,172,34)" fg:x="261" fg:w="217304"/><text x="0.3681%" y="2319.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (217,304 samples, 98.35%)</title><rect x="0.1181%" y="2293" width="98.3454%" height="15" fill="rgb(206,206,11)" fg:x="261" fg:w="217304"/><text x="0.3681%" y="2303.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (217,304 samples, 98.35%)</title><rect x="0.1181%" y="2277" width="98.3454%" height="15" fill="rgb(214,149,29)" fg:x="261" fg:w="217304"/><text x="0.3681%" y="2287.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (217,304 samples, 98.35%)</title><rect x="0.1181%" y="2261" width="98.3454%" height="15" fill="rgb(208,123,3)" fg:x="261" fg:w="217304"/><text x="0.3681%" y="2271.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (217,304 samples, 98.35%)</title><rect x="0.1181%" y="2245" width="98.3454%" height="15" fill="rgb(229,126,4)" fg:x="261" fg:w="217304"/><text x="0.3681%" y="2255.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (217,304 samples, 98.35%)</title><rect x="0.1181%" y="2229" width="98.3454%" height="15" fill="rgb(222,92,36)" fg:x="261" fg:w="217304"/><text x="0.3681%" y="2239.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>ZSTD_decompressSequences_bmi2 (28 samples, 0.01%)</title><rect x="98.5038%" y="1573" width="0.0127%" height="15" fill="rgb(216,39,41)" fg:x="217654" fg:w="28"/><text x="98.7538%" y="1583.50"></text></g><g><title>ZSTD_decompressSequences_body (28 samples, 0.01%)</title><rect x="98.5038%" y="1557" width="0.0127%" height="15" fill="rgb(253,127,28)" fg:x="217654" fg:w="28"/><text x="98.7538%" y="1567.50"></text></g><g><title>ZSTD_decompressFrame (42 samples, 0.02%)</title><rect x="98.4979%" y="1589" width="0.0190%" height="15" fill="rgb(249,152,51)" fg:x="217641" fg:w="42"/><text x="98.7479%" y="1599.50"></text></g><g><title>ZSTD_decompress_usingDDict (47 samples, 0.02%)</title><rect x="98.4961%" y="1621" width="0.0213%" height="15" fill="rgb(209,123,42)" fg:x="217637" fg:w="47"/><text x="98.7461%" y="1631.50"></text></g><g><title>ZSTD_decompressMultiFrame (47 samples, 0.02%)</title><rect x="98.4961%" y="1605" width="0.0213%" height="15" fill="rgb(241,118,22)" fg:x="217637" fg:w="47"/><text x="98.7461%" y="1615.50"></text></g><g><title>ZSTD_decompressStream (61 samples, 0.03%)</title><rect x="98.4929%" y="1637" width="0.0276%" height="15" fill="rgb(208,25,7)" fg:x="217630" fg:w="61"/><text x="98.7429%" y="1647.50"></text></g><g><title>&lt;zstd::stream::raw::Decoder as zstd::stream::raw::Operation&gt;::run (67 samples, 0.03%)</title><rect x="98.4920%" y="1669" width="0.0303%" height="15" fill="rgb(243,144,39)" fg:x="217628" fg:w="67"/><text x="98.7420%" y="1679.50"></text></g><g><title>zstd_safe::DCtx::decompress_stream (67 samples, 0.03%)</title><rect x="98.4920%" y="1653" width="0.0303%" height="15" fill="rgb(250,50,5)" fg:x="217628" fg:w="67"/><text x="98.7420%" y="1663.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (71 samples, 0.03%)</title><rect x="98.4920%" y="1717" width="0.0321%" height="15" fill="rgb(207,67,11)" fg:x="217628" fg:w="71"/><text x="98.7420%" y="1727.50"></text></g><g><title>&lt;zstd::stream::read::Decoder&lt;R&gt; as std::io::Read&gt;::read (71 samples, 0.03%)</title><rect x="98.4920%" y="1701" width="0.0321%" height="15" fill="rgb(245,204,40)" fg:x="217628" fg:w="71"/><text x="98.7420%" y="1711.50"></text></g><g><title>&lt;zstd::stream::zio::reader::Reader&lt;R,D&gt; as std::io::Read&gt;::read (71 samples, 0.03%)</title><rect x="98.4920%" y="1685" width="0.0321%" height="15" fill="rgb(238,228,24)" fg:x="217628" fg:w="71"/><text x="98.7420%" y="1695.50"></text></g><g><title>std::io::Read::read_buf (81 samples, 0.04%)</title><rect x="98.4916%" y="1749" width="0.0367%" height="15" fill="rgb(217,116,22)" fg:x="217627" fg:w="81"/><text x="98.7416%" y="1759.50"></text></g><g><title>std::io::default_read_buf (81 samples, 0.04%)</title><rect x="98.4916%" y="1733" width="0.0367%" height="15" fill="rgb(234,98,12)" fg:x="217627" fg:w="81"/><text x="98.7416%" y="1743.50"></text></g><g><title>&lt;utreexo_wallet::blockchain::chain_state::ChainState&lt;PersistedState&gt; as utreexo_wallet::blockchain::BlockchainProviderInterface&gt;::connect_block (116 samples, 0.05%)</title><rect x="98.4789%" y="2309" width="0.0525%" height="15" fill="rgb(242,170,50)" fg:x="217599" fg:w="116"/><text x="98.7289%" y="2319.50"></text></g><g><title>&lt;utreexo_wallet::blockchain::chainstore::KvChainStore as utreexo_wallet::blockchain::chainstore::ChainStore&gt;::save_header (109 samples, 0.05%)</title><rect x="98.4821%" y="2293" width="0.0493%" height="15" fill="rgb(235,7,5)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2303.50"></text></g><g><title>kv::bucket::Bucket&lt;K,V&gt;::set (109 samples, 0.05%)</title><rect x="98.4821%" y="2277" width="0.0493%" height="15" fill="rgb(241,114,28)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2287.50"></text></g><g><title>sled::tree::Tree::insert (109 samples, 0.05%)</title><rect x="98.4821%" y="2261" width="0.0493%" height="15" fill="rgb(246,112,42)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2271.50"></text></g><g><title>sled::tree::Tree::insert_inner (109 samples, 0.05%)</title><rect x="98.4821%" y="2245" width="0.0493%" height="15" fill="rgb(248,228,14)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2255.50"></text></g><g><title>sled::tree::Tree::view_for_key (109 samples, 0.05%)</title><rect x="98.4821%" y="2229" width="0.0493%" height="15" fill="rgb(208,133,18)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2239.50"></text></g><g><title>sled::tree::Tree::view_for_pid (109 samples, 0.05%)</title><rect x="98.4821%" y="2213" width="0.0493%" height="15" fill="rgb(207,35,49)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2223.50"></text></g><g><title>sled::pagecache::PageCache::get (109 samples, 0.05%)</title><rect x="98.4821%" y="2197" width="0.0493%" height="15" fill="rgb(205,68,36)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (109 samples, 0.05%)</title><rect x="98.4821%" y="2181" width="0.0493%" height="15" fill="rgb(245,62,40)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2191.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (109 samples, 0.05%)</title><rect x="98.4821%" y="2165" width="0.0493%" height="15" fill="rgb(228,27,24)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2175.50"></text></g><g><title>core::iter::adapters::try_process (109 samples, 0.05%)</title><rect x="98.4821%" y="2149" width="0.0493%" height="15" fill="rgb(253,19,12)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2159.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (109 samples, 0.05%)</title><rect x="98.4821%" y="2133" width="0.0493%" height="15" fill="rgb(232,28,20)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (109 samples, 0.05%)</title><rect x="98.4821%" y="2117" width="0.0493%" height="15" fill="rgb(218,35,51)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (109 samples, 0.05%)</title><rect x="98.4821%" y="2101" width="0.0493%" height="15" fill="rgb(212,90,40)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (109 samples, 0.05%)</title><rect x="98.4821%" y="2085" width="0.0493%" height="15" fill="rgb(220,172,12)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2095.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (109 samples, 0.05%)</title><rect x="98.4821%" y="2069" width="0.0493%" height="15" fill="rgb(226,159,20)" fg:x="217606" fg:w="109"/><text x="98.7321%" y="2079.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (89 samples, 0.04%)</title><rect x="98.4911%" y="2053" width="0.0403%" height="15" fill="rgb(234,205,16)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="2063.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (89 samples, 0.04%)</title><rect x="98.4911%" y="2037" width="0.0403%" height="15" fill="rgb(207,9,39)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="2047.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (89 samples, 0.04%)</title><rect x="98.4911%" y="2021" width="0.0403%" height="15" fill="rgb(249,143,15)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="2031.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (89 samples, 0.04%)</title><rect x="98.4911%" y="2005" width="0.0403%" height="15" fill="rgb(253,133,29)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="2015.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (89 samples, 0.04%)</title><rect x="98.4911%" y="1989" width="0.0403%" height="15" fill="rgb(221,187,0)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1999.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (89 samples, 0.04%)</title><rect x="98.4911%" y="1973" width="0.0403%" height="15" fill="rgb(205,204,26)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1983.50"></text></g><g><title>sled::pagecache::PageCache::get::{{closure}} (89 samples, 0.04%)</title><rect x="98.4911%" y="1957" width="0.0403%" height="15" fill="rgb(224,68,54)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1967.50"></text></g><g><title>sled::pagecache::PageCache::pull (89 samples, 0.04%)</title><rect x="98.4911%" y="1941" width="0.0403%" height="15" fill="rgb(209,67,4)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1951.50"></text></g><g><title>sled::pagecache::logger::Log::read (89 samples, 0.04%)</title><rect x="98.4911%" y="1925" width="0.0403%" height="15" fill="rgb(228,229,18)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1935.50"></text></g><g><title>sled::pagecache::logger::read_message (89 samples, 0.04%)</title><rect x="98.4911%" y="1909" width="0.0403%" height="15" fill="rgb(231,89,13)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1919.50"></text></g><g><title>sled::pagecache::maybe_decompress (89 samples, 0.04%)</title><rect x="98.4911%" y="1893" width="0.0403%" height="15" fill="rgb(210,182,18)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1903.50"></text></g><g><title>zstd::stream::functions::decode_all (89 samples, 0.04%)</title><rect x="98.4911%" y="1877" width="0.0403%" height="15" fill="rgb(240,105,2)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1887.50"></text></g><g><title>zstd::stream::functions::copy_decode (89 samples, 0.04%)</title><rect x="98.4911%" y="1861" width="0.0403%" height="15" fill="rgb(207,170,50)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1871.50"></text></g><g><title>std::io::copy::copy (89 samples, 0.04%)</title><rect x="98.4911%" y="1845" width="0.0403%" height="15" fill="rgb(232,133,24)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1855.50"></text></g><g><title>std::sys::unix::kernel_copy::copy_spec (89 samples, 0.04%)</title><rect x="98.4911%" y="1829" width="0.0403%" height="15" fill="rgb(235,166,27)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1839.50"></text></g><g><title>&lt;std::sys::unix::kernel_copy::Copier&lt;R,W&gt; as std::sys::unix::kernel_copy::SpecCopy&gt;::copy (89 samples, 0.04%)</title><rect x="98.4911%" y="1813" width="0.0403%" height="15" fill="rgb(209,19,13)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1823.50"></text></g><g><title>std::io::copy::generic_copy (89 samples, 0.04%)</title><rect x="98.4911%" y="1797" width="0.0403%" height="15" fill="rgb(226,79,39)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1807.50"></text></g><g><title>&lt;W as std::io::copy::BufferedCopySpec&gt;::copy_to (89 samples, 0.04%)</title><rect x="98.4911%" y="1781" width="0.0403%" height="15" fill="rgb(222,163,10)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1791.50"></text></g><g><title>std::io::copy::stack_buffer_copy (89 samples, 0.04%)</title><rect x="98.4911%" y="1765" width="0.0403%" height="15" fill="rgb(214,44,19)" fg:x="217626" fg:w="89"/><text x="98.7411%" y="1775.50"></text></g><g><title>sled::tree::Tree::view_for_key (30 samples, 0.01%)</title><rect x="98.5712%" y="2309" width="0.0136%" height="15" fill="rgb(210,217,13)" fg:x="217803" fg:w="30"/><text x="98.8212%" y="2319.50"></text></g><g><title>sled::tree::Tree::split_node (30 samples, 0.01%)</title><rect x="98.5712%" y="2293" width="0.0136%" height="15" fill="rgb(237,61,54)" fg:x="217803" fg:w="30"/><text x="98.8212%" y="2303.50"></text></g><g><title>sled::pagecache::PageCache::replace (30 samples, 0.01%)</title><rect x="98.5712%" y="2277" width="0.0136%" height="15" fill="rgb(226,184,24)" fg:x="217803" fg:w="30"/><text x="98.8212%" y="2287.50"></text></g><g><title>sled::pagecache::PageCache::rewrite_page (30 samples, 0.01%)</title><rect x="98.5712%" y="2261" width="0.0136%" height="15" fill="rgb(223,226,4)" fg:x="217803" fg:w="30"/><text x="98.8212%" y="2271.50"></text></g><g><title>sled::pagecache::PageCache::get (30 samples, 0.01%)</title><rect x="98.5712%" y="2245" width="0.0136%" height="15" fill="rgb(210,26,41)" fg:x="217803" fg:w="30"/><text x="98.8212%" y="2255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (30 samples, 0.01%)</title><rect x="98.5712%" y="2229" width="0.0136%" height="15" fill="rgb(220,221,6)" fg:x="217803" fg:w="30"/><text x="98.8212%" y="2239.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (30 samples, 0.01%)</title><rect x="98.5712%" y="2213" width="0.0136%" height="15" fill="rgb(225,89,49)" fg:x="217803" fg:w="30"/><text x="98.8212%" y="2223.50"></text></g><g><title>core::iter::adapters::try_process (30 samples, 0.01%)</title><rect x="98.5712%" y="2197" width="0.0136%" height="15" fill="rgb(218,70,45)" fg:x="217803" fg:w="30"/><text x="98.8212%" y="2207.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (30 samples, 0.01%)</title><rect x="98.5712%" y="2181" width="0.0136%" height="15" fill="rgb(238,166,21)" fg:x="217803" fg:w="30"/><text x="98.8212%" y="2191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (30 samples, 0.01%)</title><rect x="98.5712%" y="2165" width="0.0136%" height="15" fill="rgb(224,141,44)" fg:x="217803" fg:w="30"/><text x="98.8212%" y="2175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (30 samples, 0.01%)</title><rect x="98.5712%" y="2149" width="0.0136%" height="15" fill="rgb(230,12,49)" fg:x="217803" fg:w="30"/><text x="98.8212%" y="2159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 0.01%)</title><rect x="98.5712%" y="2133" width="0.0136%" height="15" fill="rgb(212,174,12)" fg:x="217803" fg:w="30"/><text x="98.8212%" y="2143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (30 samples, 0.01%)</title><rect x="98.5712%" y="2117" width="0.0136%" height="15" fill="rgb(246,67,9)" fg:x="217803" fg:w="30"/><text x="98.8212%" y="2127.50"></text></g><g><title>[unknown] (274 samples, 0.12%)</title><rect x="98.4635%" y="2325" width="0.1240%" height="15" fill="rgb(239,35,23)" fg:x="217565" fg:w="274"/><text x="98.7135%" y="2335.50"></text></g><g><title>async-std/runti (217,861 samples, 98.60%)</title><rect x="0.0000%" y="2341" width="98.5975%" height="15" fill="rgb(211,167,0)" fg:x="0" fg:w="217861"/><text x="0.2500%" y="2351.50">async-std/runti</text></g><g><title>sled::pagecache::PageCache::attempt_gc (34 samples, 0.02%)</title><rect x="98.5979%" y="2085" width="0.0154%" height="15" fill="rgb(225,119,45)" fg:x="217862" fg:w="34"/><text x="98.8479%" y="2095.50"></text></g><g><title>sled::pagecache::PageCache::rewrite_page (30 samples, 0.01%)</title><rect x="98.5997%" y="2069" width="0.0136%" height="15" fill="rgb(210,162,6)" fg:x="217866" fg:w="30"/><text x="98.8497%" y="2079.50"></text></g><g><title>std::panic::catch_unwind (43 samples, 0.02%)</title><rect x="98.5975%" y="2213" width="0.0195%" height="15" fill="rgb(208,118,35)" fg:x="217861" fg:w="43"/><text x="98.8475%" y="2223.50"></text></g><g><title>std::panicking::try (43 samples, 0.02%)</title><rect x="98.5975%" y="2197" width="0.0195%" height="15" fill="rgb(239,4,53)" fg:x="217861" fg:w="43"/><text x="98.8475%" y="2207.50"></text></g><g><title>std::panicking::try::do_call (43 samples, 0.02%)</title><rect x="98.5975%" y="2181" width="0.0195%" height="15" fill="rgb(213,130,21)" fg:x="217861" fg:w="43"/><text x="98.8475%" y="2191.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (43 samples, 0.02%)</title><rect x="98.5975%" y="2165" width="0.0195%" height="15" fill="rgb(235,148,0)" fg:x="217861" fg:w="43"/><text x="98.8475%" y="2175.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (43 samples, 0.02%)</title><rect x="98.5975%" y="2149" width="0.0195%" height="15" fill="rgb(244,224,18)" fg:x="217861" fg:w="43"/><text x="98.8475%" y="2159.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (43 samples, 0.02%)</title><rect x="98.5975%" y="2133" width="0.0195%" height="15" fill="rgb(211,214,4)" fg:x="217861" fg:w="43"/><text x="98.8475%" y="2143.50"></text></g><g><title>sled::flusher::Flusher::new::{{closure}} (43 samples, 0.02%)</title><rect x="98.5975%" y="2117" width="0.0195%" height="15" fill="rgb(206,119,25)" fg:x="217861" fg:w="43"/><text x="98.8475%" y="2127.50"></text></g><g><title>sled::flusher::run (43 samples, 0.02%)</title><rect x="98.5975%" y="2101" width="0.0195%" height="15" fill="rgb(243,93,47)" fg:x="217861" fg:w="43"/><text x="98.8475%" y="2111.50"></text></g><g><title>log_flusher (50 samples, 0.02%)</title><rect x="98.5975%" y="2341" width="0.0226%" height="15" fill="rgb(224,194,6)" fg:x="217861" fg:w="50"/><text x="98.8475%" y="2351.50"></text></g><g><title>[libc.so.6] (50 samples, 0.02%)</title><rect x="98.5975%" y="2325" width="0.0226%" height="15" fill="rgb(243,229,6)" fg:x="217861" fg:w="50"/><text x="98.8475%" y="2335.50"></text></g><g><title>[libc.so.6] (50 samples, 0.02%)</title><rect x="98.5975%" y="2309" width="0.0226%" height="15" fill="rgb(207,23,50)" fg:x="217861" fg:w="50"/><text x="98.8475%" y="2319.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (50 samples, 0.02%)</title><rect x="98.5975%" y="2293" width="0.0226%" height="15" fill="rgb(253,192,32)" fg:x="217861" fg:w="50"/><text x="98.8475%" y="2303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (50 samples, 0.02%)</title><rect x="98.5975%" y="2277" width="0.0226%" height="15" fill="rgb(213,21,6)" fg:x="217861" fg:w="50"/><text x="98.8475%" y="2287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (50 samples, 0.02%)</title><rect x="98.5975%" y="2261" width="0.0226%" height="15" fill="rgb(243,151,13)" fg:x="217861" fg:w="50"/><text x="98.8475%" y="2271.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (50 samples, 0.02%)</title><rect x="98.5975%" y="2245" width="0.0226%" height="15" fill="rgb(233,165,41)" fg:x="217861" fg:w="50"/><text x="98.8475%" y="2255.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (50 samples, 0.02%)</title><rect x="98.5975%" y="2229" width="0.0226%" height="15" fill="rgb(246,176,45)" fg:x="217861" fg:w="50"/><text x="98.8475%" y="2239.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (34 samples, 0.02%)</title><rect x="98.6233%" y="1941" width="0.0154%" height="15" fill="rgb(217,170,52)" fg:x="217918" fg:w="34"/><text x="98.8733%" y="1951.50"></text></g><g><title>core::mem::drop (34 samples, 0.02%)</title><rect x="98.6233%" y="1925" width="0.0154%" height="15" fill="rgb(214,203,54)" fg:x="217918" fg:w="34"/><text x="98.8733%" y="1935.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::SealedBag&gt; (34 samples, 0.02%)</title><rect x="98.6233%" y="1909" width="0.0154%" height="15" fill="rgb(248,215,49)" fg:x="217918" fg:w="34"/><text x="98.8733%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::Bag&gt; (34 samples, 0.02%)</title><rect x="98.6233%" y="1893" width="0.0154%" height="15" fill="rgb(208,46,10)" fg:x="217918" fg:w="34"/><text x="98.8733%" y="1903.50"></text></g><g><title>&lt;crossbeam_epoch::internal::Bag as core::ops::drop::Drop&gt;::drop (34 samples, 0.02%)</title><rect x="98.6233%" y="1877" width="0.0154%" height="15" fill="rgb(254,5,31)" fg:x="217918" fg:w="34"/><text x="98.8733%" y="1887.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::call (34 samples, 0.02%)</title><rect x="98.6233%" y="1861" width="0.0154%" height="15" fill="rgb(222,104,33)" fg:x="217918" fg:w="34"/><text x="98.8733%" y="1871.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::new::call (32 samples, 0.01%)</title><rect x="98.6242%" y="1845" width="0.0145%" height="15" fill="rgb(248,49,16)" fg:x="217920" fg:w="32"/><text x="98.8742%" y="1855.50"></text></g><g><title>crossbeam_epoch::guard::Guard::defer_unchecked::{{closure}} (32 samples, 0.01%)</title><rect x="98.6242%" y="1829" width="0.0145%" height="15" fill="rgb(232,198,41)" fg:x="217920" fg:w="32"/><text x="98.8742%" y="1839.50"></text></g><g><title>core::mem::drop (32 samples, 0.01%)</title><rect x="98.6242%" y="1813" width="0.0145%" height="15" fill="rgb(214,125,3)" fg:x="217920" fg:w="32"/><text x="98.8742%" y="1823.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::atomic::Owned&lt;sled::pagecache::Page&gt;&gt; (32 samples, 0.01%)</title><rect x="98.6242%" y="1797" width="0.0145%" height="15" fill="rgb(229,220,28)" fg:x="217920" fg:w="32"/><text x="98.8742%" y="1807.50"></text></g><g><title>&lt;crossbeam_epoch::atomic::Owned&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.01%)</title><rect x="98.6242%" y="1781" width="0.0145%" height="15" fill="rgb(222,64,37)" fg:x="217920" fg:w="32"/><text x="98.8742%" y="1791.50"></text></g><g><title>&lt;T as crossbeam_epoch::atomic::Pointable&gt;::drop (32 samples, 0.01%)</title><rect x="98.6242%" y="1765" width="0.0145%" height="15" fill="rgb(249,184,13)" fg:x="217920" fg:w="32"/><text x="98.8742%" y="1775.50"></text></g><g><title>core::mem::drop (32 samples, 0.01%)</title><rect x="98.6242%" y="1749" width="0.0145%" height="15" fill="rgb(252,176,6)" fg:x="217920" fg:w="32"/><text x="98.8742%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Page&gt;&gt; (32 samples, 0.01%)</title><rect x="98.6242%" y="1733" width="0.0145%" height="15" fill="rgb(228,153,7)" fg:x="217920" fg:w="32"/><text x="98.8742%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::pagecache::Page&gt; (29 samples, 0.01%)</title><rect x="98.6255%" y="1717" width="0.0131%" height="15" fill="rgb(242,193,5)" fg:x="217923" fg:w="29"/><text x="98.8755%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt;&gt; (29 samples, 0.01%)</title><rect x="98.6255%" y="1701" width="0.0131%" height="15" fill="rgb(232,140,9)" fg:x="217923" fg:w="29"/><text x="98.8755%" y="1711.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt; (27 samples, 0.01%)</title><rect x="98.6264%" y="1685" width="0.0122%" height="15" fill="rgb(213,222,16)" fg:x="217925" fg:w="27"/><text x="98.8764%" y="1695.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (70 samples, 0.03%)</title><rect x="98.6228%" y="2021" width="0.0317%" height="15" fill="rgb(222,75,50)" fg:x="217917" fg:w="70"/><text x="98.8728%" y="2031.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (70 samples, 0.03%)</title><rect x="98.6228%" y="2005" width="0.0317%" height="15" fill="rgb(205,180,2)" fg:x="217917" fg:w="70"/><text x="98.8728%" y="2015.50"></text></g><g><title>sled::threadpool::spawn::{{closure}} (70 samples, 0.03%)</title><rect x="98.6228%" y="1989" width="0.0317%" height="15" fill="rgb(216,34,7)" fg:x="217917" fg:w="70"/><text x="98.8728%" y="1999.50"></text></g><g><title>sled::pagecache::iobuf::maybe_seal_and_write_iobuf::{{closure}} (70 samples, 0.03%)</title><rect x="98.6228%" y="1973" width="0.0317%" height="15" fill="rgb(253,16,32)" fg:x="217917" fg:w="70"/><text x="98.8728%" y="1983.50"></text></g><g><title>sled::pagecache::iobuf::IoBufs::write_to_log (70 samples, 0.03%)</title><rect x="98.6228%" y="1957" width="0.0317%" height="15" fill="rgb(208,97,28)" fg:x="217917" fg:w="70"/><text x="98.8728%" y="1967.50"></text></g><g><title>sync_file_range (25 samples, 0.01%)</title><rect x="98.6432%" y="1941" width="0.0113%" height="15" fill="rgb(225,92,11)" fg:x="217962" fg:w="25"/><text x="98.8932%" y="1951.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="98.6432%" y="1925" width="0.0113%" height="15" fill="rgb(243,38,12)" fg:x="217962" fg:w="25"/><text x="98.8932%" y="1935.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="98.6432%" y="1909" width="0.0113%" height="15" fill="rgb(208,139,16)" fg:x="217962" fg:w="25"/><text x="98.8932%" y="1919.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="98.6432%" y="1893" width="0.0113%" height="15" fill="rgb(227,24,9)" fg:x="217962" fg:w="25"/><text x="98.8932%" y="1903.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="98.6432%" y="1877" width="0.0113%" height="15" fill="rgb(206,62,11)" fg:x="217962" fg:w="25"/><text x="98.8932%" y="1887.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="98.6432%" y="1861" width="0.0113%" height="15" fill="rgb(228,134,27)" fg:x="217962" fg:w="25"/><text x="98.8932%" y="1871.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="98.6432%" y="1845" width="0.0113%" height="15" fill="rgb(205,55,33)" fg:x="217962" fg:w="25"/><text x="98.8932%" y="1855.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="98.6436%" y="1829" width="0.0109%" height="15" fill="rgb(243,75,43)" fg:x="217963" fg:w="24"/><text x="98.8936%" y="1839.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="98.6441%" y="1813" width="0.0104%" height="15" fill="rgb(223,27,42)" fg:x="217964" fg:w="23"/><text x="98.8941%" y="1823.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="98.6441%" y="1797" width="0.0104%" height="15" fill="rgb(232,189,33)" fg:x="217964" fg:w="23"/><text x="98.8941%" y="1807.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="98.6441%" y="1781" width="0.0104%" height="15" fill="rgb(210,9,39)" fg:x="217964" fg:w="23"/><text x="98.8941%" y="1791.50"></text></g><g><title>std::panic::catch_unwind (87 samples, 0.04%)</title><rect x="98.6228%" y="2213" width="0.0394%" height="15" fill="rgb(242,85,26)" fg:x="217917" fg:w="87"/><text x="98.8728%" y="2223.50"></text></g><g><title>std::panicking::try (87 samples, 0.04%)</title><rect x="98.6228%" y="2197" width="0.0394%" height="15" fill="rgb(248,44,4)" fg:x="217917" fg:w="87"/><text x="98.8728%" y="2207.50"></text></g><g><title>std::panicking::try::do_call (87 samples, 0.04%)</title><rect x="98.6228%" y="2181" width="0.0394%" height="15" fill="rgb(250,96,46)" fg:x="217917" fg:w="87"/><text x="98.8728%" y="2191.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (87 samples, 0.04%)</title><rect x="98.6228%" y="2165" width="0.0394%" height="15" fill="rgb(229,116,26)" fg:x="217917" fg:w="87"/><text x="98.8728%" y="2175.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (87 samples, 0.04%)</title><rect x="98.6228%" y="2149" width="0.0394%" height="15" fill="rgb(246,94,34)" fg:x="217917" fg:w="87"/><text x="98.8728%" y="2159.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (87 samples, 0.04%)</title><rect x="98.6228%" y="2133" width="0.0394%" height="15" fill="rgb(251,73,21)" fg:x="217917" fg:w="87"/><text x="98.8728%" y="2143.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}} (87 samples, 0.04%)</title><rect x="98.6228%" y="2117" width="0.0394%" height="15" fill="rgb(254,121,25)" fg:x="217917" fg:w="87"/><text x="98.8728%" y="2127.50"></text></g><g><title>std::panic::catch_unwind (87 samples, 0.04%)</title><rect x="98.6228%" y="2101" width="0.0394%" height="15" fill="rgb(215,161,49)" fg:x="217917" fg:w="87"/><text x="98.8728%" y="2111.50"></text></g><g><title>std::panicking::try (87 samples, 0.04%)</title><rect x="98.6228%" y="2085" width="0.0394%" height="15" fill="rgb(221,43,13)" fg:x="217917" fg:w="87"/><text x="98.8728%" y="2095.50"></text></g><g><title>std::panicking::try::do_call (87 samples, 0.04%)</title><rect x="98.6228%" y="2069" width="0.0394%" height="15" fill="rgb(249,5,37)" fg:x="217917" fg:w="87"/><text x="98.8728%" y="2079.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}}::{{closure}} (87 samples, 0.04%)</title><rect x="98.6228%" y="2053" width="0.0394%" height="15" fill="rgb(226,25,44)" fg:x="217917" fg:w="87"/><text x="98.8728%" y="2063.50"></text></g><g><title>sled::threadpool::perform_work (87 samples, 0.04%)</title><rect x="98.6228%" y="2037" width="0.0394%" height="15" fill="rgb(238,189,16)" fg:x="217917" fg:w="87"/><text x="98.8728%" y="2047.50"></text></g><g><title>sled-io-0 (94 samples, 0.04%)</title><rect x="98.6228%" y="2341" width="0.0425%" height="15" fill="rgb(251,186,8)" fg:x="217917" fg:w="94"/><text x="98.8728%" y="2351.50"></text></g><g><title>[libc.so.6] (94 samples, 0.04%)</title><rect x="98.6228%" y="2325" width="0.0425%" height="15" fill="rgb(254,34,31)" fg:x="217917" fg:w="94"/><text x="98.8728%" y="2335.50"></text></g><g><title>[libc.so.6] (94 samples, 0.04%)</title><rect x="98.6228%" y="2309" width="0.0425%" height="15" fill="rgb(225,215,27)" fg:x="217917" fg:w="94"/><text x="98.8728%" y="2319.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (94 samples, 0.04%)</title><rect x="98.6228%" y="2293" width="0.0425%" height="15" fill="rgb(221,192,48)" fg:x="217917" fg:w="94"/><text x="98.8728%" y="2303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (94 samples, 0.04%)</title><rect x="98.6228%" y="2277" width="0.0425%" height="15" fill="rgb(219,137,20)" fg:x="217917" fg:w="94"/><text x="98.8728%" y="2287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (94 samples, 0.04%)</title><rect x="98.6228%" y="2261" width="0.0425%" height="15" fill="rgb(219,84,11)" fg:x="217917" fg:w="94"/><text x="98.8728%" y="2271.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (94 samples, 0.04%)</title><rect x="98.6228%" y="2245" width="0.0425%" height="15" fill="rgb(224,10,23)" fg:x="217917" fg:w="94"/><text x="98.8728%" y="2255.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (94 samples, 0.04%)</title><rect x="98.6228%" y="2229" width="0.0425%" height="15" fill="rgb(248,22,39)" fg:x="217917" fg:w="94"/><text x="98.8728%" y="2239.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (25 samples, 0.01%)</title><rect x="98.6654%" y="1941" width="0.0113%" height="15" fill="rgb(212,154,20)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1951.50"></text></g><g><title>core::mem::drop (25 samples, 0.01%)</title><rect x="98.6654%" y="1925" width="0.0113%" height="15" fill="rgb(236,199,50)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1935.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::SealedBag&gt; (25 samples, 0.01%)</title><rect x="98.6654%" y="1909" width="0.0113%" height="15" fill="rgb(211,9,17)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::Bag&gt; (25 samples, 0.01%)</title><rect x="98.6654%" y="1893" width="0.0113%" height="15" fill="rgb(243,216,36)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1903.50"></text></g><g><title>&lt;crossbeam_epoch::internal::Bag as core::ops::drop::Drop&gt;::drop (25 samples, 0.01%)</title><rect x="98.6654%" y="1877" width="0.0113%" height="15" fill="rgb(250,2,10)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1887.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::call (25 samples, 0.01%)</title><rect x="98.6654%" y="1861" width="0.0113%" height="15" fill="rgb(226,50,48)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1871.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::new::call (25 samples, 0.01%)</title><rect x="98.6654%" y="1845" width="0.0113%" height="15" fill="rgb(243,81,16)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1855.50"></text></g><g><title>crossbeam_epoch::guard::Guard::defer_unchecked::{{closure}} (25 samples, 0.01%)</title><rect x="98.6654%" y="1829" width="0.0113%" height="15" fill="rgb(250,14,2)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1839.50"></text></g><g><title>core::mem::drop (25 samples, 0.01%)</title><rect x="98.6654%" y="1813" width="0.0113%" height="15" fill="rgb(233,135,29)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1823.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::atomic::Owned&lt;sled::pagecache::Page&gt;&gt; (25 samples, 0.01%)</title><rect x="98.6654%" y="1797" width="0.0113%" height="15" fill="rgb(224,64,43)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1807.50"></text></g><g><title>&lt;crossbeam_epoch::atomic::Owned&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.01%)</title><rect x="98.6654%" y="1781" width="0.0113%" height="15" fill="rgb(238,84,13)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1791.50"></text></g><g><title>&lt;T as crossbeam_epoch::atomic::Pointable&gt;::drop (25 samples, 0.01%)</title><rect x="98.6654%" y="1765" width="0.0113%" height="15" fill="rgb(253,48,26)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1775.50"></text></g><g><title>core::mem::drop (25 samples, 0.01%)</title><rect x="98.6654%" y="1749" width="0.0113%" height="15" fill="rgb(205,223,31)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Page&gt;&gt; (25 samples, 0.01%)</title><rect x="98.6654%" y="1733" width="0.0113%" height="15" fill="rgb(221,41,32)" fg:x="218011" fg:w="25"/><text x="98.9154%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::pagecache::Page&gt; (23 samples, 0.01%)</title><rect x="98.6663%" y="1717" width="0.0104%" height="15" fill="rgb(213,158,31)" fg:x="218013" fg:w="23"/><text x="98.9163%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt;&gt; (23 samples, 0.01%)</title><rect x="98.6663%" y="1701" width="0.0104%" height="15" fill="rgb(245,126,43)" fg:x="218013" fg:w="23"/><text x="98.9163%" y="1711.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (57 samples, 0.03%)</title><rect x="98.6654%" y="2005" width="0.0258%" height="15" fill="rgb(227,7,22)" fg:x="218011" fg:w="57"/><text x="98.9154%" y="2015.50"></text></g><g><title>sled::threadpool::spawn::{{closure}} (57 samples, 0.03%)</title><rect x="98.6654%" y="1989" width="0.0258%" height="15" fill="rgb(252,90,44)" fg:x="218011" fg:w="57"/><text x="98.9154%" y="1999.50"></text></g><g><title>sled::pagecache::iobuf::maybe_seal_and_write_iobuf::{{closure}} (57 samples, 0.03%)</title><rect x="98.6654%" y="1973" width="0.0258%" height="15" fill="rgb(253,91,0)" fg:x="218011" fg:w="57"/><text x="98.9154%" y="1983.50"></text></g><g><title>sled::pagecache::iobuf::IoBufs::write_to_log (57 samples, 0.03%)</title><rect x="98.6654%" y="1957" width="0.0258%" height="15" fill="rgb(252,175,49)" fg:x="218011" fg:w="57"/><text x="98.9154%" y="1967.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (58 samples, 0.03%)</title><rect x="98.6654%" y="2021" width="0.0262%" height="15" fill="rgb(246,150,1)" fg:x="218011" fg:w="58"/><text x="98.9154%" y="2031.50"></text></g><g><title>std::panic::catch_unwind (88 samples, 0.04%)</title><rect x="98.6654%" y="2213" width="0.0398%" height="15" fill="rgb(241,192,25)" fg:x="218011" fg:w="88"/><text x="98.9154%" y="2223.50"></text></g><g><title>std::panicking::try (88 samples, 0.04%)</title><rect x="98.6654%" y="2197" width="0.0398%" height="15" fill="rgb(239,187,11)" fg:x="218011" fg:w="88"/><text x="98.9154%" y="2207.50"></text></g><g><title>std::panicking::try::do_call (88 samples, 0.04%)</title><rect x="98.6654%" y="2181" width="0.0398%" height="15" fill="rgb(218,202,51)" fg:x="218011" fg:w="88"/><text x="98.9154%" y="2191.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (88 samples, 0.04%)</title><rect x="98.6654%" y="2165" width="0.0398%" height="15" fill="rgb(225,176,8)" fg:x="218011" fg:w="88"/><text x="98.9154%" y="2175.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (88 samples, 0.04%)</title><rect x="98.6654%" y="2149" width="0.0398%" height="15" fill="rgb(219,122,41)" fg:x="218011" fg:w="88"/><text x="98.9154%" y="2159.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (88 samples, 0.04%)</title><rect x="98.6654%" y="2133" width="0.0398%" height="15" fill="rgb(248,140,20)" fg:x="218011" fg:w="88"/><text x="98.9154%" y="2143.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}} (88 samples, 0.04%)</title><rect x="98.6654%" y="2117" width="0.0398%" height="15" fill="rgb(245,41,37)" fg:x="218011" fg:w="88"/><text x="98.9154%" y="2127.50"></text></g><g><title>std::panic::catch_unwind (88 samples, 0.04%)</title><rect x="98.6654%" y="2101" width="0.0398%" height="15" fill="rgb(235,82,39)" fg:x="218011" fg:w="88"/><text x="98.9154%" y="2111.50"></text></g><g><title>std::panicking::try (88 samples, 0.04%)</title><rect x="98.6654%" y="2085" width="0.0398%" height="15" fill="rgb(230,108,42)" fg:x="218011" fg:w="88"/><text x="98.9154%" y="2095.50"></text></g><g><title>std::panicking::try::do_call (88 samples, 0.04%)</title><rect x="98.6654%" y="2069" width="0.0398%" height="15" fill="rgb(215,150,50)" fg:x="218011" fg:w="88"/><text x="98.9154%" y="2079.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}}::{{closure}} (88 samples, 0.04%)</title><rect x="98.6654%" y="2053" width="0.0398%" height="15" fill="rgb(233,212,5)" fg:x="218011" fg:w="88"/><text x="98.9154%" y="2063.50"></text></g><g><title>sled::threadpool::perform_work (88 samples, 0.04%)</title><rect x="98.6654%" y="2037" width="0.0398%" height="15" fill="rgb(245,80,22)" fg:x="218011" fg:w="88"/><text x="98.9154%" y="2047.50"></text></g><g><title>sled::threadpool::Queue::recv_timeout (29 samples, 0.01%)</title><rect x="98.6921%" y="2021" width="0.0131%" height="15" fill="rgb(238,129,16)" fg:x="218070" fg:w="29"/><text x="98.9421%" y="2031.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until (28 samples, 0.01%)</title><rect x="98.6925%" y="2005" width="0.0127%" height="15" fill="rgb(240,19,0)" fg:x="218071" fg:w="28"/><text x="98.9425%" y="2015.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (28 samples, 0.01%)</title><rect x="98.6925%" y="1989" width="0.0127%" height="15" fill="rgb(232,42,35)" fg:x="218071" fg:w="28"/><text x="98.9425%" y="1999.50"></text></g><g><title>parking_lot_core::parking_lot::park (28 samples, 0.01%)</title><rect x="98.6925%" y="1973" width="0.0127%" height="15" fill="rgb(223,130,24)" fg:x="218071" fg:w="28"/><text x="98.9425%" y="1983.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (28 samples, 0.01%)</title><rect x="98.6925%" y="1957" width="0.0127%" height="15" fill="rgb(237,16,22)" fg:x="218071" fg:w="28"/><text x="98.9425%" y="1967.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (28 samples, 0.01%)</title><rect x="98.6925%" y="1941" width="0.0127%" height="15" fill="rgb(248,192,20)" fg:x="218071" fg:w="28"/><text x="98.9425%" y="1951.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park_until (28 samples, 0.01%)</title><rect x="98.6925%" y="1925" width="0.0127%" height="15" fill="rgb(233,167,2)" fg:x="218071" fg:w="28"/><text x="98.9425%" y="1935.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (28 samples, 0.01%)</title><rect x="98.6925%" y="1909" width="0.0127%" height="15" fill="rgb(252,71,44)" fg:x="218071" fg:w="28"/><text x="98.9425%" y="1919.50"></text></g><g><title>syscall (28 samples, 0.01%)</title><rect x="98.6925%" y="1893" width="0.0127%" height="15" fill="rgb(238,37,47)" fg:x="218071" fg:w="28"/><text x="98.9425%" y="1903.50"></text></g><g><title>[unknown] (28 samples, 0.01%)</title><rect x="98.6925%" y="1877" width="0.0127%" height="15" fill="rgb(214,202,54)" fg:x="218071" fg:w="28"/><text x="98.9425%" y="1887.50"></text></g><g><title>[unknown] (27 samples, 0.01%)</title><rect x="98.6930%" y="1861" width="0.0122%" height="15" fill="rgb(254,165,40)" fg:x="218072" fg:w="27"/><text x="98.9430%" y="1871.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="98.6934%" y="1845" width="0.0118%" height="15" fill="rgb(246,173,38)" fg:x="218073" fg:w="26"/><text x="98.9434%" y="1855.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="98.6934%" y="1829" width="0.0118%" height="15" fill="rgb(215,3,27)" fg:x="218073" fg:w="26"/><text x="98.9434%" y="1839.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="98.6934%" y="1813" width="0.0118%" height="15" fill="rgb(239,169,51)" fg:x="218073" fg:w="26"/><text x="98.9434%" y="1823.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="98.6934%" y="1797" width="0.0118%" height="15" fill="rgb(212,5,25)" fg:x="218073" fg:w="26"/><text x="98.9434%" y="1807.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="98.6943%" y="1781" width="0.0109%" height="15" fill="rgb(243,45,17)" fg:x="218075" fg:w="24"/><text x="98.9443%" y="1791.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="98.6948%" y="1765" width="0.0104%" height="15" fill="rgb(242,97,9)" fg:x="218076" fg:w="23"/><text x="98.9448%" y="1775.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="98.6948%" y="1749" width="0.0104%" height="15" fill="rgb(228,71,31)" fg:x="218076" fg:w="23"/><text x="98.9448%" y="1759.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="98.6948%" y="1733" width="0.0104%" height="15" fill="rgb(252,184,16)" fg:x="218076" fg:w="23"/><text x="98.9448%" y="1743.50"></text></g><g><title>sled-io-1 (104 samples, 0.05%)</title><rect x="98.6654%" y="2341" width="0.0471%" height="15" fill="rgb(236,169,46)" fg:x="218011" fg:w="104"/><text x="98.9154%" y="2351.50"></text></g><g><title>[libc.so.6] (104 samples, 0.05%)</title><rect x="98.6654%" y="2325" width="0.0471%" height="15" fill="rgb(207,17,47)" fg:x="218011" fg:w="104"/><text x="98.9154%" y="2335.50"></text></g><g><title>[libc.so.6] (104 samples, 0.05%)</title><rect x="98.6654%" y="2309" width="0.0471%" height="15" fill="rgb(206,201,28)" fg:x="218011" fg:w="104"/><text x="98.9154%" y="2319.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (104 samples, 0.05%)</title><rect x="98.6654%" y="2293" width="0.0471%" height="15" fill="rgb(224,184,23)" fg:x="218011" fg:w="104"/><text x="98.9154%" y="2303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (104 samples, 0.05%)</title><rect x="98.6654%" y="2277" width="0.0471%" height="15" fill="rgb(208,139,48)" fg:x="218011" fg:w="104"/><text x="98.9154%" y="2287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (104 samples, 0.05%)</title><rect x="98.6654%" y="2261" width="0.0471%" height="15" fill="rgb(208,130,10)" fg:x="218011" fg:w="104"/><text x="98.9154%" y="2271.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (104 samples, 0.05%)</title><rect x="98.6654%" y="2245" width="0.0471%" height="15" fill="rgb(211,213,45)" fg:x="218011" fg:w="104"/><text x="98.9154%" y="2255.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (104 samples, 0.05%)</title><rect x="98.6654%" y="2229" width="0.0471%" height="15" fill="rgb(235,100,30)" fg:x="218011" fg:w="104"/><text x="98.9154%" y="2239.50"></text></g><g><title>core::mem::drop (36 samples, 0.02%)</title><rect x="98.7133%" y="1925" width="0.0163%" height="15" fill="rgb(206,144,31)" fg:x="218117" fg:w="36"/><text x="98.9633%" y="1935.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::SealedBag&gt; (36 samples, 0.02%)</title><rect x="98.7133%" y="1909" width="0.0163%" height="15" fill="rgb(224,200,26)" fg:x="218117" fg:w="36"/><text x="98.9633%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::Bag&gt; (36 samples, 0.02%)</title><rect x="98.7133%" y="1893" width="0.0163%" height="15" fill="rgb(247,104,53)" fg:x="218117" fg:w="36"/><text x="98.9633%" y="1903.50"></text></g><g><title>&lt;crossbeam_epoch::internal::Bag as core::ops::drop::Drop&gt;::drop (36 samples, 0.02%)</title><rect x="98.7133%" y="1877" width="0.0163%" height="15" fill="rgb(220,14,17)" fg:x="218117" fg:w="36"/><text x="98.9633%" y="1887.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::call (36 samples, 0.02%)</title><rect x="98.7133%" y="1861" width="0.0163%" height="15" fill="rgb(230,140,40)" fg:x="218117" fg:w="36"/><text x="98.9633%" y="1871.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::new::call (35 samples, 0.02%)</title><rect x="98.7138%" y="1845" width="0.0158%" height="15" fill="rgb(229,2,41)" fg:x="218118" fg:w="35"/><text x="98.9638%" y="1855.50"></text></g><g><title>crossbeam_epoch::guard::Guard::defer_unchecked::{{closure}} (35 samples, 0.02%)</title><rect x="98.7138%" y="1829" width="0.0158%" height="15" fill="rgb(232,89,16)" fg:x="218118" fg:w="35"/><text x="98.9638%" y="1839.50"></text></g><g><title>core::mem::drop (35 samples, 0.02%)</title><rect x="98.7138%" y="1813" width="0.0158%" height="15" fill="rgb(247,59,52)" fg:x="218118" fg:w="35"/><text x="98.9638%" y="1823.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::atomic::Owned&lt;sled::pagecache::Page&gt;&gt; (35 samples, 0.02%)</title><rect x="98.7138%" y="1797" width="0.0158%" height="15" fill="rgb(226,110,21)" fg:x="218118" fg:w="35"/><text x="98.9638%" y="1807.50"></text></g><g><title>&lt;crossbeam_epoch::atomic::Owned&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.02%)</title><rect x="98.7138%" y="1781" width="0.0158%" height="15" fill="rgb(224,176,43)" fg:x="218118" fg:w="35"/><text x="98.9638%" y="1791.50"></text></g><g><title>&lt;T as crossbeam_epoch::atomic::Pointable&gt;::drop (35 samples, 0.02%)</title><rect x="98.7138%" y="1765" width="0.0158%" height="15" fill="rgb(221,73,6)" fg:x="218118" fg:w="35"/><text x="98.9638%" y="1775.50"></text></g><g><title>core::mem::drop (35 samples, 0.02%)</title><rect x="98.7138%" y="1749" width="0.0158%" height="15" fill="rgb(232,78,19)" fg:x="218118" fg:w="35"/><text x="98.9638%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Page&gt;&gt; (35 samples, 0.02%)</title><rect x="98.7138%" y="1733" width="0.0158%" height="15" fill="rgb(233,112,48)" fg:x="218118" fg:w="35"/><text x="98.9638%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::pagecache::Page&gt; (32 samples, 0.01%)</title><rect x="98.7152%" y="1717" width="0.0145%" height="15" fill="rgb(243,131,47)" fg:x="218121" fg:w="32"/><text x="98.9652%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt;&gt; (32 samples, 0.01%)</title><rect x="98.7152%" y="1701" width="0.0145%" height="15" fill="rgb(226,51,1)" fg:x="218121" fg:w="32"/><text x="98.9652%" y="1711.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt; (30 samples, 0.01%)</title><rect x="98.7161%" y="1685" width="0.0136%" height="15" fill="rgb(247,58,7)" fg:x="218123" fg:w="30"/><text x="98.9661%" y="1695.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (37 samples, 0.02%)</title><rect x="98.7133%" y="1941" width="0.0167%" height="15" fill="rgb(209,7,32)" fg:x="218117" fg:w="37"/><text x="98.9633%" y="1951.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (75 samples, 0.03%)</title><rect x="98.7124%" y="2021" width="0.0339%" height="15" fill="rgb(209,39,41)" fg:x="218115" fg:w="75"/><text x="98.9624%" y="2031.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (75 samples, 0.03%)</title><rect x="98.7124%" y="2005" width="0.0339%" height="15" fill="rgb(226,182,46)" fg:x="218115" fg:w="75"/><text x="98.9624%" y="2015.50"></text></g><g><title>sled::threadpool::spawn::{{closure}} (74 samples, 0.03%)</title><rect x="98.7129%" y="1989" width="0.0335%" height="15" fill="rgb(230,219,10)" fg:x="218116" fg:w="74"/><text x="98.9629%" y="1999.50"></text></g><g><title>sled::pagecache::iobuf::maybe_seal_and_write_iobuf::{{closure}} (74 samples, 0.03%)</title><rect x="98.7129%" y="1973" width="0.0335%" height="15" fill="rgb(227,175,30)" fg:x="218116" fg:w="74"/><text x="98.9629%" y="1983.50"></text></g><g><title>sled::pagecache::iobuf::IoBufs::write_to_log (74 samples, 0.03%)</title><rect x="98.7129%" y="1957" width="0.0335%" height="15" fill="rgb(217,2,50)" fg:x="218116" fg:w="74"/><text x="98.9629%" y="1967.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park_until (47 samples, 0.02%)</title><rect x="98.7468%" y="1925" width="0.0213%" height="15" fill="rgb(229,160,0)" fg:x="218191" fg:w="47"/><text x="98.9968%" y="1935.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (46 samples, 0.02%)</title><rect x="98.7473%" y="1909" width="0.0208%" height="15" fill="rgb(207,78,37)" fg:x="218192" fg:w="46"/><text x="98.9973%" y="1919.50"></text></g><g><title>syscall (46 samples, 0.02%)</title><rect x="98.7473%" y="1893" width="0.0208%" height="15" fill="rgb(225,57,0)" fg:x="218192" fg:w="46"/><text x="98.9973%" y="1903.50"></text></g><g><title>[unknown] (46 samples, 0.02%)</title><rect x="98.7473%" y="1877" width="0.0208%" height="15" fill="rgb(232,154,2)" fg:x="218192" fg:w="46"/><text x="98.9973%" y="1887.50"></text></g><g><title>[unknown] (46 samples, 0.02%)</title><rect x="98.7473%" y="1861" width="0.0208%" height="15" fill="rgb(241,212,25)" fg:x="218192" fg:w="46"/><text x="98.9973%" y="1871.50"></text></g><g><title>[unknown] (46 samples, 0.02%)</title><rect x="98.7473%" y="1845" width="0.0208%" height="15" fill="rgb(226,69,20)" fg:x="218192" fg:w="46"/><text x="98.9973%" y="1855.50"></text></g><g><title>[unknown] (46 samples, 0.02%)</title><rect x="98.7473%" y="1829" width="0.0208%" height="15" fill="rgb(247,184,54)" fg:x="218192" fg:w="46"/><text x="98.9973%" y="1839.50"></text></g><g><title>[unknown] (45 samples, 0.02%)</title><rect x="98.7477%" y="1813" width="0.0204%" height="15" fill="rgb(210,145,0)" fg:x="218193" fg:w="45"/><text x="98.9977%" y="1823.50"></text></g><g><title>[unknown] (42 samples, 0.02%)</title><rect x="98.7491%" y="1797" width="0.0190%" height="15" fill="rgb(253,82,12)" fg:x="218196" fg:w="42"/><text x="98.9991%" y="1807.50"></text></g><g><title>[unknown] (42 samples, 0.02%)</title><rect x="98.7491%" y="1781" width="0.0190%" height="15" fill="rgb(245,42,11)" fg:x="218196" fg:w="42"/><text x="98.9991%" y="1791.50"></text></g><g><title>[unknown] (42 samples, 0.02%)</title><rect x="98.7491%" y="1765" width="0.0190%" height="15" fill="rgb(219,147,32)" fg:x="218196" fg:w="42"/><text x="98.9991%" y="1775.50"></text></g><g><title>[unknown] (35 samples, 0.02%)</title><rect x="98.7523%" y="1749" width="0.0158%" height="15" fill="rgb(246,12,7)" fg:x="218203" fg:w="35"/><text x="99.0023%" y="1759.50"></text></g><g><title>[unknown] (33 samples, 0.01%)</title><rect x="98.7532%" y="1733" width="0.0149%" height="15" fill="rgb(243,50,9)" fg:x="218205" fg:w="33"/><text x="99.0032%" y="1743.50"></text></g><g><title>[unknown] (30 samples, 0.01%)</title><rect x="98.7545%" y="1717" width="0.0136%" height="15" fill="rgb(219,149,6)" fg:x="218208" fg:w="30"/><text x="99.0045%" y="1727.50"></text></g><g><title>std::panic::catch_unwind (125 samples, 0.06%)</title><rect x="98.7124%" y="2213" width="0.0566%" height="15" fill="rgb(241,51,42)" fg:x="218115" fg:w="125"/><text x="98.9624%" y="2223.50"></text></g><g><title>std::panicking::try (125 samples, 0.06%)</title><rect x="98.7124%" y="2197" width="0.0566%" height="15" fill="rgb(226,128,27)" fg:x="218115" fg:w="125"/><text x="98.9624%" y="2207.50"></text></g><g><title>std::panicking::try::do_call (125 samples, 0.06%)</title><rect x="98.7124%" y="2181" width="0.0566%" height="15" fill="rgb(244,144,4)" fg:x="218115" fg:w="125"/><text x="98.9624%" y="2191.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (125 samples, 0.06%)</title><rect x="98.7124%" y="2165" width="0.0566%" height="15" fill="rgb(221,4,13)" fg:x="218115" fg:w="125"/><text x="98.9624%" y="2175.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (125 samples, 0.06%)</title><rect x="98.7124%" y="2149" width="0.0566%" height="15" fill="rgb(208,170,28)" fg:x="218115" fg:w="125"/><text x="98.9624%" y="2159.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (125 samples, 0.06%)</title><rect x="98.7124%" y="2133" width="0.0566%" height="15" fill="rgb(226,131,13)" fg:x="218115" fg:w="125"/><text x="98.9624%" y="2143.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}} (125 samples, 0.06%)</title><rect x="98.7124%" y="2117" width="0.0566%" height="15" fill="rgb(215,72,41)" fg:x="218115" fg:w="125"/><text x="98.9624%" y="2127.50"></text></g><g><title>std::panic::catch_unwind (125 samples, 0.06%)</title><rect x="98.7124%" y="2101" width="0.0566%" height="15" fill="rgb(243,108,20)" fg:x="218115" fg:w="125"/><text x="98.9624%" y="2111.50"></text></g><g><title>std::panicking::try (125 samples, 0.06%)</title><rect x="98.7124%" y="2085" width="0.0566%" height="15" fill="rgb(230,189,17)" fg:x="218115" fg:w="125"/><text x="98.9624%" y="2095.50"></text></g><g><title>std::panicking::try::do_call (125 samples, 0.06%)</title><rect x="98.7124%" y="2069" width="0.0566%" height="15" fill="rgb(220,50,17)" fg:x="218115" fg:w="125"/><text x="98.9624%" y="2079.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}}::{{closure}} (125 samples, 0.06%)</title><rect x="98.7124%" y="2053" width="0.0566%" height="15" fill="rgb(248,152,48)" fg:x="218115" fg:w="125"/><text x="98.9624%" y="2063.50"></text></g><g><title>sled::threadpool::perform_work (125 samples, 0.06%)</title><rect x="98.7124%" y="2037" width="0.0566%" height="15" fill="rgb(244,91,11)" fg:x="218115" fg:w="125"/><text x="98.9624%" y="2047.50"></text></g><g><title>sled::threadpool::Queue::recv_timeout (50 samples, 0.02%)</title><rect x="98.7464%" y="2021" width="0.0226%" height="15" fill="rgb(220,157,5)" fg:x="218190" fg:w="50"/><text x="98.9964%" y="2031.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until (50 samples, 0.02%)</title><rect x="98.7464%" y="2005" width="0.0226%" height="15" fill="rgb(253,137,8)" fg:x="218190" fg:w="50"/><text x="98.9964%" y="2015.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (50 samples, 0.02%)</title><rect x="98.7464%" y="1989" width="0.0226%" height="15" fill="rgb(217,137,51)" fg:x="218190" fg:w="50"/><text x="98.9964%" y="1999.50"></text></g><g><title>parking_lot_core::parking_lot::park (50 samples, 0.02%)</title><rect x="98.7464%" y="1973" width="0.0226%" height="15" fill="rgb(218,209,53)" fg:x="218190" fg:w="50"/><text x="98.9964%" y="1983.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (50 samples, 0.02%)</title><rect x="98.7464%" y="1957" width="0.0226%" height="15" fill="rgb(249,137,25)" fg:x="218190" fg:w="50"/><text x="98.9964%" y="1967.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (49 samples, 0.02%)</title><rect x="98.7468%" y="1941" width="0.0222%" height="15" fill="rgb(239,155,26)" fg:x="218191" fg:w="49"/><text x="98.9968%" y="1951.50"></text></g><g><title>[libc.so.6] (126 samples, 0.06%)</title><rect x="98.7124%" y="2325" width="0.0570%" height="15" fill="rgb(227,85,46)" fg:x="218115" fg:w="126"/><text x="98.9624%" y="2335.50"></text></g><g><title>[libc.so.6] (126 samples, 0.06%)</title><rect x="98.7124%" y="2309" width="0.0570%" height="15" fill="rgb(251,107,43)" fg:x="218115" fg:w="126"/><text x="98.9624%" y="2319.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (126 samples, 0.06%)</title><rect x="98.7124%" y="2293" width="0.0570%" height="15" fill="rgb(234,170,33)" fg:x="218115" fg:w="126"/><text x="98.9624%" y="2303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (126 samples, 0.06%)</title><rect x="98.7124%" y="2277" width="0.0570%" height="15" fill="rgb(206,29,35)" fg:x="218115" fg:w="126"/><text x="98.9624%" y="2287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (126 samples, 0.06%)</title><rect x="98.7124%" y="2261" width="0.0570%" height="15" fill="rgb(227,138,25)" fg:x="218115" fg:w="126"/><text x="98.9624%" y="2271.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (126 samples, 0.06%)</title><rect x="98.7124%" y="2245" width="0.0570%" height="15" fill="rgb(249,131,35)" fg:x="218115" fg:w="126"/><text x="98.9624%" y="2255.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (126 samples, 0.06%)</title><rect x="98.7124%" y="2229" width="0.0570%" height="15" fill="rgb(239,6,40)" fg:x="218115" fg:w="126"/><text x="98.9624%" y="2239.50"></text></g><g><title>sled-io-2 (129 samples, 0.06%)</title><rect x="98.7124%" y="2341" width="0.0584%" height="15" fill="rgb(246,136,47)" fg:x="218115" fg:w="129"/><text x="98.9624%" y="2351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.01%)</title><rect x="98.7808%" y="1621" width="0.0109%" height="15" fill="rgb(253,58,26)" fg:x="218266" fg:w="24"/><text x="99.0308%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;[sled::ivec::IVec]&gt; (24 samples, 0.01%)</title><rect x="98.7808%" y="1605" width="0.0109%" height="15" fill="rgb(237,141,10)" fg:x="218266" fg:w="24"/><text x="99.0308%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::ivec::IVec&gt; (24 samples, 0.01%)</title><rect x="98.7808%" y="1589" width="0.0109%" height="15" fill="rgb(234,156,12)" fg:x="218266" fg:w="24"/><text x="99.0308%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::ivec::IVecInner&gt; (24 samples, 0.01%)</title><rect x="98.7808%" y="1573" width="0.0109%" height="15" fill="rgb(243,224,36)" fg:x="218266" fg:w="24"/><text x="99.0308%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::node::Data&gt; (35 samples, 0.02%)</title><rect x="98.7799%" y="1669" width="0.0158%" height="15" fill="rgb(205,229,51)" fg:x="218264" fg:w="35"/><text x="99.0299%" y="1679.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::node::Leaf&gt; (33 samples, 0.01%)</title><rect x="98.7808%" y="1653" width="0.0149%" height="15" fill="rgb(223,189,4)" fg:x="218266" fg:w="33"/><text x="99.0308%" y="1663.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;sled::ivec::IVec&gt;&gt; (33 samples, 0.01%)</title><rect x="98.7808%" y="1637" width="0.0149%" height="15" fill="rgb(249,167,54)" fg:x="218266" fg:w="33"/><text x="99.0308%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::atomic::Owned&lt;sled::pagecache::Page&gt;&gt; (51 samples, 0.02%)</title><rect x="98.7731%" y="1797" width="0.0231%" height="15" fill="rgb(218,34,28)" fg:x="218249" fg:w="51"/><text x="99.0231%" y="1807.50"></text></g><g><title>&lt;crossbeam_epoch::atomic::Owned&lt;T&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.02%)</title><rect x="98.7731%" y="1781" width="0.0231%" height="15" fill="rgb(232,109,42)" fg:x="218249" fg:w="51"/><text x="99.0231%" y="1791.50"></text></g><g><title>&lt;T as crossbeam_epoch::atomic::Pointable&gt;::drop (51 samples, 0.02%)</title><rect x="98.7731%" y="1765" width="0.0231%" height="15" fill="rgb(248,214,46)" fg:x="218249" fg:w="51"/><text x="99.0231%" y="1775.50"></text></g><g><title>core::mem::drop (51 samples, 0.02%)</title><rect x="98.7731%" y="1749" width="0.0231%" height="15" fill="rgb(244,216,40)" fg:x="218249" fg:w="51"/><text x="99.0231%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Page&gt;&gt; (51 samples, 0.02%)</title><rect x="98.7731%" y="1733" width="0.0231%" height="15" fill="rgb(231,226,31)" fg:x="218249" fg:w="51"/><text x="99.0231%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::pagecache::Page&gt; (44 samples, 0.02%)</title><rect x="98.7762%" y="1717" width="0.0199%" height="15" fill="rgb(238,38,43)" fg:x="218256" fg:w="44"/><text x="99.0262%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt;&gt; (44 samples, 0.02%)</title><rect x="98.7762%" y="1701" width="0.0199%" height="15" fill="rgb(208,88,43)" fg:x="218256" fg:w="44"/><text x="99.0262%" y="1711.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt; (44 samples, 0.02%)</title><rect x="98.7762%" y="1685" width="0.0199%" height="15" fill="rgb(205,136,37)" fg:x="218256" fg:w="44"/><text x="99.0262%" y="1695.50"></text></g><g><title>core::mem::drop (53 samples, 0.02%)</title><rect x="98.7726%" y="1813" width="0.0240%" height="15" fill="rgb(237,34,14)" fg:x="218248" fg:w="53"/><text x="99.0226%" y="1823.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (56 samples, 0.03%)</title><rect x="98.7717%" y="1941" width="0.0253%" height="15" fill="rgb(236,193,44)" fg:x="218246" fg:w="56"/><text x="99.0217%" y="1951.50"></text></g><g><title>core::mem::drop (56 samples, 0.03%)</title><rect x="98.7717%" y="1925" width="0.0253%" height="15" fill="rgb(231,48,10)" fg:x="218246" fg:w="56"/><text x="99.0217%" y="1935.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::SealedBag&gt; (56 samples, 0.03%)</title><rect x="98.7717%" y="1909" width="0.0253%" height="15" fill="rgb(213,141,34)" fg:x="218246" fg:w="56"/><text x="99.0217%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::Bag&gt; (56 samples, 0.03%)</title><rect x="98.7717%" y="1893" width="0.0253%" height="15" fill="rgb(249,130,34)" fg:x="218246" fg:w="56"/><text x="99.0217%" y="1903.50"></text></g><g><title>&lt;crossbeam_epoch::internal::Bag as core::ops::drop::Drop&gt;::drop (56 samples, 0.03%)</title><rect x="98.7717%" y="1877" width="0.0253%" height="15" fill="rgb(219,42,41)" fg:x="218246" fg:w="56"/><text x="99.0217%" y="1887.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::call (56 samples, 0.03%)</title><rect x="98.7717%" y="1861" width="0.0253%" height="15" fill="rgb(224,100,54)" fg:x="218246" fg:w="56"/><text x="99.0217%" y="1871.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::new::call (54 samples, 0.02%)</title><rect x="98.7726%" y="1845" width="0.0244%" height="15" fill="rgb(229,200,27)" fg:x="218248" fg:w="54"/><text x="99.0226%" y="1855.50"></text></g><g><title>crossbeam_epoch::guard::Guard::defer_unchecked::{{closure}} (54 samples, 0.02%)</title><rect x="98.7726%" y="1829" width="0.0244%" height="15" fill="rgb(217,118,10)" fg:x="218248" fg:w="54"/><text x="99.0226%" y="1839.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (101 samples, 0.05%)</title><rect x="98.7713%" y="2021" width="0.0457%" height="15" fill="rgb(206,22,3)" fg:x="218245" fg:w="101"/><text x="99.0213%" y="2031.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (101 samples, 0.05%)</title><rect x="98.7713%" y="2005" width="0.0457%" height="15" fill="rgb(232,163,46)" fg:x="218245" fg:w="101"/><text x="99.0213%" y="2015.50"></text></g><g><title>sled::threadpool::spawn::{{closure}} (101 samples, 0.05%)</title><rect x="98.7713%" y="1989" width="0.0457%" height="15" fill="rgb(206,95,13)" fg:x="218245" fg:w="101"/><text x="99.0213%" y="1999.50"></text></g><g><title>sled::pagecache::iobuf::maybe_seal_and_write_iobuf::{{closure}} (101 samples, 0.05%)</title><rect x="98.7713%" y="1973" width="0.0457%" height="15" fill="rgb(253,154,18)" fg:x="218245" fg:w="101"/><text x="99.0213%" y="1983.50"></text></g><g><title>sled::pagecache::iobuf::IoBufs::write_to_log (101 samples, 0.05%)</title><rect x="98.7713%" y="1957" width="0.0457%" height="15" fill="rgb(219,32,23)" fg:x="218245" fg:w="101"/><text x="99.0213%" y="1967.50"></text></g><g><title>sync_file_range (29 samples, 0.01%)</title><rect x="98.8039%" y="1941" width="0.0131%" height="15" fill="rgb(230,191,45)" fg:x="218317" fg:w="29"/><text x="99.0539%" y="1951.50"></text></g><g><title>[unknown] (28 samples, 0.01%)</title><rect x="98.8043%" y="1925" width="0.0127%" height="15" fill="rgb(229,64,36)" fg:x="218318" fg:w="28"/><text x="99.0543%" y="1935.50"></text></g><g><title>[unknown] (27 samples, 0.01%)</title><rect x="98.8048%" y="1909" width="0.0122%" height="15" fill="rgb(205,129,25)" fg:x="218319" fg:w="27"/><text x="99.0548%" y="1919.50"></text></g><g><title>[unknown] (27 samples, 0.01%)</title><rect x="98.8048%" y="1893" width="0.0122%" height="15" fill="rgb(254,112,7)" fg:x="218319" fg:w="27"/><text x="99.0548%" y="1903.50"></text></g><g><title>[unknown] (27 samples, 0.01%)</title><rect x="98.8048%" y="1877" width="0.0122%" height="15" fill="rgb(226,53,48)" fg:x="218319" fg:w="27"/><text x="99.0548%" y="1887.50"></text></g><g><title>[unknown] (27 samples, 0.01%)</title><rect x="98.8048%" y="1861" width="0.0122%" height="15" fill="rgb(214,153,38)" fg:x="218319" fg:w="27"/><text x="99.0548%" y="1871.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="98.8052%" y="1845" width="0.0118%" height="15" fill="rgb(243,101,7)" fg:x="218320" fg:w="26"/><text x="99.0552%" y="1855.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="98.8052%" y="1829" width="0.0118%" height="15" fill="rgb(240,140,22)" fg:x="218320" fg:w="26"/><text x="99.0552%" y="1839.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="98.8057%" y="1813" width="0.0113%" height="15" fill="rgb(235,114,2)" fg:x="218321" fg:w="25"/><text x="99.0557%" y="1823.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="98.8057%" y="1797" width="0.0113%" height="15" fill="rgb(242,59,12)" fg:x="218321" fg:w="25"/><text x="99.0557%" y="1807.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="98.8057%" y="1781" width="0.0113%" height="15" fill="rgb(252,134,9)" fg:x="218321" fg:w="25"/><text x="99.0557%" y="1791.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="98.8057%" y="1765" width="0.0113%" height="15" fill="rgb(236,4,44)" fg:x="218321" fg:w="25"/><text x="99.0557%" y="1775.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="98.8057%" y="1749" width="0.0113%" height="15" fill="rgb(254,172,41)" fg:x="218321" fg:w="25"/><text x="99.0557%" y="1759.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="98.8066%" y="1733" width="0.0104%" height="15" fill="rgb(244,63,20)" fg:x="218323" fg:w="23"/><text x="99.0566%" y="1743.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park_until (36 samples, 0.02%)</title><rect x="98.8179%" y="1925" width="0.0163%" height="15" fill="rgb(250,73,31)" fg:x="218348" fg:w="36"/><text x="99.0679%" y="1935.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (36 samples, 0.02%)</title><rect x="98.8179%" y="1909" width="0.0163%" height="15" fill="rgb(241,38,36)" fg:x="218348" fg:w="36"/><text x="99.0679%" y="1919.50"></text></g><g><title>syscall (36 samples, 0.02%)</title><rect x="98.8179%" y="1893" width="0.0163%" height="15" fill="rgb(245,211,2)" fg:x="218348" fg:w="36"/><text x="99.0679%" y="1903.50"></text></g><g><title>[unknown] (36 samples, 0.02%)</title><rect x="98.8179%" y="1877" width="0.0163%" height="15" fill="rgb(206,120,28)" fg:x="218348" fg:w="36"/><text x="99.0679%" y="1887.50"></text></g><g><title>[unknown] (34 samples, 0.02%)</title><rect x="98.8188%" y="1861" width="0.0154%" height="15" fill="rgb(211,59,34)" fg:x="218350" fg:w="34"/><text x="99.0688%" y="1871.50"></text></g><g><title>[unknown] (34 samples, 0.02%)</title><rect x="98.8188%" y="1845" width="0.0154%" height="15" fill="rgb(233,168,5)" fg:x="218350" fg:w="34"/><text x="99.0688%" y="1855.50"></text></g><g><title>[unknown] (34 samples, 0.02%)</title><rect x="98.8188%" y="1829" width="0.0154%" height="15" fill="rgb(234,33,13)" fg:x="218350" fg:w="34"/><text x="99.0688%" y="1839.50"></text></g><g><title>[unknown] (33 samples, 0.01%)</title><rect x="98.8192%" y="1813" width="0.0149%" height="15" fill="rgb(231,150,26)" fg:x="218351" fg:w="33"/><text x="99.0692%" y="1823.50"></text></g><g><title>[unknown] (32 samples, 0.01%)</title><rect x="98.8197%" y="1797" width="0.0145%" height="15" fill="rgb(217,191,4)" fg:x="218352" fg:w="32"/><text x="99.0697%" y="1807.50"></text></g><g><title>[unknown] (28 samples, 0.01%)</title><rect x="98.8215%" y="1781" width="0.0127%" height="15" fill="rgb(246,198,38)" fg:x="218356" fg:w="28"/><text x="99.0715%" y="1791.50"></text></g><g><title>[unknown] (27 samples, 0.01%)</title><rect x="98.8220%" y="1765" width="0.0122%" height="15" fill="rgb(245,64,37)" fg:x="218357" fg:w="27"/><text x="99.0720%" y="1775.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="98.8224%" y="1749" width="0.0118%" height="15" fill="rgb(250,30,36)" fg:x="218358" fg:w="26"/><text x="99.0724%" y="1759.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="98.8224%" y="1733" width="0.0118%" height="15" fill="rgb(217,86,53)" fg:x="218358" fg:w="26"/><text x="99.0724%" y="1743.50"></text></g><g><title>sled-io-3 (146 samples, 0.07%)</title><rect x="98.7708%" y="2341" width="0.0661%" height="15" fill="rgb(228,157,16)" fg:x="218244" fg:w="146"/><text x="99.0208%" y="2351.50"></text></g><g><title>[libc.so.6] (146 samples, 0.07%)</title><rect x="98.7708%" y="2325" width="0.0661%" height="15" fill="rgb(217,59,31)" fg:x="218244" fg:w="146"/><text x="99.0208%" y="2335.50"></text></g><g><title>[libc.so.6] (146 samples, 0.07%)</title><rect x="98.7708%" y="2309" width="0.0661%" height="15" fill="rgb(237,138,41)" fg:x="218244" fg:w="146"/><text x="99.0208%" y="2319.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (146 samples, 0.07%)</title><rect x="98.7708%" y="2293" width="0.0661%" height="15" fill="rgb(227,91,49)" fg:x="218244" fg:w="146"/><text x="99.0208%" y="2303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (146 samples, 0.07%)</title><rect x="98.7708%" y="2277" width="0.0661%" height="15" fill="rgb(247,21,44)" fg:x="218244" fg:w="146"/><text x="99.0208%" y="2287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (146 samples, 0.07%)</title><rect x="98.7708%" y="2261" width="0.0661%" height="15" fill="rgb(219,210,51)" fg:x="218244" fg:w="146"/><text x="99.0208%" y="2271.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (146 samples, 0.07%)</title><rect x="98.7708%" y="2245" width="0.0661%" height="15" fill="rgb(209,140,6)" fg:x="218244" fg:w="146"/><text x="99.0208%" y="2255.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (146 samples, 0.07%)</title><rect x="98.7708%" y="2229" width="0.0661%" height="15" fill="rgb(221,188,24)" fg:x="218244" fg:w="146"/><text x="99.0208%" y="2239.50"></text></g><g><title>std::panic::catch_unwind (145 samples, 0.07%)</title><rect x="98.7713%" y="2213" width="0.0656%" height="15" fill="rgb(232,154,20)" fg:x="218245" fg:w="145"/><text x="99.0213%" y="2223.50"></text></g><g><title>std::panicking::try (145 samples, 0.07%)</title><rect x="98.7713%" y="2197" width="0.0656%" height="15" fill="rgb(244,137,50)" fg:x="218245" fg:w="145"/><text x="99.0213%" y="2207.50"></text></g><g><title>std::panicking::try::do_call (145 samples, 0.07%)</title><rect x="98.7713%" y="2181" width="0.0656%" height="15" fill="rgb(225,185,43)" fg:x="218245" fg:w="145"/><text x="99.0213%" y="2191.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (145 samples, 0.07%)</title><rect x="98.7713%" y="2165" width="0.0656%" height="15" fill="rgb(213,205,38)" fg:x="218245" fg:w="145"/><text x="99.0213%" y="2175.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (145 samples, 0.07%)</title><rect x="98.7713%" y="2149" width="0.0656%" height="15" fill="rgb(236,73,12)" fg:x="218245" fg:w="145"/><text x="99.0213%" y="2159.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (145 samples, 0.07%)</title><rect x="98.7713%" y="2133" width="0.0656%" height="15" fill="rgb(235,219,13)" fg:x="218245" fg:w="145"/><text x="99.0213%" y="2143.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}} (145 samples, 0.07%)</title><rect x="98.7713%" y="2117" width="0.0656%" height="15" fill="rgb(218,59,36)" fg:x="218245" fg:w="145"/><text x="99.0213%" y="2127.50"></text></g><g><title>std::panic::catch_unwind (145 samples, 0.07%)</title><rect x="98.7713%" y="2101" width="0.0656%" height="15" fill="rgb(205,110,39)" fg:x="218245" fg:w="145"/><text x="99.0213%" y="2111.50"></text></g><g><title>std::panicking::try (145 samples, 0.07%)</title><rect x="98.7713%" y="2085" width="0.0656%" height="15" fill="rgb(218,206,42)" fg:x="218245" fg:w="145"/><text x="99.0213%" y="2095.50"></text></g><g><title>std::panicking::try::do_call (145 samples, 0.07%)</title><rect x="98.7713%" y="2069" width="0.0656%" height="15" fill="rgb(248,125,24)" fg:x="218245" fg:w="145"/><text x="99.0213%" y="2079.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}}::{{closure}} (145 samples, 0.07%)</title><rect x="98.7713%" y="2053" width="0.0656%" height="15" fill="rgb(242,28,27)" fg:x="218245" fg:w="145"/><text x="99.0213%" y="2063.50"></text></g><g><title>sled::threadpool::perform_work (145 samples, 0.07%)</title><rect x="98.7713%" y="2037" width="0.0656%" height="15" fill="rgb(216,228,15)" fg:x="218245" fg:w="145"/><text x="99.0213%" y="2047.50"></text></g><g><title>sled::threadpool::Queue::recv_timeout (44 samples, 0.02%)</title><rect x="98.8170%" y="2021" width="0.0199%" height="15" fill="rgb(235,116,46)" fg:x="218346" fg:w="44"/><text x="99.0670%" y="2031.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until (43 samples, 0.02%)</title><rect x="98.8174%" y="2005" width="0.0195%" height="15" fill="rgb(224,18,32)" fg:x="218347" fg:w="43"/><text x="99.0674%" y="2015.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (43 samples, 0.02%)</title><rect x="98.8174%" y="1989" width="0.0195%" height="15" fill="rgb(252,5,12)" fg:x="218347" fg:w="43"/><text x="99.0674%" y="1999.50"></text></g><g><title>parking_lot_core::parking_lot::park (43 samples, 0.02%)</title><rect x="98.8174%" y="1973" width="0.0195%" height="15" fill="rgb(251,36,5)" fg:x="218347" fg:w="43"/><text x="99.0674%" y="1983.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (43 samples, 0.02%)</title><rect x="98.8174%" y="1957" width="0.0195%" height="15" fill="rgb(217,53,14)" fg:x="218347" fg:w="43"/><text x="99.0674%" y="1967.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (42 samples, 0.02%)</title><rect x="98.8179%" y="1941" width="0.0190%" height="15" fill="rgb(215,86,45)" fg:x="218348" fg:w="42"/><text x="99.0679%" y="1951.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.01%)</title><rect x="98.8446%" y="1621" width="0.0113%" height="15" fill="rgb(242,169,11)" fg:x="218407" fg:w="25"/><text x="99.0946%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;[sled::ivec::IVec]&gt; (25 samples, 0.01%)</title><rect x="98.8446%" y="1605" width="0.0113%" height="15" fill="rgb(211,213,45)" fg:x="218407" fg:w="25"/><text x="99.0946%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::ivec::IVec&gt; (25 samples, 0.01%)</title><rect x="98.8446%" y="1589" width="0.0113%" height="15" fill="rgb(205,88,11)" fg:x="218407" fg:w="25"/><text x="99.0946%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::ivec::IVecInner&gt; (25 samples, 0.01%)</title><rect x="98.8446%" y="1573" width="0.0113%" height="15" fill="rgb(252,69,26)" fg:x="218407" fg:w="25"/><text x="99.0946%" y="1583.50"></text></g><g><title>&lt;sled::arc::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.01%)</title><rect x="98.8450%" y="1557" width="0.0109%" height="15" fill="rgb(246,123,37)" fg:x="218408" fg:w="24"/><text x="99.0950%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::node::Data&gt; (34 samples, 0.02%)</title><rect x="98.8446%" y="1669" width="0.0154%" height="15" fill="rgb(212,205,5)" fg:x="218407" fg:w="34"/><text x="99.0946%" y="1679.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::node::Leaf&gt; (34 samples, 0.02%)</title><rect x="98.8446%" y="1653" width="0.0154%" height="15" fill="rgb(253,148,0)" fg:x="218407" fg:w="34"/><text x="99.0946%" y="1663.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;sled::ivec::IVec&gt;&gt; (34 samples, 0.02%)</title><rect x="98.8446%" y="1637" width="0.0154%" height="15" fill="rgb(239,22,4)" fg:x="218407" fg:w="34"/><text x="99.0946%" y="1647.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (50 samples, 0.02%)</title><rect x="98.8378%" y="1941" width="0.0226%" height="15" fill="rgb(226,26,53)" fg:x="218392" fg:w="50"/><text x="99.0878%" y="1951.50"></text></g><g><title>core::mem::drop (50 samples, 0.02%)</title><rect x="98.8378%" y="1925" width="0.0226%" height="15" fill="rgb(225,229,45)" fg:x="218392" fg:w="50"/><text x="99.0878%" y="1935.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::SealedBag&gt; (50 samples, 0.02%)</title><rect x="98.8378%" y="1909" width="0.0226%" height="15" fill="rgb(220,60,37)" fg:x="218392" fg:w="50"/><text x="99.0878%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::Bag&gt; (50 samples, 0.02%)</title><rect x="98.8378%" y="1893" width="0.0226%" height="15" fill="rgb(217,180,35)" fg:x="218392" fg:w="50"/><text x="99.0878%" y="1903.50"></text></g><g><title>&lt;crossbeam_epoch::internal::Bag as core::ops::drop::Drop&gt;::drop (50 samples, 0.02%)</title><rect x="98.8378%" y="1877" width="0.0226%" height="15" fill="rgb(229,7,53)" fg:x="218392" fg:w="50"/><text x="99.0878%" y="1887.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::call (50 samples, 0.02%)</title><rect x="98.8378%" y="1861" width="0.0226%" height="15" fill="rgb(254,137,3)" fg:x="218392" fg:w="50"/><text x="99.0878%" y="1871.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::new::call (48 samples, 0.02%)</title><rect x="98.8387%" y="1845" width="0.0217%" height="15" fill="rgb(215,140,41)" fg:x="218394" fg:w="48"/><text x="99.0887%" y="1855.50"></text></g><g><title>crossbeam_epoch::guard::Guard::defer_unchecked::{{closure}} (48 samples, 0.02%)</title><rect x="98.8387%" y="1829" width="0.0217%" height="15" fill="rgb(250,80,15)" fg:x="218394" fg:w="48"/><text x="99.0887%" y="1839.50"></text></g><g><title>core::mem::drop (48 samples, 0.02%)</title><rect x="98.8387%" y="1813" width="0.0217%" height="15" fill="rgb(252,191,6)" fg:x="218394" fg:w="48"/><text x="99.0887%" y="1823.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::atomic::Owned&lt;sled::pagecache::Page&gt;&gt; (48 samples, 0.02%)</title><rect x="98.8387%" y="1797" width="0.0217%" height="15" fill="rgb(246,217,18)" fg:x="218394" fg:w="48"/><text x="99.0887%" y="1807.50"></text></g><g><title>&lt;crossbeam_epoch::atomic::Owned&lt;T&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.02%)</title><rect x="98.8387%" y="1781" width="0.0217%" height="15" fill="rgb(223,93,7)" fg:x="218394" fg:w="48"/><text x="99.0887%" y="1791.50"></text></g><g><title>&lt;T as crossbeam_epoch::atomic::Pointable&gt;::drop (48 samples, 0.02%)</title><rect x="98.8387%" y="1765" width="0.0217%" height="15" fill="rgb(225,55,52)" fg:x="218394" fg:w="48"/><text x="99.0887%" y="1775.50"></text></g><g><title>core::mem::drop (48 samples, 0.02%)</title><rect x="98.8387%" y="1749" width="0.0217%" height="15" fill="rgb(240,31,24)" fg:x="218394" fg:w="48"/><text x="99.0887%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Page&gt;&gt; (48 samples, 0.02%)</title><rect x="98.8387%" y="1733" width="0.0217%" height="15" fill="rgb(205,56,52)" fg:x="218394" fg:w="48"/><text x="99.0887%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::pagecache::Page&gt; (41 samples, 0.02%)</title><rect x="98.8419%" y="1717" width="0.0186%" height="15" fill="rgb(246,146,12)" fg:x="218401" fg:w="41"/><text x="99.0919%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt;&gt; (41 samples, 0.02%)</title><rect x="98.8419%" y="1701" width="0.0186%" height="15" fill="rgb(239,84,36)" fg:x="218401" fg:w="41"/><text x="99.0919%" y="1711.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt; (41 samples, 0.02%)</title><rect x="98.8419%" y="1685" width="0.0186%" height="15" fill="rgb(207,41,40)" fg:x="218401" fg:w="41"/><text x="99.0919%" y="1695.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (69 samples, 0.03%)</title><rect x="98.8369%" y="2021" width="0.0312%" height="15" fill="rgb(241,179,25)" fg:x="218390" fg:w="69"/><text x="99.0869%" y="2031.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (69 samples, 0.03%)</title><rect x="98.8369%" y="2005" width="0.0312%" height="15" fill="rgb(210,0,34)" fg:x="218390" fg:w="69"/><text x="99.0869%" y="2015.50"></text></g><g><title>sled::threadpool::spawn::{{closure}} (69 samples, 0.03%)</title><rect x="98.8369%" y="1989" width="0.0312%" height="15" fill="rgb(225,217,29)" fg:x="218390" fg:w="69"/><text x="99.0869%" y="1999.50"></text></g><g><title>sled::pagecache::iobuf::maybe_seal_and_write_iobuf::{{closure}} (69 samples, 0.03%)</title><rect x="98.8369%" y="1973" width="0.0312%" height="15" fill="rgb(216,191,38)" fg:x="218390" fg:w="69"/><text x="99.0869%" y="1983.50"></text></g><g><title>sled::pagecache::iobuf::IoBufs::write_to_log (69 samples, 0.03%)</title><rect x="98.8369%" y="1957" width="0.0312%" height="15" fill="rgb(232,140,52)" fg:x="218390" fg:w="69"/><text x="99.0869%" y="1967.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (42 samples, 0.02%)</title><rect x="98.8699%" y="1909" width="0.0190%" height="15" fill="rgb(223,158,51)" fg:x="218463" fg:w="42"/><text x="99.1199%" y="1919.50"></text></g><g><title>syscall (42 samples, 0.02%)</title><rect x="98.8699%" y="1893" width="0.0190%" height="15" fill="rgb(235,29,51)" fg:x="218463" fg:w="42"/><text x="99.1199%" y="1903.50"></text></g><g><title>[unknown] (41 samples, 0.02%)</title><rect x="98.8704%" y="1877" width="0.0186%" height="15" fill="rgb(215,181,18)" fg:x="218464" fg:w="41"/><text x="99.1204%" y="1887.50"></text></g><g><title>[unknown] (40 samples, 0.02%)</title><rect x="98.8708%" y="1861" width="0.0181%" height="15" fill="rgb(227,125,34)" fg:x="218465" fg:w="40"/><text x="99.1208%" y="1871.50"></text></g><g><title>[unknown] (38 samples, 0.02%)</title><rect x="98.8717%" y="1845" width="0.0172%" height="15" fill="rgb(230,197,49)" fg:x="218467" fg:w="38"/><text x="99.1217%" y="1855.50"></text></g><g><title>[unknown] (38 samples, 0.02%)</title><rect x="98.8717%" y="1829" width="0.0172%" height="15" fill="rgb(239,141,16)" fg:x="218467" fg:w="38"/><text x="99.1217%" y="1839.50"></text></g><g><title>[unknown] (38 samples, 0.02%)</title><rect x="98.8717%" y="1813" width="0.0172%" height="15" fill="rgb(225,105,43)" fg:x="218467" fg:w="38"/><text x="99.1217%" y="1823.50"></text></g><g><title>[unknown] (37 samples, 0.02%)</title><rect x="98.8722%" y="1797" width="0.0167%" height="15" fill="rgb(214,131,14)" fg:x="218468" fg:w="37"/><text x="99.1222%" y="1807.50"></text></g><g><title>[unknown] (34 samples, 0.02%)</title><rect x="98.8736%" y="1781" width="0.0154%" height="15" fill="rgb(229,177,11)" fg:x="218471" fg:w="34"/><text x="99.1236%" y="1791.50"></text></g><g><title>[unknown] (33 samples, 0.01%)</title><rect x="98.8740%" y="1765" width="0.0149%" height="15" fill="rgb(231,180,14)" fg:x="218472" fg:w="33"/><text x="99.1240%" y="1775.50"></text></g><g><title>[unknown] (32 samples, 0.01%)</title><rect x="98.8745%" y="1749" width="0.0145%" height="15" fill="rgb(232,88,2)" fg:x="218473" fg:w="32"/><text x="99.1245%" y="1759.50"></text></g><g><title>[unknown] (31 samples, 0.01%)</title><rect x="98.8749%" y="1733" width="0.0140%" height="15" fill="rgb(205,220,8)" fg:x="218474" fg:w="31"/><text x="99.1249%" y="1743.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park_until (43 samples, 0.02%)</title><rect x="98.8699%" y="1925" width="0.0195%" height="15" fill="rgb(225,23,53)" fg:x="218463" fg:w="43"/><text x="99.1199%" y="1935.50"></text></g><g><title>sled-io-4 (118 samples, 0.05%)</title><rect x="98.8369%" y="2341" width="0.0534%" height="15" fill="rgb(213,62,29)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2351.50"></text></g><g><title>[libc.so.6] (118 samples, 0.05%)</title><rect x="98.8369%" y="2325" width="0.0534%" height="15" fill="rgb(227,75,7)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2335.50"></text></g><g><title>[libc.so.6] (118 samples, 0.05%)</title><rect x="98.8369%" y="2309" width="0.0534%" height="15" fill="rgb(207,105,14)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2319.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (118 samples, 0.05%)</title><rect x="98.8369%" y="2293" width="0.0534%" height="15" fill="rgb(245,62,29)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (118 samples, 0.05%)</title><rect x="98.8369%" y="2277" width="0.0534%" height="15" fill="rgb(236,202,4)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (118 samples, 0.05%)</title><rect x="98.8369%" y="2261" width="0.0534%" height="15" fill="rgb(250,67,1)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2271.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (118 samples, 0.05%)</title><rect x="98.8369%" y="2245" width="0.0534%" height="15" fill="rgb(253,115,44)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2255.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (118 samples, 0.05%)</title><rect x="98.8369%" y="2229" width="0.0534%" height="15" fill="rgb(251,139,18)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2239.50"></text></g><g><title>std::panic::catch_unwind (118 samples, 0.05%)</title><rect x="98.8369%" y="2213" width="0.0534%" height="15" fill="rgb(218,22,32)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2223.50"></text></g><g><title>std::panicking::try (118 samples, 0.05%)</title><rect x="98.8369%" y="2197" width="0.0534%" height="15" fill="rgb(243,53,5)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2207.50"></text></g><g><title>std::panicking::try::do_call (118 samples, 0.05%)</title><rect x="98.8369%" y="2181" width="0.0534%" height="15" fill="rgb(227,56,16)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2191.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (118 samples, 0.05%)</title><rect x="98.8369%" y="2165" width="0.0534%" height="15" fill="rgb(245,53,0)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2175.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (118 samples, 0.05%)</title><rect x="98.8369%" y="2149" width="0.0534%" height="15" fill="rgb(216,170,35)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2159.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (118 samples, 0.05%)</title><rect x="98.8369%" y="2133" width="0.0534%" height="15" fill="rgb(211,200,8)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2143.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}} (118 samples, 0.05%)</title><rect x="98.8369%" y="2117" width="0.0534%" height="15" fill="rgb(228,204,44)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2127.50"></text></g><g><title>std::panic::catch_unwind (118 samples, 0.05%)</title><rect x="98.8369%" y="2101" width="0.0534%" height="15" fill="rgb(214,121,17)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2111.50"></text></g><g><title>std::panicking::try (118 samples, 0.05%)</title><rect x="98.8369%" y="2085" width="0.0534%" height="15" fill="rgb(233,64,38)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2095.50"></text></g><g><title>std::panicking::try::do_call (118 samples, 0.05%)</title><rect x="98.8369%" y="2069" width="0.0534%" height="15" fill="rgb(253,54,19)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2079.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}}::{{closure}} (118 samples, 0.05%)</title><rect x="98.8369%" y="2053" width="0.0534%" height="15" fill="rgb(253,94,18)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2063.50"></text></g><g><title>sled::threadpool::perform_work (118 samples, 0.05%)</title><rect x="98.8369%" y="2037" width="0.0534%" height="15" fill="rgb(227,57,52)" fg:x="218390" fg:w="118"/><text x="99.0869%" y="2047.50"></text></g><g><title>sled::threadpool::Queue::recv_timeout (48 samples, 0.02%)</title><rect x="98.8686%" y="2021" width="0.0217%" height="15" fill="rgb(230,228,50)" fg:x="218460" fg:w="48"/><text x="99.1186%" y="2031.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until (47 samples, 0.02%)</title><rect x="98.8690%" y="2005" width="0.0213%" height="15" fill="rgb(217,205,27)" fg:x="218461" fg:w="47"/><text x="99.1190%" y="2015.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (47 samples, 0.02%)</title><rect x="98.8690%" y="1989" width="0.0213%" height="15" fill="rgb(252,71,50)" fg:x="218461" fg:w="47"/><text x="99.1190%" y="1999.50"></text></g><g><title>parking_lot_core::parking_lot::park (46 samples, 0.02%)</title><rect x="98.8695%" y="1973" width="0.0208%" height="15" fill="rgb(209,86,4)" fg:x="218462" fg:w="46"/><text x="99.1195%" y="1983.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (46 samples, 0.02%)</title><rect x="98.8695%" y="1957" width="0.0208%" height="15" fill="rgb(229,94,0)" fg:x="218462" fg:w="46"/><text x="99.1195%" y="1967.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (46 samples, 0.02%)</title><rect x="98.8695%" y="1941" width="0.0208%" height="15" fill="rgb(252,223,21)" fg:x="218462" fg:w="46"/><text x="99.1195%" y="1951.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::atomic::Owned&lt;sled::pagecache::Page&gt;&gt; (32 samples, 0.01%)</title><rect x="98.8912%" y="1797" width="0.0145%" height="15" fill="rgb(230,210,4)" fg:x="218510" fg:w="32"/><text x="99.1412%" y="1807.50"></text></g><g><title>&lt;crossbeam_epoch::atomic::Owned&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.01%)</title><rect x="98.8912%" y="1781" width="0.0145%" height="15" fill="rgb(240,149,38)" fg:x="218510" fg:w="32"/><text x="99.1412%" y="1791.50"></text></g><g><title>&lt;T as crossbeam_epoch::atomic::Pointable&gt;::drop (32 samples, 0.01%)</title><rect x="98.8912%" y="1765" width="0.0145%" height="15" fill="rgb(254,105,20)" fg:x="218510" fg:w="32"/><text x="99.1412%" y="1775.50"></text></g><g><title>core::mem::drop (32 samples, 0.01%)</title><rect x="98.8912%" y="1749" width="0.0145%" height="15" fill="rgb(253,87,46)" fg:x="218510" fg:w="32"/><text x="99.1412%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Page&gt;&gt; (32 samples, 0.01%)</title><rect x="98.8912%" y="1733" width="0.0145%" height="15" fill="rgb(253,116,33)" fg:x="218510" fg:w="32"/><text x="99.1412%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::pagecache::Page&gt; (25 samples, 0.01%)</title><rect x="98.8944%" y="1717" width="0.0113%" height="15" fill="rgb(229,198,5)" fg:x="218517" fg:w="25"/><text x="99.1444%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt;&gt; (25 samples, 0.01%)</title><rect x="98.8944%" y="1701" width="0.0113%" height="15" fill="rgb(242,38,37)" fg:x="218517" fg:w="25"/><text x="99.1444%" y="1711.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt; (25 samples, 0.01%)</title><rect x="98.8944%" y="1685" width="0.0113%" height="15" fill="rgb(242,69,53)" fg:x="218517" fg:w="25"/><text x="99.1444%" y="1695.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::node::Data&gt; (23 samples, 0.01%)</title><rect x="98.8953%" y="1669" width="0.0104%" height="15" fill="rgb(249,80,16)" fg:x="218519" fg:w="23"/><text x="99.1453%" y="1679.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (35 samples, 0.02%)</title><rect x="98.8907%" y="1941" width="0.0158%" height="15" fill="rgb(206,128,11)" fg:x="218509" fg:w="35"/><text x="99.1407%" y="1951.50"></text></g><g><title>core::mem::drop (35 samples, 0.02%)</title><rect x="98.8907%" y="1925" width="0.0158%" height="15" fill="rgb(212,35,20)" fg:x="218509" fg:w="35"/><text x="99.1407%" y="1935.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::SealedBag&gt; (35 samples, 0.02%)</title><rect x="98.8907%" y="1909" width="0.0158%" height="15" fill="rgb(236,79,13)" fg:x="218509" fg:w="35"/><text x="99.1407%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::Bag&gt; (35 samples, 0.02%)</title><rect x="98.8907%" y="1893" width="0.0158%" height="15" fill="rgb(233,123,3)" fg:x="218509" fg:w="35"/><text x="99.1407%" y="1903.50"></text></g><g><title>&lt;crossbeam_epoch::internal::Bag as core::ops::drop::Drop&gt;::drop (35 samples, 0.02%)</title><rect x="98.8907%" y="1877" width="0.0158%" height="15" fill="rgb(214,93,52)" fg:x="218509" fg:w="35"/><text x="99.1407%" y="1887.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::call (35 samples, 0.02%)</title><rect x="98.8907%" y="1861" width="0.0158%" height="15" fill="rgb(251,37,40)" fg:x="218509" fg:w="35"/><text x="99.1407%" y="1871.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::new::call (34 samples, 0.02%)</title><rect x="98.8912%" y="1845" width="0.0154%" height="15" fill="rgb(227,80,54)" fg:x="218510" fg:w="34"/><text x="99.1412%" y="1855.50"></text></g><g><title>crossbeam_epoch::guard::Guard::defer_unchecked::{{closure}} (34 samples, 0.02%)</title><rect x="98.8912%" y="1829" width="0.0154%" height="15" fill="rgb(254,48,11)" fg:x="218510" fg:w="34"/><text x="99.1412%" y="1839.50"></text></g><g><title>core::mem::drop (34 samples, 0.02%)</title><rect x="98.8912%" y="1813" width="0.0154%" height="15" fill="rgb(235,193,26)" fg:x="218510" fg:w="34"/><text x="99.1412%" y="1823.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (57 samples, 0.03%)</title><rect x="98.8903%" y="2021" width="0.0258%" height="15" fill="rgb(229,99,21)" fg:x="218508" fg:w="57"/><text x="99.1403%" y="2031.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (57 samples, 0.03%)</title><rect x="98.8903%" y="2005" width="0.0258%" height="15" fill="rgb(211,140,41)" fg:x="218508" fg:w="57"/><text x="99.1403%" y="2015.50"></text></g><g><title>sled::threadpool::spawn::{{closure}} (57 samples, 0.03%)</title><rect x="98.8903%" y="1989" width="0.0258%" height="15" fill="rgb(240,227,30)" fg:x="218508" fg:w="57"/><text x="99.1403%" y="1999.50"></text></g><g><title>sled::pagecache::iobuf::maybe_seal_and_write_iobuf::{{closure}} (57 samples, 0.03%)</title><rect x="98.8903%" y="1973" width="0.0258%" height="15" fill="rgb(215,224,45)" fg:x="218508" fg:w="57"/><text x="99.1403%" y="1983.50"></text></g><g><title>sled::pagecache::iobuf::IoBufs::write_to_log (57 samples, 0.03%)</title><rect x="98.8903%" y="1957" width="0.0258%" height="15" fill="rgb(206,123,31)" fg:x="218508" fg:w="57"/><text x="99.1403%" y="1967.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (32 samples, 0.01%)</title><rect x="98.9170%" y="1909" width="0.0145%" height="15" fill="rgb(210,138,16)" fg:x="218567" fg:w="32"/><text x="99.1670%" y="1919.50"></text></g><g><title>syscall (32 samples, 0.01%)</title><rect x="98.9170%" y="1893" width="0.0145%" height="15" fill="rgb(228,57,28)" fg:x="218567" fg:w="32"/><text x="99.1670%" y="1903.50"></text></g><g><title>[unknown] (32 samples, 0.01%)</title><rect x="98.9170%" y="1877" width="0.0145%" height="15" fill="rgb(242,170,10)" fg:x="218567" fg:w="32"/><text x="99.1670%" y="1887.50"></text></g><g><title>[unknown] (31 samples, 0.01%)</title><rect x="98.9175%" y="1861" width="0.0140%" height="15" fill="rgb(228,214,39)" fg:x="218568" fg:w="31"/><text x="99.1675%" y="1871.50"></text></g><g><title>[unknown] (31 samples, 0.01%)</title><rect x="98.9175%" y="1845" width="0.0140%" height="15" fill="rgb(218,179,33)" fg:x="218568" fg:w="31"/><text x="99.1675%" y="1855.50"></text></g><g><title>[unknown] (31 samples, 0.01%)</title><rect x="98.9175%" y="1829" width="0.0140%" height="15" fill="rgb(235,193,39)" fg:x="218568" fg:w="31"/><text x="99.1675%" y="1839.50"></text></g><g><title>[unknown] (31 samples, 0.01%)</title><rect x="98.9175%" y="1813" width="0.0140%" height="15" fill="rgb(219,221,36)" fg:x="218568" fg:w="31"/><text x="99.1675%" y="1823.50"></text></g><g><title>[unknown] (30 samples, 0.01%)</title><rect x="98.9179%" y="1797" width="0.0136%" height="15" fill="rgb(248,218,19)" fg:x="218569" fg:w="30"/><text x="99.1679%" y="1807.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="98.9211%" y="1781" width="0.0104%" height="15" fill="rgb(205,50,9)" fg:x="218576" fg:w="23"/><text x="99.1711%" y="1791.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park_until (34 samples, 0.02%)</title><rect x="98.9170%" y="1925" width="0.0154%" height="15" fill="rgb(238,81,28)" fg:x="218567" fg:w="34"/><text x="99.1670%" y="1935.50"></text></g><g><title>[libc.so.6] (96 samples, 0.04%)</title><rect x="98.8903%" y="2325" width="0.0434%" height="15" fill="rgb(235,110,19)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2335.50"></text></g><g><title>[libc.so.6] (96 samples, 0.04%)</title><rect x="98.8903%" y="2309" width="0.0434%" height="15" fill="rgb(214,7,14)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2319.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (96 samples, 0.04%)</title><rect x="98.8903%" y="2293" width="0.0434%" height="15" fill="rgb(211,77,3)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (96 samples, 0.04%)</title><rect x="98.8903%" y="2277" width="0.0434%" height="15" fill="rgb(229,5,9)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (96 samples, 0.04%)</title><rect x="98.8903%" y="2261" width="0.0434%" height="15" fill="rgb(225,90,11)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2271.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (96 samples, 0.04%)</title><rect x="98.8903%" y="2245" width="0.0434%" height="15" fill="rgb(242,56,8)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2255.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (96 samples, 0.04%)</title><rect x="98.8903%" y="2229" width="0.0434%" height="15" fill="rgb(249,212,39)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2239.50"></text></g><g><title>std::panic::catch_unwind (96 samples, 0.04%)</title><rect x="98.8903%" y="2213" width="0.0434%" height="15" fill="rgb(236,90,9)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2223.50"></text></g><g><title>std::panicking::try (96 samples, 0.04%)</title><rect x="98.8903%" y="2197" width="0.0434%" height="15" fill="rgb(206,88,35)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2207.50"></text></g><g><title>std::panicking::try::do_call (96 samples, 0.04%)</title><rect x="98.8903%" y="2181" width="0.0434%" height="15" fill="rgb(205,126,30)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2191.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (96 samples, 0.04%)</title><rect x="98.8903%" y="2165" width="0.0434%" height="15" fill="rgb(230,176,12)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2175.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (96 samples, 0.04%)</title><rect x="98.8903%" y="2149" width="0.0434%" height="15" fill="rgb(243,19,9)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2159.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (96 samples, 0.04%)</title><rect x="98.8903%" y="2133" width="0.0434%" height="15" fill="rgb(245,171,17)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2143.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}} (96 samples, 0.04%)</title><rect x="98.8903%" y="2117" width="0.0434%" height="15" fill="rgb(227,52,21)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2127.50"></text></g><g><title>std::panic::catch_unwind (96 samples, 0.04%)</title><rect x="98.8903%" y="2101" width="0.0434%" height="15" fill="rgb(238,69,14)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2111.50"></text></g><g><title>std::panicking::try (96 samples, 0.04%)</title><rect x="98.8903%" y="2085" width="0.0434%" height="15" fill="rgb(241,156,39)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2095.50"></text></g><g><title>std::panicking::try::do_call (96 samples, 0.04%)</title><rect x="98.8903%" y="2069" width="0.0434%" height="15" fill="rgb(212,227,28)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2079.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}}::{{closure}} (96 samples, 0.04%)</title><rect x="98.8903%" y="2053" width="0.0434%" height="15" fill="rgb(209,118,27)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2063.50"></text></g><g><title>sled::threadpool::perform_work (96 samples, 0.04%)</title><rect x="98.8903%" y="2037" width="0.0434%" height="15" fill="rgb(226,102,5)" fg:x="218508" fg:w="96"/><text x="99.1403%" y="2047.50"></text></g><g><title>sled::threadpool::Queue::recv_timeout (38 samples, 0.02%)</title><rect x="98.9165%" y="2021" width="0.0172%" height="15" fill="rgb(223,34,3)" fg:x="218566" fg:w="38"/><text x="99.1665%" y="2031.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until (38 samples, 0.02%)</title><rect x="98.9165%" y="2005" width="0.0172%" height="15" fill="rgb(221,81,38)" fg:x="218566" fg:w="38"/><text x="99.1665%" y="2015.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (38 samples, 0.02%)</title><rect x="98.9165%" y="1989" width="0.0172%" height="15" fill="rgb(236,219,28)" fg:x="218566" fg:w="38"/><text x="99.1665%" y="1999.50"></text></g><g><title>parking_lot_core::parking_lot::park (37 samples, 0.02%)</title><rect x="98.9170%" y="1973" width="0.0167%" height="15" fill="rgb(213,200,14)" fg:x="218567" fg:w="37"/><text x="99.1670%" y="1983.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (37 samples, 0.02%)</title><rect x="98.9170%" y="1957" width="0.0167%" height="15" fill="rgb(240,33,19)" fg:x="218567" fg:w="37"/><text x="99.1670%" y="1967.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (37 samples, 0.02%)</title><rect x="98.9170%" y="1941" width="0.0167%" height="15" fill="rgb(233,113,27)" fg:x="218567" fg:w="37"/><text x="99.1670%" y="1951.50"></text></g><g><title>sled-io-5 (98 samples, 0.04%)</title><rect x="98.8903%" y="2341" width="0.0444%" height="15" fill="rgb(220,221,18)" fg:x="218508" fg:w="98"/><text x="99.1403%" y="2351.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::atomic::Owned&lt;sled::pagecache::Page&gt;&gt; (32 samples, 0.01%)</title><rect x="98.9356%" y="1797" width="0.0145%" height="15" fill="rgb(238,92,8)" fg:x="218608" fg:w="32"/><text x="99.1856%" y="1807.50"></text></g><g><title>&lt;crossbeam_epoch::atomic::Owned&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.01%)</title><rect x="98.9356%" y="1781" width="0.0145%" height="15" fill="rgb(222,164,16)" fg:x="218608" fg:w="32"/><text x="99.1856%" y="1791.50"></text></g><g><title>&lt;T as crossbeam_epoch::atomic::Pointable&gt;::drop (32 samples, 0.01%)</title><rect x="98.9356%" y="1765" width="0.0145%" height="15" fill="rgb(241,119,3)" fg:x="218608" fg:w="32"/><text x="99.1856%" y="1775.50"></text></g><g><title>core::mem::drop (32 samples, 0.01%)</title><rect x="98.9356%" y="1749" width="0.0145%" height="15" fill="rgb(241,44,8)" fg:x="218608" fg:w="32"/><text x="99.1856%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Page&gt;&gt; (32 samples, 0.01%)</title><rect x="98.9356%" y="1733" width="0.0145%" height="15" fill="rgb(230,36,40)" fg:x="218608" fg:w="32"/><text x="99.1856%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;sled::pagecache::Page&gt; (26 samples, 0.01%)</title><rect x="98.9383%" y="1717" width="0.0118%" height="15" fill="rgb(243,16,36)" fg:x="218614" fg:w="26"/><text x="99.1883%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt;&gt; (26 samples, 0.01%)</title><rect x="98.9383%" y="1701" width="0.0118%" height="15" fill="rgb(231,4,26)" fg:x="218614" fg:w="26"/><text x="99.1883%" y="1711.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;sled::pagecache::Update&gt;&gt; (25 samples, 0.01%)</title><rect x="98.9387%" y="1685" width="0.0113%" height="15" fill="rgb(240,9,31)" fg:x="218615" fg:w="25"/><text x="99.1887%" y="1695.50"></text></g><g><title>core::mem::drop (36 samples, 0.02%)</title><rect x="98.9346%" y="1925" width="0.0163%" height="15" fill="rgb(207,173,15)" fg:x="218606" fg:w="36"/><text x="99.1846%" y="1935.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::SealedBag&gt; (36 samples, 0.02%)</title><rect x="98.9346%" y="1909" width="0.0163%" height="15" fill="rgb(224,192,53)" fg:x="218606" fg:w="36"/><text x="99.1846%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::Bag&gt; (36 samples, 0.02%)</title><rect x="98.9346%" y="1893" width="0.0163%" height="15" fill="rgb(223,67,28)" fg:x="218606" fg:w="36"/><text x="99.1846%" y="1903.50"></text></g><g><title>&lt;crossbeam_epoch::internal::Bag as core::ops::drop::Drop&gt;::drop (36 samples, 0.02%)</title><rect x="98.9346%" y="1877" width="0.0163%" height="15" fill="rgb(211,20,47)" fg:x="218606" fg:w="36"/><text x="99.1846%" y="1887.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::call (35 samples, 0.02%)</title><rect x="98.9351%" y="1861" width="0.0158%" height="15" fill="rgb(240,228,2)" fg:x="218607" fg:w="35"/><text x="99.1851%" y="1871.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::new::call (34 samples, 0.02%)</title><rect x="98.9356%" y="1845" width="0.0154%" height="15" fill="rgb(248,151,12)" fg:x="218608" fg:w="34"/><text x="99.1856%" y="1855.50"></text></g><g><title>crossbeam_epoch::guard::Guard::defer_unchecked::{{closure}} (34 samples, 0.02%)</title><rect x="98.9356%" y="1829" width="0.0154%" height="15" fill="rgb(244,8,39)" fg:x="218608" fg:w="34"/><text x="99.1856%" y="1839.50"></text></g><g><title>core::mem::drop (34 samples, 0.02%)</title><rect x="98.9356%" y="1813" width="0.0154%" height="15" fill="rgb(222,26,8)" fg:x="218608" fg:w="34"/><text x="99.1856%" y="1823.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (37 samples, 0.02%)</title><rect x="98.9346%" y="1941" width="0.0167%" height="15" fill="rgb(213,106,44)" fg:x="218606" fg:w="37"/><text x="99.1846%" y="1951.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (64 samples, 0.03%)</title><rect x="98.9346%" y="2021" width="0.0290%" height="15" fill="rgb(214,129,20)" fg:x="218606" fg:w="64"/><text x="99.1846%" y="2031.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (64 samples, 0.03%)</title><rect x="98.9346%" y="2005" width="0.0290%" height="15" fill="rgb(212,32,13)" fg:x="218606" fg:w="64"/><text x="99.1846%" y="2015.50"></text></g><g><title>sled::threadpool::spawn::{{closure}} (64 samples, 0.03%)</title><rect x="98.9346%" y="1989" width="0.0290%" height="15" fill="rgb(208,168,33)" fg:x="218606" fg:w="64"/><text x="99.1846%" y="1999.50"></text></g><g><title>sled::pagecache::iobuf::maybe_seal_and_write_iobuf::{{closure}} (64 samples, 0.03%)</title><rect x="98.9346%" y="1973" width="0.0290%" height="15" fill="rgb(231,207,8)" fg:x="218606" fg:w="64"/><text x="99.1846%" y="1983.50"></text></g><g><title>sled::pagecache::iobuf::IoBufs::write_to_log (64 samples, 0.03%)</title><rect x="98.9346%" y="1957" width="0.0290%" height="15" fill="rgb(235,219,23)" fg:x="218606" fg:w="64"/><text x="99.1846%" y="1967.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park_until (28 samples, 0.01%)</title><rect x="98.9645%" y="1925" width="0.0127%" height="15" fill="rgb(226,216,26)" fg:x="218672" fg:w="28"/><text x="99.2145%" y="1935.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (26 samples, 0.01%)</title><rect x="98.9654%" y="1909" width="0.0118%" height="15" fill="rgb(239,137,16)" fg:x="218674" fg:w="26"/><text x="99.2154%" y="1919.50"></text></g><g><title>syscall (26 samples, 0.01%)</title><rect x="98.9654%" y="1893" width="0.0118%" height="15" fill="rgb(207,12,36)" fg:x="218674" fg:w="26"/><text x="99.2154%" y="1903.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="98.9654%" y="1877" width="0.0118%" height="15" fill="rgb(210,214,24)" fg:x="218674" fg:w="26"/><text x="99.2154%" y="1887.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="98.9654%" y="1861" width="0.0118%" height="15" fill="rgb(206,56,30)" fg:x="218674" fg:w="26"/><text x="99.2154%" y="1871.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="98.9654%" y="1845" width="0.0118%" height="15" fill="rgb(228,143,26)" fg:x="218674" fg:w="26"/><text x="99.2154%" y="1855.50"></text></g><g><title>[unknown] (26 samples, 0.01%)</title><rect x="98.9654%" y="1829" width="0.0118%" height="15" fill="rgb(216,218,46)" fg:x="218674" fg:w="26"/><text x="99.2154%" y="1839.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="98.9659%" y="1813" width="0.0113%" height="15" fill="rgb(206,6,19)" fg:x="218675" fg:w="25"/><text x="99.2159%" y="1823.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="98.9668%" y="1797" width="0.0104%" height="15" fill="rgb(239,177,51)" fg:x="218677" fg:w="23"/><text x="99.2168%" y="1807.50"></text></g><g><title>[libc.so.6] (102 samples, 0.05%)</title><rect x="98.9346%" y="2325" width="0.0462%" height="15" fill="rgb(216,55,25)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2335.50"></text></g><g><title>[libc.so.6] (102 samples, 0.05%)</title><rect x="98.9346%" y="2309" width="0.0462%" height="15" fill="rgb(231,163,29)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2319.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (102 samples, 0.05%)</title><rect x="98.9346%" y="2293" width="0.0462%" height="15" fill="rgb(232,149,50)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (102 samples, 0.05%)</title><rect x="98.9346%" y="2277" width="0.0462%" height="15" fill="rgb(223,142,48)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (102 samples, 0.05%)</title><rect x="98.9346%" y="2261" width="0.0462%" height="15" fill="rgb(245,83,23)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2271.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (102 samples, 0.05%)</title><rect x="98.9346%" y="2245" width="0.0462%" height="15" fill="rgb(224,63,2)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2255.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (102 samples, 0.05%)</title><rect x="98.9346%" y="2229" width="0.0462%" height="15" fill="rgb(218,65,53)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2239.50"></text></g><g><title>std::panic::catch_unwind (102 samples, 0.05%)</title><rect x="98.9346%" y="2213" width="0.0462%" height="15" fill="rgb(221,84,29)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2223.50"></text></g><g><title>std::panicking::try (102 samples, 0.05%)</title><rect x="98.9346%" y="2197" width="0.0462%" height="15" fill="rgb(234,0,32)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2207.50"></text></g><g><title>std::panicking::try::do_call (102 samples, 0.05%)</title><rect x="98.9346%" y="2181" width="0.0462%" height="15" fill="rgb(206,20,16)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2191.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (102 samples, 0.05%)</title><rect x="98.9346%" y="2165" width="0.0462%" height="15" fill="rgb(244,172,18)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2175.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (102 samples, 0.05%)</title><rect x="98.9346%" y="2149" width="0.0462%" height="15" fill="rgb(254,133,1)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2159.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (102 samples, 0.05%)</title><rect x="98.9346%" y="2133" width="0.0462%" height="15" fill="rgb(222,206,41)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2143.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}} (102 samples, 0.05%)</title><rect x="98.9346%" y="2117" width="0.0462%" height="15" fill="rgb(212,3,42)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2127.50"></text></g><g><title>std::panic::catch_unwind (102 samples, 0.05%)</title><rect x="98.9346%" y="2101" width="0.0462%" height="15" fill="rgb(241,11,4)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2111.50"></text></g><g><title>std::panicking::try (102 samples, 0.05%)</title><rect x="98.9346%" y="2085" width="0.0462%" height="15" fill="rgb(205,19,26)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2095.50"></text></g><g><title>std::panicking::try::do_call (102 samples, 0.05%)</title><rect x="98.9346%" y="2069" width="0.0462%" height="15" fill="rgb(210,179,32)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2079.50"></text></g><g><title>sled::threadpool::spawn_new_thread::{{closure}}::{{closure}} (102 samples, 0.05%)</title><rect x="98.9346%" y="2053" width="0.0462%" height="15" fill="rgb(227,116,49)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2063.50"></text></g><g><title>sled::threadpool::perform_work (102 samples, 0.05%)</title><rect x="98.9346%" y="2037" width="0.0462%" height="15" fill="rgb(211,146,6)" fg:x="218606" fg:w="102"/><text x="99.1846%" y="2047.50"></text></g><g><title>sled::threadpool::Queue::recv_timeout (38 samples, 0.02%)</title><rect x="98.9636%" y="2021" width="0.0172%" height="15" fill="rgb(219,44,39)" fg:x="218670" fg:w="38"/><text x="99.2136%" y="2031.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until (36 samples, 0.02%)</title><rect x="98.9645%" y="2005" width="0.0163%" height="15" fill="rgb(234,128,11)" fg:x="218672" fg:w="36"/><text x="99.2145%" y="2015.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (36 samples, 0.02%)</title><rect x="98.9645%" y="1989" width="0.0163%" height="15" fill="rgb(220,183,53)" fg:x="218672" fg:w="36"/><text x="99.2145%" y="1999.50"></text></g><g><title>parking_lot_core::parking_lot::park (36 samples, 0.02%)</title><rect x="98.9645%" y="1973" width="0.0163%" height="15" fill="rgb(213,219,32)" fg:x="218672" fg:w="36"/><text x="99.2145%" y="1983.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (36 samples, 0.02%)</title><rect x="98.9645%" y="1957" width="0.0163%" height="15" fill="rgb(232,156,16)" fg:x="218672" fg:w="36"/><text x="99.2145%" y="1967.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (36 samples, 0.02%)</title><rect x="98.9645%" y="1941" width="0.0163%" height="15" fill="rgb(246,135,34)" fg:x="218672" fg:w="36"/><text x="99.2145%" y="1951.50"></text></g><g><title>sled-io-6 (104 samples, 0.05%)</title><rect x="98.9346%" y="2341" width="0.0471%" height="15" fill="rgb(241,99,0)" fg:x="218606" fg:w="104"/><text x="99.1846%" y="2351.50"></text></g><g><title>[libc.so.6] (23 samples, 0.01%)</title><rect x="98.9831%" y="2325" width="0.0104%" height="15" fill="rgb(222,103,45)" fg:x="218713" fg:w="23"/><text x="99.2331%" y="2335.50"></text></g><g><title>[unknown] (96 samples, 0.04%)</title><rect x="98.9989%" y="2309" width="0.0434%" height="15" fill="rgb(212,57,4)" fg:x="218748" fg:w="96"/><text x="99.2489%" y="2319.50"></text></g><g><title>[unknown] (87 samples, 0.04%)</title><rect x="99.0030%" y="2293" width="0.0394%" height="15" fill="rgb(215,68,47)" fg:x="218757" fg:w="87"/><text x="99.2530%" y="2303.50"></text></g><g><title>[unknown] (42 samples, 0.02%)</title><rect x="99.0234%" y="2277" width="0.0190%" height="15" fill="rgb(230,84,2)" fg:x="218802" fg:w="42"/><text x="99.2734%" y="2287.50"></text></g><g><title>std::sys::unix::futex::futex_wait (607 samples, 0.27%)</title><rect x="99.0659%" y="1973" width="0.2747%" height="15" fill="rgb(220,102,14)" fg:x="218896" fg:w="607"/><text x="99.3159%" y="1983.50"></text></g><g><title>syscall (588 samples, 0.27%)</title><rect x="99.0745%" y="1957" width="0.2661%" height="15" fill="rgb(240,10,32)" fg:x="218915" fg:w="588"/><text x="99.3245%" y="1967.50"></text></g><g><title>[unknown] (577 samples, 0.26%)</title><rect x="99.0795%" y="1941" width="0.2611%" height="15" fill="rgb(215,47,27)" fg:x="218926" fg:w="577"/><text x="99.3295%" y="1951.50"></text></g><g><title>[unknown] (548 samples, 0.25%)</title><rect x="99.0926%" y="1925" width="0.2480%" height="15" fill="rgb(233,188,43)" fg:x="218955" fg:w="548"/><text x="99.3426%" y="1935.50"></text></g><g><title>[unknown] (510 samples, 0.23%)</title><rect x="99.1098%" y="1909" width="0.2308%" height="15" fill="rgb(253,190,1)" fg:x="218993" fg:w="510"/><text x="99.3598%" y="1919.50"></text></g><g><title>[unknown] (499 samples, 0.23%)</title><rect x="99.1148%" y="1893" width="0.2258%" height="15" fill="rgb(206,114,52)" fg:x="219004" fg:w="499"/><text x="99.3648%" y="1903.50"></text></g><g><title>[unknown] (476 samples, 0.22%)</title><rect x="99.1252%" y="1877" width="0.2154%" height="15" fill="rgb(233,120,37)" fg:x="219027" fg:w="476"/><text x="99.3752%" y="1887.50"></text></g><g><title>[unknown] (448 samples, 0.20%)</title><rect x="99.1379%" y="1861" width="0.2028%" height="15" fill="rgb(214,52,39)" fg:x="219055" fg:w="448"/><text x="99.3879%" y="1871.50"></text></g><g><title>[unknown] (399 samples, 0.18%)</title><rect x="99.1600%" y="1845" width="0.1806%" height="15" fill="rgb(223,80,29)" fg:x="219104" fg:w="399"/><text x="99.4100%" y="1855.50"></text></g><g><title>[unknown] (377 samples, 0.17%)</title><rect x="99.1700%" y="1829" width="0.1706%" height="15" fill="rgb(230,101,40)" fg:x="219126" fg:w="377"/><text x="99.4200%" y="1839.50"></text></g><g><title>[unknown] (340 samples, 0.15%)</title><rect x="99.1867%" y="1813" width="0.1539%" height="15" fill="rgb(219,211,8)" fg:x="219163" fg:w="340"/><text x="99.4367%" y="1823.50"></text></g><g><title>[unknown] (288 samples, 0.13%)</title><rect x="99.2103%" y="1797" width="0.1303%" height="15" fill="rgb(252,126,28)" fg:x="219215" fg:w="288"/><text x="99.4603%" y="1807.50"></text></g><g><title>[unknown] (196 samples, 0.09%)</title><rect x="99.2519%" y="1781" width="0.0887%" height="15" fill="rgb(215,56,38)" fg:x="219307" fg:w="196"/><text x="99.5019%" y="1791.50"></text></g><g><title>[unknown] (95 samples, 0.04%)</title><rect x="99.2976%" y="1765" width="0.0430%" height="15" fill="rgb(249,55,44)" fg:x="219408" fg:w="95"/><text x="99.5476%" y="1775.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait (616 samples, 0.28%)</title><rect x="99.0645%" y="2005" width="0.2788%" height="15" fill="rgb(220,221,32)" fg:x="218893" fg:w="616"/><text x="99.3145%" y="2015.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (613 samples, 0.28%)</title><rect x="99.0659%" y="1989" width="0.2774%" height="15" fill="rgb(212,216,41)" fg:x="218896" fg:w="613"/><text x="99.3159%" y="1999.50"></text></g><g><title>std::sync::condvar::Condvar::wait (620 samples, 0.28%)</title><rect x="99.0632%" y="2037" width="0.2806%" height="15" fill="rgb(228,213,43)" fg:x="218890" fg:w="620"/><text x="99.3132%" y="2047.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (620 samples, 0.28%)</title><rect x="99.0632%" y="2021" width="0.2806%" height="15" fill="rgb(211,31,26)" fg:x="218890" fg:w="620"/><text x="99.3132%" y="2031.50"></text></g><g><title>async_std::task::builder::Builder::blocking::{{closure}} (657 samples, 0.30%)</title><rect x="99.0469%" y="2277" width="0.2973%" height="15" fill="rgb(229,202,19)" fg:x="218854" fg:w="657"/><text x="99.2969%" y="2287.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (657 samples, 0.30%)</title><rect x="99.0469%" y="2261" width="0.2973%" height="15" fill="rgb(229,105,46)" fg:x="218854" fg:w="657"/><text x="99.2969%" y="2271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (657 samples, 0.30%)</title><rect x="99.0469%" y="2245" width="0.2973%" height="15" fill="rgb(235,108,1)" fg:x="218854" fg:w="657"/><text x="99.2969%" y="2255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (657 samples, 0.30%)</title><rect x="99.0469%" y="2229" width="0.2973%" height="15" fill="rgb(245,111,35)" fg:x="218854" fg:w="657"/><text x="99.2969%" y="2239.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (657 samples, 0.30%)</title><rect x="99.0469%" y="2213" width="0.2973%" height="15" fill="rgb(219,185,31)" fg:x="218854" fg:w="657"/><text x="99.2969%" y="2223.50"></text></g><g><title>async_std::task::builder::Builder::blocking::{{closure}}::{{closure}} (657 samples, 0.30%)</title><rect x="99.0469%" y="2197" width="0.2973%" height="15" fill="rgb(214,4,43)" fg:x="218854" fg:w="657"/><text x="99.2969%" y="2207.50"></text></g><g><title>async_global_executor::executor::block_on (657 samples, 0.30%)</title><rect x="99.0469%" y="2181" width="0.2973%" height="15" fill="rgb(235,227,40)" fg:x="218854" fg:w="657"/><text x="99.2969%" y="2191.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (657 samples, 0.30%)</title><rect x="99.0469%" y="2165" width="0.2973%" height="15" fill="rgb(230,88,30)" fg:x="218854" fg:w="657"/><text x="99.2969%" y="2175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (657 samples, 0.30%)</title><rect x="99.0469%" y="2149" width="0.2973%" height="15" fill="rgb(216,217,1)" fg:x="218854" fg:w="657"/><text x="99.2969%" y="2159.50"></text></g><g><title>async_global_executor::executor::block_on::{{closure}} (657 samples, 0.30%)</title><rect x="99.0469%" y="2133" width="0.2973%" height="15" fill="rgb(248,139,50)" fg:x="218854" fg:w="657"/><text x="99.2969%" y="2143.50"></text></g><g><title>async_global_executor::reactor::block_on (657 samples, 0.30%)</title><rect x="99.0469%" y="2117" width="0.2973%" height="15" fill="rgb(233,1,21)" fg:x="218854" fg:w="657"/><text x="99.2969%" y="2127.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (657 samples, 0.30%)</title><rect x="99.0469%" y="2101" width="0.2973%" height="15" fill="rgb(215,183,12)" fg:x="218854" fg:w="657"/><text x="99.2969%" y="2111.50"></text></g><g><title>async_io::driver::block_on (657 samples, 0.30%)</title><rect x="99.0469%" y="2085" width="0.2973%" height="15" fill="rgb(229,104,42)" fg:x="218854" fg:w="657"/><text x="99.2969%" y="2095.50"></text></g><g><title>parking::Parker::park (628 samples, 0.28%)</title><rect x="99.0600%" y="2069" width="0.2842%" height="15" fill="rgb(243,34,48)" fg:x="218883" fg:w="628"/><text x="99.3100%" y="2079.50"></text></g><g><title>parking::Inner::park (624 samples, 0.28%)</title><rect x="99.0618%" y="2053" width="0.2824%" height="15" fill="rgb(239,11,44)" fg:x="218887" fg:w="624"/><text x="99.3118%" y="2063.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (40 samples, 0.02%)</title><rect x="99.3646%" y="1893" width="0.0181%" height="15" fill="rgb(231,98,35)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1903.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (40 samples, 0.02%)</title><rect x="99.3646%" y="1877" width="0.0181%" height="15" fill="rgb(233,28,25)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1887.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (40 samples, 0.02%)</title><rect x="99.3646%" y="1861" width="0.0181%" height="15" fill="rgb(234,123,11)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1871.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (40 samples, 0.02%)</title><rect x="99.3646%" y="1845" width="0.0181%" height="15" fill="rgb(220,69,3)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1855.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (40 samples, 0.02%)</title><rect x="99.3646%" y="1829" width="0.0181%" height="15" fill="rgb(214,64,36)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1839.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (40 samples, 0.02%)</title><rect x="99.3646%" y="1813" width="0.0181%" height="15" fill="rgb(211,138,32)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1823.50"></text></g><g><title>alloc::slice::hack::to_vec (40 samples, 0.02%)</title><rect x="99.3646%" y="1797" width="0.0181%" height="15" fill="rgb(213,118,47)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1807.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (40 samples, 0.02%)</title><rect x="99.3646%" y="1781" width="0.0181%" height="15" fill="rgb(243,124,49)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1791.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (40 samples, 0.02%)</title><rect x="99.3646%" y="1765" width="0.0181%" height="15" fill="rgb(221,30,28)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1775.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (40 samples, 0.02%)</title><rect x="99.3646%" y="1749" width="0.0181%" height="15" fill="rgb(246,37,13)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1759.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (40 samples, 0.02%)</title><rect x="99.3646%" y="1733" width="0.0181%" height="15" fill="rgb(249,66,14)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1743.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.02%)</title><rect x="99.3646%" y="1717" width="0.0181%" height="15" fill="rgb(213,166,5)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1727.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.02%)</title><rect x="99.3646%" y="1701" width="0.0181%" height="15" fill="rgb(221,66,24)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1711.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.02%)</title><rect x="99.3646%" y="1685" width="0.0181%" height="15" fill="rgb(210,132,17)" fg:x="219556" fg:w="40"/><text x="99.6146%" y="1695.50"></text></g><g><title>malloc (35 samples, 0.02%)</title><rect x="99.3669%" y="1669" width="0.0158%" height="15" fill="rgb(243,202,5)" fg:x="219561" fg:w="35"/><text x="99.6169%" y="1679.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.01%)</title><rect x="99.4655%" y="1701" width="0.0113%" height="15" fill="rgb(233,70,48)" fg:x="219779" fg:w="25"/><text x="99.7155%" y="1711.50"></text></g><g><title>[libc.so.6] (25 samples, 0.01%)</title><rect x="99.4655%" y="1685" width="0.0113%" height="15" fill="rgb(238,41,26)" fg:x="219779" fg:w="25"/><text x="99.7155%" y="1695.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (53 samples, 0.02%)</title><rect x="99.4533%" y="1797" width="0.0240%" height="15" fill="rgb(241,19,31)" fg:x="219752" fg:w="53"/><text x="99.7033%" y="1807.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (38 samples, 0.02%)</title><rect x="99.4601%" y="1781" width="0.0172%" height="15" fill="rgb(214,76,10)" fg:x="219767" fg:w="38"/><text x="99.7101%" y="1791.50"></text></g><g><title>alloc::string::String::push_str (38 samples, 0.02%)</title><rect x="99.4601%" y="1765" width="0.0172%" height="15" fill="rgb(254,202,22)" fg:x="219767" fg:w="38"/><text x="99.7101%" y="1775.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (38 samples, 0.02%)</title><rect x="99.4601%" y="1749" width="0.0172%" height="15" fill="rgb(214,72,24)" fg:x="219767" fg:w="38"/><text x="99.7101%" y="1759.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (38 samples, 0.02%)</title><rect x="99.4601%" y="1733" width="0.0172%" height="15" fill="rgb(221,92,46)" fg:x="219767" fg:w="38"/><text x="99.7101%" y="1743.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (38 samples, 0.02%)</title><rect x="99.4601%" y="1717" width="0.0172%" height="15" fill="rgb(246,13,50)" fg:x="219767" fg:w="38"/><text x="99.7101%" y="1727.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (25 samples, 0.01%)</title><rect x="99.5253%" y="1781" width="0.0113%" height="15" fill="rgb(240,165,38)" fg:x="219911" fg:w="25"/><text x="99.7753%" y="1791.50"></text></g><g><title>core::fmt::Formatter::pad_integral (121 samples, 0.05%)</title><rect x="99.4913%" y="1797" width="0.0548%" height="15" fill="rgb(241,24,51)" fg:x="219836" fg:w="121"/><text x="99.7413%" y="1807.50"></text></g><g><title>core::fmt::num::&lt;impl core::fmt::LowerHex for i8&gt;::fmt (218 samples, 0.10%)</title><rect x="99.4501%" y="1829" width="0.0987%" height="15" fill="rgb(227,51,44)" fg:x="219745" fg:w="218"/><text x="99.7001%" y="1839.50"></text></g><g><title>core::fmt::num::GenericRadix::fmt_int (211 samples, 0.10%)</title><rect x="99.4533%" y="1813" width="0.0955%" height="15" fill="rgb(231,121,3)" fg:x="219752" fg:w="211"/><text x="99.7033%" y="1823.50"></text></g><g><title>core::fmt::run (265 samples, 0.12%)</title><rect x="99.4293%" y="1845" width="0.1199%" height="15" fill="rgb(245,3,41)" fg:x="219699" fg:w="265"/><text x="99.6793%" y="1855.50"></text></g><g><title>core::fmt::Write::write_fmt (379 samples, 0.17%)</title><rect x="99.3913%" y="1877" width="0.1715%" height="15" fill="rgb(214,13,26)" fg:x="219615" fg:w="379"/><text x="99.6413%" y="1887.50"></text></g><g><title>core::fmt::write (370 samples, 0.17%)</title><rect x="99.3954%" y="1861" width="0.1675%" height="15" fill="rgb(252,75,11)" fg:x="219624" fg:w="370"/><text x="99.6454%" y="1871.50"></text></g><g><title>&lt;[u8] as bitcoin_hashes::hex::ToHex&gt;::to_hex (401 samples, 0.18%)</title><rect x="99.3827%" y="1893" width="0.1815%" height="15" fill="rgb(218,226,17)" fg:x="219596" fg:w="401"/><text x="99.6327%" y="1903.50"></text></g><g><title>core::mem::drop (54 samples, 0.02%)</title><rect x="99.5642%" y="1877" width="0.0244%" height="15" fill="rgb(248,89,38)" fg:x="219997" fg:w="54"/><text x="99.8142%" y="1887.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (54 samples, 0.02%)</title><rect x="99.5642%" y="1861" width="0.0244%" height="15" fill="rgb(237,73,46)" fg:x="219997" fg:w="54"/><text x="99.8142%" y="1871.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.02%)</title><rect x="99.5642%" y="1845" width="0.0244%" height="15" fill="rgb(242,78,33)" fg:x="219997" fg:w="54"/><text x="99.8142%" y="1855.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (39 samples, 0.02%)</title><rect x="99.5710%" y="1829" width="0.0177%" height="15" fill="rgb(235,60,3)" fg:x="220012" fg:w="39"/><text x="99.8210%" y="1839.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (39 samples, 0.02%)</title><rect x="99.5710%" y="1813" width="0.0177%" height="15" fill="rgb(216,172,19)" fg:x="220012" fg:w="39"/><text x="99.8210%" y="1823.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (26 samples, 0.01%)</title><rect x="99.5768%" y="1797" width="0.0118%" height="15" fill="rgb(227,6,42)" fg:x="220025" fg:w="26"/><text x="99.8268%" y="1807.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.03%)</title><rect x="99.5642%" y="1893" width="0.0267%" height="15" fill="rgb(223,207,42)" fg:x="219997" fg:w="59"/><text x="99.8142%" y="1903.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (31 samples, 0.01%)</title><rect x="99.6040%" y="1653" width="0.0140%" height="15" fill="rgb(246,138,30)" fg:x="220085" fg:w="31"/><text x="99.8540%" y="1663.50"></text></g><g><title>alloc::alloc::Global::grow_impl (31 samples, 0.01%)</title><rect x="99.6040%" y="1637" width="0.0140%" height="15" fill="rgb(251,199,47)" fg:x="220085" fg:w="31"/><text x="99.8540%" y="1647.50"></text></g><g><title>alloc::alloc::realloc (31 samples, 0.01%)</title><rect x="99.6040%" y="1621" width="0.0140%" height="15" fill="rgb(228,218,44)" fg:x="220085" fg:w="31"/><text x="99.8540%" y="1631.50"></text></g><g><title>realloc (27 samples, 0.01%)</title><rect x="99.6058%" y="1605" width="0.0122%" height="15" fill="rgb(220,68,6)" fg:x="220089" fg:w="27"/><text x="99.8558%" y="1615.50"></text></g><g><title>&lt;[u8: 32] as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (33 samples, 0.01%)</title><rect x="99.6035%" y="1829" width="0.0149%" height="15" fill="rgb(240,60,26)" fg:x="220084" fg:w="33"/><text x="99.8535%" y="1839.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (33 samples, 0.01%)</title><rect x="99.6035%" y="1813" width="0.0149%" height="15" fill="rgb(211,200,19)" fg:x="220084" fg:w="33"/><text x="99.8535%" y="1823.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (33 samples, 0.01%)</title><rect x="99.6035%" y="1797" width="0.0149%" height="15" fill="rgb(242,145,30)" fg:x="220084" fg:w="33"/><text x="99.8535%" y="1807.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (33 samples, 0.01%)</title><rect x="99.6035%" y="1781" width="0.0149%" height="15" fill="rgb(225,64,13)" fg:x="220084" fg:w="33"/><text x="99.8535%" y="1791.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (33 samples, 0.01%)</title><rect x="99.6035%" y="1765" width="0.0149%" height="15" fill="rgb(218,103,35)" fg:x="220084" fg:w="33"/><text x="99.8535%" y="1775.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (33 samples, 0.01%)</title><rect x="99.6035%" y="1749" width="0.0149%" height="15" fill="rgb(216,93,46)" fg:x="220084" fg:w="33"/><text x="99.8535%" y="1759.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (33 samples, 0.01%)</title><rect x="99.6035%" y="1733" width="0.0149%" height="15" fill="rgb(225,159,27)" fg:x="220084" fg:w="33"/><text x="99.8535%" y="1743.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (33 samples, 0.01%)</title><rect x="99.6035%" y="1717" width="0.0149%" height="15" fill="rgb(225,204,11)" fg:x="220084" fg:w="33"/><text x="99.8535%" y="1727.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (33 samples, 0.01%)</title><rect x="99.6035%" y="1701" width="0.0149%" height="15" fill="rgb(205,56,4)" fg:x="220084" fg:w="33"/><text x="99.8535%" y="1711.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (33 samples, 0.01%)</title><rect x="99.6035%" y="1685" width="0.0149%" height="15" fill="rgb(206,6,35)" fg:x="220084" fg:w="33"/><text x="99.8535%" y="1695.50"></text></g><g><title>alloc::raw_vec::finish_grow (33 samples, 0.01%)</title><rect x="99.6035%" y="1669" width="0.0149%" height="15" fill="rgb(247,73,52)" fg:x="220084" fg:w="33"/><text x="99.8535%" y="1679.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::BlockHash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (34 samples, 0.02%)</title><rect x="99.6035%" y="1861" width="0.0154%" height="15" fill="rgb(246,97,4)" fg:x="220084" fg:w="34"/><text x="99.8535%" y="1871.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (34 samples, 0.02%)</title><rect x="99.6035%" y="1845" width="0.0154%" height="15" fill="rgb(212,37,15)" fg:x="220084" fg:w="34"/><text x="99.8535%" y="1855.50"></text></g><g><title>&lt;[u8: 32] as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (23 samples, 0.01%)</title><rect x="99.6189%" y="1829" width="0.0104%" height="15" fill="rgb(208,130,40)" fg:x="220118" fg:w="23"/><text x="99.8689%" y="1839.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_slice (23 samples, 0.01%)</title><rect x="99.6189%" y="1813" width="0.0104%" height="15" fill="rgb(236,55,29)" fg:x="220118" fg:w="23"/><text x="99.8689%" y="1823.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (23 samples, 0.01%)</title><rect x="99.6189%" y="1797" width="0.0104%" height="15" fill="rgb(209,156,45)" fg:x="220118" fg:w="23"/><text x="99.8689%" y="1807.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (23 samples, 0.01%)</title><rect x="99.6189%" y="1781" width="0.0104%" height="15" fill="rgb(249,107,4)" fg:x="220118" fg:w="23"/><text x="99.8689%" y="1791.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (23 samples, 0.01%)</title><rect x="99.6189%" y="1765" width="0.0104%" height="15" fill="rgb(227,7,13)" fg:x="220118" fg:w="23"/><text x="99.8689%" y="1775.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (23 samples, 0.01%)</title><rect x="99.6189%" y="1749" width="0.0104%" height="15" fill="rgb(250,129,14)" fg:x="220118" fg:w="23"/><text x="99.8689%" y="1759.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (23 samples, 0.01%)</title><rect x="99.6189%" y="1733" width="0.0104%" height="15" fill="rgb(229,92,13)" fg:x="220118" fg:w="23"/><text x="99.8689%" y="1743.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (23 samples, 0.01%)</title><rect x="99.6189%" y="1717" width="0.0104%" height="15" fill="rgb(245,98,39)" fg:x="220118" fg:w="23"/><text x="99.8689%" y="1727.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (23 samples, 0.01%)</title><rect x="99.6189%" y="1701" width="0.0104%" height="15" fill="rgb(234,135,48)" fg:x="220118" fg:w="23"/><text x="99.8689%" y="1711.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (23 samples, 0.01%)</title><rect x="99.6189%" y="1685" width="0.0104%" height="15" fill="rgb(230,98,28)" fg:x="220118" fg:w="23"/><text x="99.8689%" y="1695.50"></text></g><g><title>&lt;bitcoin::hash_types::newtypes::TxMerkleNode as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (25 samples, 0.01%)</title><rect x="99.6189%" y="1861" width="0.0113%" height="15" fill="rgb(223,121,0)" fg:x="220118" fg:w="25"/><text x="99.8689%" y="1871.50"></text></g><g><title>&lt;bitcoin_hashes::sha256d::Hash as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (25 samples, 0.01%)</title><rect x="99.6189%" y="1845" width="0.0113%" height="15" fill="rgb(234,173,33)" fg:x="220118" fg:w="25"/><text x="99.8689%" y="1855.50"></text></g><g><title>bitcoin::consensus::encode::serialize (91 samples, 0.04%)</title><rect x="99.6031%" y="1893" width="0.0412%" height="15" fill="rgb(245,47,8)" fg:x="220083" fg:w="91"/><text x="99.8531%" y="1903.50"></text></g><g><title>&lt;bitcoin::blockdata::block::BlockHeader as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (90 samples, 0.04%)</title><rect x="99.6035%" y="1877" width="0.0407%" height="15" fill="rgb(205,17,20)" fg:x="220084" fg:w="90"/><text x="99.8535%" y="1887.50"></text></g><g><title>&lt;u32 as bitcoin::consensus::encode::Encodable&gt;::consensus_encode (26 samples, 0.01%)</title><rect x="99.6325%" y="1861" width="0.0118%" height="15" fill="rgb(232,151,16)" fg:x="220148" fg:w="26"/><text x="99.8825%" y="1871.50"></text></g><g><title>&lt;W as bitcoin::consensus::encode::WriteExt&gt;::emit_u32 (26 samples, 0.01%)</title><rect x="99.6325%" y="1845" width="0.0118%" height="15" fill="rgb(208,30,32)" fg:x="220148" fg:w="26"/><text x="99.8825%" y="1855.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (26 samples, 0.01%)</title><rect x="99.6325%" y="1829" width="0.0118%" height="15" fill="rgb(254,26,3)" fg:x="220148" fg:w="26"/><text x="99.8825%" y="1839.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (26 samples, 0.01%)</title><rect x="99.6325%" y="1813" width="0.0118%" height="15" fill="rgb(240,177,30)" fg:x="220148" fg:w="26"/><text x="99.8825%" y="1823.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (26 samples, 0.01%)</title><rect x="99.6325%" y="1797" width="0.0118%" height="15" fill="rgb(248,76,44)" fg:x="220148" fg:w="26"/><text x="99.8825%" y="1807.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (26 samples, 0.01%)</title><rect x="99.6325%" y="1781" width="0.0118%" height="15" fill="rgb(241,186,54)" fg:x="220148" fg:w="26"/><text x="99.8825%" y="1791.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (24 samples, 0.01%)</title><rect x="99.6334%" y="1765" width="0.0109%" height="15" fill="rgb(249,171,29)" fg:x="220150" fg:w="24"/><text x="99.8834%" y="1775.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.01%)</title><rect x="99.6334%" y="1749" width="0.0109%" height="15" fill="rgb(237,151,44)" fg:x="220150" fg:w="24"/><text x="99.8834%" y="1759.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (24 samples, 0.01%)</title><rect x="99.6334%" y="1733" width="0.0109%" height="15" fill="rgb(228,174,30)" fg:x="220150" fg:w="24"/><text x="99.8834%" y="1743.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (24 samples, 0.01%)</title><rect x="99.6334%" y="1717" width="0.0109%" height="15" fill="rgb(252,14,37)" fg:x="220150" fg:w="24"/><text x="99.8834%" y="1727.50"></text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 0.01%)</title><rect x="99.6334%" y="1701" width="0.0109%" height="15" fill="rgb(207,111,40)" fg:x="220150" fg:w="24"/><text x="99.8834%" y="1711.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (23 samples, 0.01%)</title><rect x="99.6339%" y="1685" width="0.0104%" height="15" fill="rgb(248,171,54)" fg:x="220151" fg:w="23"/><text x="99.8839%" y="1695.50"></text></g><g><title>alloc::alloc::Global::grow_impl (23 samples, 0.01%)</title><rect x="99.6339%" y="1669" width="0.0104%" height="15" fill="rgb(211,127,2)" fg:x="220151" fg:w="23"/><text x="99.8839%" y="1679.50"></text></g><g><title>alloc::alloc::realloc (23 samples, 0.01%)</title><rect x="99.6339%" y="1653" width="0.0104%" height="15" fill="rgb(236,87,47)" fg:x="220151" fg:w="23"/><text x="99.8839%" y="1663.50"></text></g><g><title>[libc.so.6] (45 samples, 0.02%)</title><rect x="99.6683%" y="1637" width="0.0204%" height="15" fill="rgb(223,190,45)" fg:x="220227" fg:w="45"/><text x="99.9183%" y="1647.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (59 samples, 0.03%)</title><rect x="99.6642%" y="1685" width="0.0267%" height="15" fill="rgb(215,5,16)" fg:x="220218" fg:w="59"/><text x="99.9142%" y="1695.50"></text></g><g><title>alloc::alloc::dealloc (59 samples, 0.03%)</title><rect x="99.6642%" y="1669" width="0.0267%" height="15" fill="rgb(252,82,33)" fg:x="220218" fg:w="59"/><text x="99.9142%" y="1679.50"></text></g><g><title>cfree (59 samples, 0.03%)</title><rect x="99.6642%" y="1653" width="0.0267%" height="15" fill="rgb(247,213,44)" fg:x="220218" fg:w="59"/><text x="99.9142%" y="1663.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.03%)</title><rect x="99.6570%" y="1797" width="0.0348%" height="15" fill="rgb(205,196,44)" fg:x="220202" fg:w="77"/><text x="99.9070%" y="1807.50"></text></g><g><title>core::ptr::drop_in_place&lt;[bitcoin::blockdata::transaction::TxIn]&gt; (77 samples, 0.03%)</title><rect x="99.6570%" y="1781" width="0.0348%" height="15" fill="rgb(237,96,54)" fg:x="220202" fg:w="77"/><text x="99.9070%" y="1791.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::transaction::TxIn&gt; (77 samples, 0.03%)</title><rect x="99.6570%" y="1765" width="0.0348%" height="15" fill="rgb(230,113,34)" fg:x="220202" fg:w="77"/><text x="99.9070%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::witness::Witness&gt; (61 samples, 0.03%)</title><rect x="99.6642%" y="1749" width="0.0276%" height="15" fill="rgb(221,224,12)" fg:x="220218" fg:w="61"/><text x="99.9142%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (61 samples, 0.03%)</title><rect x="99.6642%" y="1733" width="0.0276%" height="15" fill="rgb(219,112,44)" fg:x="220218" fg:w="61"/><text x="99.9142%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (61 samples, 0.03%)</title><rect x="99.6642%" y="1717" width="0.0276%" height="15" fill="rgb(210,31,13)" fg:x="220218" fg:w="61"/><text x="99.9142%" y="1727.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.03%)</title><rect x="99.6642%" y="1701" width="0.0276%" height="15" fill="rgb(230,25,16)" fg:x="220218" fg:w="61"/><text x="99.9142%" y="1711.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxIn&gt;&gt; (102 samples, 0.05%)</title><rect x="99.6570%" y="1813" width="0.0462%" height="15" fill="rgb(246,108,53)" fg:x="220202" fg:w="102"/><text x="99.9070%" y="1823.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bitcoin::blockdata::transaction::TxIn&gt;&gt; (25 samples, 0.01%)</title><rect x="99.6918%" y="1797" width="0.0113%" height="15" fill="rgb(241,172,50)" fg:x="220279" fg:w="25"/><text x="99.9418%" y="1807.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.01%)</title><rect x="99.6918%" y="1781" width="0.0113%" height="15" fill="rgb(235,141,10)" fg:x="220279" fg:w="25"/><text x="99.9418%" y="1791.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.01%)</title><rect x="99.6918%" y="1765" width="0.0113%" height="15" fill="rgb(220,174,43)" fg:x="220279" fg:w="25"/><text x="99.9418%" y="1775.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.01%)</title><rect x="99.6918%" y="1749" width="0.0113%" height="15" fill="rgb(215,181,40)" fg:x="220279" fg:w="25"/><text x="99.9418%" y="1759.50"></text></g><g><title>cfree (25 samples, 0.01%)</title><rect x="99.6918%" y="1733" width="0.0113%" height="15" fill="rgb(230,97,2)" fg:x="220279" fg:w="25"/><text x="99.9418%" y="1743.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.02%)</title><rect x="99.7031%" y="1797" width="0.0177%" height="15" fill="rgb(211,25,27)" fg:x="220304" fg:w="39"/><text x="99.9531%" y="1807.50"></text></g><g><title>core::ptr::drop_in_place&lt;[bitcoin::blockdata::transaction::TxOut]&gt; (39 samples, 0.02%)</title><rect x="99.7031%" y="1781" width="0.0177%" height="15" fill="rgb(230,87,26)" fg:x="220304" fg:w="39"/><text x="99.9531%" y="1791.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::transaction::TxOut&gt; (39 samples, 0.02%)</title><rect x="99.7031%" y="1765" width="0.0177%" height="15" fill="rgb(227,160,17)" fg:x="220304" fg:w="39"/><text x="99.9531%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::script::Script&gt; (39 samples, 0.02%)</title><rect x="99.7031%" y="1749" width="0.0177%" height="15" fill="rgb(244,85,34)" fg:x="220304" fg:w="39"/><text x="99.9531%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u8]&gt;&gt; (39 samples, 0.02%)</title><rect x="99.7031%" y="1733" width="0.0177%" height="15" fill="rgb(207,70,0)" fg:x="220304" fg:w="39"/><text x="99.9531%" y="1743.50"></text></g><g><title>alloc::alloc::box_free (39 samples, 0.02%)</title><rect x="99.7031%" y="1717" width="0.0177%" height="15" fill="rgb(223,129,7)" fg:x="220304" fg:w="39"/><text x="99.9531%" y="1727.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (39 samples, 0.02%)</title><rect x="99.7031%" y="1701" width="0.0177%" height="15" fill="rgb(246,105,7)" fg:x="220304" fg:w="39"/><text x="99.9531%" y="1711.50"></text></g><g><title>alloc::alloc::dealloc (39 samples, 0.02%)</title><rect x="99.7031%" y="1685" width="0.0177%" height="15" fill="rgb(215,154,42)" fg:x="220304" fg:w="39"/><text x="99.9531%" y="1695.50"></text></g><g><title>cfree (39 samples, 0.02%)</title><rect x="99.7031%" y="1669" width="0.0177%" height="15" fill="rgb(220,215,30)" fg:x="220304" fg:w="39"/><text x="99.9531%" y="1679.50"></text></g><g><title>[libc.so.6] (30 samples, 0.01%)</title><rect x="99.7072%" y="1653" width="0.0136%" height="15" fill="rgb(228,81,51)" fg:x="220313" fg:w="30"/><text x="99.9572%" y="1663.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (157 samples, 0.07%)</title><rect x="99.6570%" y="1861" width="0.0711%" height="15" fill="rgb(247,71,54)" fg:x="220202" fg:w="157"/><text x="99.9070%" y="1871.50"></text></g><g><title>core::ptr::drop_in_place&lt;[bitcoin::blockdata::transaction::Transaction]&gt; (157 samples, 0.07%)</title><rect x="99.6570%" y="1845" width="0.0711%" height="15" fill="rgb(234,176,34)" fg:x="220202" fg:w="157"/><text x="99.9070%" y="1855.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::transaction::Transaction&gt; (157 samples, 0.07%)</title><rect x="99.6570%" y="1829" width="0.0711%" height="15" fill="rgb(241,103,54)" fg:x="220202" fg:w="157"/><text x="99.9070%" y="1839.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::TxOut&gt;&gt; (55 samples, 0.02%)</title><rect x="99.7031%" y="1813" width="0.0249%" height="15" fill="rgb(228,22,34)" fg:x="220304" fg:w="55"/><text x="99.9531%" y="1823.50"></text></g><g><title>[libc.so.6] (33 samples, 0.01%)</title><rect x="99.7294%" y="1781" width="0.0149%" height="15" fill="rgb(241,179,48)" fg:x="220362" fg:w="33"/><text x="99.9794%" y="1791.50"></text></g><g><title>__lll_lock_wait_private (29 samples, 0.01%)</title><rect x="99.7312%" y="1765" width="0.0131%" height="15" fill="rgb(235,167,37)" fg:x="220366" fg:w="29"/><text x="99.9812%" y="1775.50"></text></g><g><title>[unknown] (29 samples, 0.01%)</title><rect x="99.7312%" y="1749" width="0.0131%" height="15" fill="rgb(213,109,30)" fg:x="220366" fg:w="29"/><text x="99.9812%" y="1759.50"></text></g><g><title>[unknown] (27 samples, 0.01%)</title><rect x="99.7321%" y="1733" width="0.0122%" height="15" fill="rgb(222,172,16)" fg:x="220368" fg:w="27"/><text x="99.9821%" y="1743.50"></text></g><g><title>[unknown] (25 samples, 0.01%)</title><rect x="99.7330%" y="1717" width="0.0113%" height="15" fill="rgb(233,192,5)" fg:x="220370" fg:w="25"/><text x="99.9830%" y="1727.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="99.7334%" y="1701" width="0.0109%" height="15" fill="rgb(247,189,41)" fg:x="220371" fg:w="24"/><text x="99.9834%" y="1711.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="99.7334%" y="1685" width="0.0109%" height="15" fill="rgb(218,134,47)" fg:x="220371" fg:w="24"/><text x="99.9834%" y="1695.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="99.7334%" y="1669" width="0.0109%" height="15" fill="rgb(216,29,3)" fg:x="220371" fg:w="24"/><text x="99.9834%" y="1679.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitcoin::blockdata::block::Block&gt; (197 samples, 0.09%)</title><rect x="99.6570%" y="1893" width="0.0892%" height="15" fill="rgb(246,140,12)" fg:x="220202" fg:w="197"/><text x="99.9070%" y="1903.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bitcoin::blockdata::transaction::Transaction&gt;&gt; (197 samples, 0.09%)</title><rect x="99.6570%" y="1877" width="0.0892%" height="15" fill="rgb(230,136,11)" fg:x="220202" fg:w="197"/><text x="99.9070%" y="1887.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bitcoin::blockdata::transaction::Transaction&gt;&gt; (40 samples, 0.02%)</title><rect x="99.7280%" y="1861" width="0.0181%" height="15" fill="rgb(247,22,47)" fg:x="220359" fg:w="40"/><text x="99.9780%" y="1871.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.02%)</title><rect x="99.7280%" y="1845" width="0.0181%" height="15" fill="rgb(218,84,22)" fg:x="220359" fg:w="40"/><text x="99.9780%" y="1855.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (40 samples, 0.02%)</title><rect x="99.7280%" y="1829" width="0.0181%" height="15" fill="rgb(216,87,39)" fg:x="220359" fg:w="40"/><text x="99.9780%" y="1839.50"></text></g><g><title>alloc::alloc::dealloc (40 samples, 0.02%)</title><rect x="99.7280%" y="1813" width="0.0181%" height="15" fill="rgb(221,178,8)" fg:x="220359" fg:w="40"/><text x="99.9780%" y="1823.50"></text></g><g><title>cfree (40 samples, 0.02%)</title><rect x="99.7280%" y="1797" width="0.0181%" height="15" fill="rgb(230,42,11)" fg:x="220359" fg:w="40"/><text x="99.9780%" y="1807.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (48 samples, 0.02%)</title><rect x="99.7488%" y="1893" width="0.0217%" height="15" fill="rgb(237,229,4)" fg:x="220405" fg:w="48"/><text x="99.9988%" y="1903.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (46 samples, 0.02%)</title><rect x="99.7497%" y="1877" width="0.0208%" height="15" fill="rgb(222,31,33)" fg:x="220407" fg:w="46"/><text x="99.9997%" y="1887.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (23 samples, 0.01%)</title><rect x="99.7601%" y="1861" width="0.0104%" height="15" fill="rgb(210,17,39)" fg:x="220430" fg:w="23"/><text x="100.0101%" y="1871.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (36 samples, 0.02%)</title><rect x="99.8081%" y="1653" width="0.0163%" height="15" fill="rgb(244,93,20)" fg:x="220536" fg:w="36"/><text x="100.0581%" y="1663.50"></text></g><g><title>hashbrown::map::make_hash (80 samples, 0.04%)</title><rect x="99.7886%" y="1813" width="0.0362%" height="15" fill="rgb(210,40,47)" fg:x="220493" fg:w="80"/><text x="100.0386%" y="1823.50"></text></g><g><title>core::hash::BuildHasher::hash_one (80 samples, 0.04%)</title><rect x="99.7886%" y="1797" width="0.0362%" height="15" fill="rgb(239,211,47)" fg:x="220493" fg:w="80"/><text x="100.0386%" y="1807.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (66 samples, 0.03%)</title><rect x="99.7950%" y="1781" width="0.0299%" height="15" fill="rgb(251,223,49)" fg:x="220507" fg:w="66"/><text x="100.0450%" y="1791.50"></text></g><g><title>&lt;bitcoin::blockdata::script::Script as core::hash::Hash&gt;::hash (66 samples, 0.03%)</title><rect x="99.7950%" y="1765" width="0.0299%" height="15" fill="rgb(221,149,5)" fg:x="220507" fg:w="66"/><text x="100.0450%" y="1775.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (66 samples, 0.03%)</title><rect x="99.7950%" y="1749" width="0.0299%" height="15" fill="rgb(219,224,51)" fg:x="220507" fg:w="66"/><text x="100.0450%" y="1759.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (52 samples, 0.02%)</title><rect x="99.8013%" y="1733" width="0.0235%" height="15" fill="rgb(223,7,8)" fg:x="220521" fg:w="52"/><text x="100.0513%" y="1743.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (43 samples, 0.02%)</title><rect x="99.8054%" y="1717" width="0.0195%" height="15" fill="rgb(241,217,22)" fg:x="220530" fg:w="43"/><text x="100.0554%" y="1727.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (42 samples, 0.02%)</title><rect x="99.8058%" y="1701" width="0.0190%" height="15" fill="rgb(248,209,0)" fg:x="220531" fg:w="42"/><text x="100.0558%" y="1711.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (42 samples, 0.02%)</title><rect x="99.8058%" y="1685" width="0.0190%" height="15" fill="rgb(217,205,4)" fg:x="220531" fg:w="42"/><text x="100.0558%" y="1695.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (42 samples, 0.02%)</title><rect x="99.8058%" y="1669" width="0.0190%" height="15" fill="rgb(228,124,39)" fg:x="220531" fg:w="42"/><text x="100.0558%" y="1679.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (31 samples, 0.01%)</title><rect x="99.8249%" y="1813" width="0.0140%" height="15" fill="rgb(250,116,42)" fg:x="220573" fg:w="31"/><text x="100.0749%" y="1823.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (31 samples, 0.01%)</title><rect x="99.8249%" y="1797" width="0.0140%" height="15" fill="rgb(223,202,9)" fg:x="220573" fg:w="31"/><text x="100.0749%" y="1807.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (31 samples, 0.01%)</title><rect x="99.8249%" y="1781" width="0.0140%" height="15" fill="rgb(242,222,40)" fg:x="220573" fg:w="31"/><text x="100.0749%" y="1791.50"></text></g><g><title>utreexo_wallet::address_cache::AddressCache&lt;D&gt;::block_process (130 samples, 0.06%)</title><rect x="99.7810%" y="1893" width="0.0588%" height="15" fill="rgb(229,99,46)" fg:x="220476" fg:w="130"/><text x="100.0310%" y="1903.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (113 samples, 0.05%)</title><rect x="99.7886%" y="1877" width="0.0511%" height="15" fill="rgb(225,56,46)" fg:x="220493" fg:w="113"/><text x="100.0386%" y="1887.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (113 samples, 0.05%)</title><rect x="99.7886%" y="1861" width="0.0511%" height="15" fill="rgb(227,94,5)" fg:x="220493" fg:w="113"/><text x="100.0386%" y="1871.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (113 samples, 0.05%)</title><rect x="99.7886%" y="1845" width="0.0511%" height="15" fill="rgb(205,112,38)" fg:x="220493" fg:w="113"/><text x="100.0386%" y="1855.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (113 samples, 0.05%)</title><rect x="99.7886%" y="1829" width="0.0511%" height="15" fill="rgb(231,133,46)" fg:x="220493" fg:w="113"/><text x="100.0386%" y="1839.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,061 samples, 0.48%)</title><rect x="99.3605%" y="1925" width="0.4802%" height="15" fill="rgb(217,16,9)" fg:x="219547" fg:w="1061"/><text x="99.6105%" y="1935.50"></text></g><g><title>utreexo_wallet::electrum::electrum_protocol::ElectrumServer&lt;Blockchain&gt;::handle_notification::{{closure}} (1,061 samples, 0.48%)</title><rect x="99.3605%" y="1909" width="0.4802%" height="15" fill="rgb(249,173,9)" fg:x="219547" fg:w="1061"/><text x="99.6105%" y="1919.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (38 samples, 0.02%)</title><rect x="99.8502%" y="1781" width="0.0172%" height="15" fill="rgb(205,163,53)" fg:x="220629" fg:w="38"/><text x="100.1002%" y="1791.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (34 samples, 0.02%)</title><rect x="99.8688%" y="1765" width="0.0154%" height="15" fill="rgb(217,54,41)" fg:x="220670" fg:w="34"/><text x="100.1188%" y="1775.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (26 samples, 0.01%)</title><rect x="99.8724%" y="1749" width="0.0118%" height="15" fill="rgb(228,216,12)" fg:x="220678" fg:w="26"/><text x="100.1224%" y="1759.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (39 samples, 0.02%)</title><rect x="99.8674%" y="1781" width="0.0177%" height="15" fill="rgb(244,228,15)" fg:x="220667" fg:w="39"/><text x="100.1174%" y="1791.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (111 samples, 0.05%)</title><rect x="99.8434%" y="1893" width="0.0502%" height="15" fill="rgb(221,176,53)" fg:x="220614" fg:w="111"/><text x="100.0934%" y="1903.50"></text></g><g><title>utreexo_wallet::electrum::electrum_protocol::ElectrumServer&lt;Blockchain&gt;::main_loop::{{closure}}::{{closure}}::{{closure}} (109 samples, 0.05%)</title><rect x="99.8443%" y="1877" width="0.0493%" height="15" fill="rgb(205,94,34)" fg:x="220616" fg:w="109"/><text x="100.0943%" y="1887.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (106 samples, 0.05%)</title><rect x="99.8457%" y="1861" width="0.0480%" height="15" fill="rgb(213,110,48)" fg:x="220619" fg:w="106"/><text x="100.0957%" y="1871.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (106 samples, 0.05%)</title><rect x="99.8457%" y="1845" width="0.0480%" height="15" fill="rgb(236,142,28)" fg:x="220619" fg:w="106"/><text x="100.0957%" y="1855.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (106 samples, 0.05%)</title><rect x="99.8457%" y="1829" width="0.0480%" height="15" fill="rgb(225,135,29)" fg:x="220619" fg:w="106"/><text x="100.0957%" y="1839.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (102 samples, 0.05%)</title><rect x="99.8475%" y="1813" width="0.0462%" height="15" fill="rgb(252,45,31)" fg:x="220623" fg:w="102"/><text x="100.0975%" y="1823.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (102 samples, 0.05%)</title><rect x="99.8475%" y="1797" width="0.0462%" height="15" fill="rgb(211,187,50)" fg:x="220623" fg:w="102"/><text x="100.0975%" y="1807.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (135 samples, 0.06%)</title><rect x="99.8407%" y="1925" width="0.0611%" height="15" fill="rgb(229,109,7)" fg:x="220608" fg:w="135"/><text x="100.0907%" y="1935.50"></text></g><g><title>utreexo_wallet::electrum::electrum_protocol::ElectrumServer&lt;Blockchain&gt;::main_loop::{{closure}}::{{closure}} (130 samples, 0.06%)</title><rect x="99.8430%" y="1909" width="0.0588%" height="15" fill="rgb(251,131,51)" fg:x="220613" fg:w="130"/><text x="100.0930%" y="1919.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,219 samples, 0.55%)</title><rect x="99.3506%" y="1973" width="0.5517%" height="15" fill="rgb(251,180,35)" fg:x="219525" fg:w="1219"/><text x="99.6006%" y="1983.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,219 samples, 0.55%)</title><rect x="99.3506%" y="1957" width="0.5517%" height="15" fill="rgb(211,46,32)" fg:x="219525" fg:w="1219"/><text x="99.6006%" y="1967.50"></text></g><g><title>utreexo_wallet::electrum::electrum_protocol::ElectrumServer&lt;Blockchain&gt;::main_loop::{{closure}} (1,219 samples, 0.55%)</title><rect x="99.3506%" y="1941" width="0.5517%" height="15" fill="rgb(248,123,17)" fg:x="219525" fg:w="1219"/><text x="99.6006%" y="1951.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,228 samples, 0.56%)</title><rect x="99.3469%" y="2053" width="0.5558%" height="15" fill="rgb(227,141,18)" fg:x="219517" fg:w="1228"/><text x="99.5969%" y="2063.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,228 samples, 0.56%)</title><rect x="99.3469%" y="2037" width="0.5558%" height="15" fill="rgb(216,102,9)" fg:x="219517" fg:w="1228"/><text x="99.5969%" y="2047.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,228 samples, 0.56%)</title><rect x="99.3469%" y="2021" width="0.5558%" height="15" fill="rgb(253,47,13)" fg:x="219517" fg:w="1228"/><text x="99.5969%" y="2031.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,228 samples, 0.56%)</title><rect x="99.3469%" y="2005" width="0.5558%" height="15" fill="rgb(226,93,23)" fg:x="219517" fg:w="1228"/><text x="99.5969%" y="2015.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,220 samples, 0.55%)</title><rect x="99.3506%" y="1989" width="0.5521%" height="15" fill="rgb(247,104,17)" fg:x="219525" fg:w="1220"/><text x="99.6006%" y="1999.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (38 samples, 0.02%)</title><rect x="99.9027%" y="2053" width="0.0172%" height="15" fill="rgb(233,203,26)" fg:x="220745" fg:w="38"/><text x="100.1527%" y="2063.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (38 samples, 0.02%)</title><rect x="99.9027%" y="2037" width="0.0172%" height="15" fill="rgb(244,98,49)" fg:x="220745" fg:w="38"/><text x="100.1527%" y="2047.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (31 samples, 0.01%)</title><rect x="99.9059%" y="2021" width="0.0140%" height="15" fill="rgb(235,134,22)" fg:x="220752" fg:w="31"/><text x="100.1559%" y="2031.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (31 samples, 0.01%)</title><rect x="99.9059%" y="2005" width="0.0140%" height="15" fill="rgb(221,70,32)" fg:x="220752" fg:w="31"/><text x="100.1559%" y="2015.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (31 samples, 0.01%)</title><rect x="99.9059%" y="1989" width="0.0140%" height="15" fill="rgb(238,15,50)" fg:x="220752" fg:w="31"/><text x="100.1559%" y="1999.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (31 samples, 0.01%)</title><rect x="99.9059%" y="1973" width="0.0140%" height="15" fill="rgb(215,221,48)" fg:x="220752" fg:w="31"/><text x="100.1559%" y="1983.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (30 samples, 0.01%)</title><rect x="99.9063%" y="1957" width="0.0136%" height="15" fill="rgb(236,73,3)" fg:x="220753" fg:w="30"/><text x="100.1563%" y="1967.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (30 samples, 0.01%)</title><rect x="99.9063%" y="1941" width="0.0136%" height="15" fill="rgb(250,107,11)" fg:x="220753" fg:w="30"/><text x="100.1563%" y="1951.50"></text></g><g><title>[unknown] (2,049 samples, 0.93%)</title><rect x="98.9935%" y="2325" width="0.9273%" height="15" fill="rgb(242,39,14)" fg:x="218736" fg:w="2049"/><text x="99.2435%" y="2335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,933 samples, 0.87%)</title><rect x="99.0460%" y="2309" width="0.8748%" height="15" fill="rgb(248,164,37)" fg:x="218852" fg:w="1933"/><text x="99.2960%" y="2319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,933 samples, 0.87%)</title><rect x="99.0460%" y="2293" width="0.8748%" height="15" fill="rgb(217,60,12)" fg:x="218852" fg:w="1933"/><text x="99.2960%" y="2303.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,274 samples, 0.58%)</title><rect x="99.3442%" y="2277" width="0.5766%" height="15" fill="rgb(240,125,29)" fg:x="219511" fg:w="1274"/><text x="99.5942%" y="2287.50"></text></g><g><title>async_std::task::builder::Builder::blocking::{{closure}}::{{closure}} (1,274 samples, 0.58%)</title><rect x="99.3442%" y="2261" width="0.5766%" height="15" fill="rgb(208,207,28)" fg:x="219511" fg:w="1274"/><text x="99.5942%" y="2271.50"></text></g><g><title>async_global_executor::executor::block_on (1,274 samples, 0.58%)</title><rect x="99.3442%" y="2245" width="0.5766%" height="15" fill="rgb(209,159,27)" fg:x="219511" fg:w="1274"/><text x="99.5942%" y="2255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,274 samples, 0.58%)</title><rect x="99.3442%" y="2229" width="0.5766%" height="15" fill="rgb(251,176,53)" fg:x="219511" fg:w="1274"/><text x="99.5942%" y="2239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,274 samples, 0.58%)</title><rect x="99.3442%" y="2213" width="0.5766%" height="15" fill="rgb(211,85,7)" fg:x="219511" fg:w="1274"/><text x="99.5942%" y="2223.50"></text></g><g><title>async_global_executor::executor::block_on::{{closure}} (1,274 samples, 0.58%)</title><rect x="99.3442%" y="2197" width="0.5766%" height="15" fill="rgb(216,64,54)" fg:x="219511" fg:w="1274"/><text x="99.5942%" y="2207.50"></text></g><g><title>async_global_executor::reactor::block_on (1,274 samples, 0.58%)</title><rect x="99.3442%" y="2181" width="0.5766%" height="15" fill="rgb(217,54,24)" fg:x="219511" fg:w="1274"/><text x="99.5942%" y="2191.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,274 samples, 0.58%)</title><rect x="99.3442%" y="2165" width="0.5766%" height="15" fill="rgb(208,206,53)" fg:x="219511" fg:w="1274"/><text x="99.5942%" y="2175.50"></text></g><g><title>async_io::driver::block_on (1,274 samples, 0.58%)</title><rect x="99.3442%" y="2149" width="0.5766%" height="15" fill="rgb(251,74,39)" fg:x="219511" fg:w="1274"/><text x="99.5942%" y="2159.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,274 samples, 0.58%)</title><rect x="99.3442%" y="2133" width="0.5766%" height="15" fill="rgb(226,47,5)" fg:x="219511" fg:w="1274"/><text x="99.5942%" y="2143.50"></text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,274 samples, 0.58%)</title><rect x="99.3442%" y="2117" width="0.5766%" height="15" fill="rgb(234,111,33)" fg:x="219511" fg:w="1274"/><text x="99.5942%" y="2127.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,269 samples, 0.57%)</title><rect x="99.3465%" y="2101" width="0.5743%" height="15" fill="rgb(251,14,10)" fg:x="219516" fg:w="1269"/><text x="99.5965%" y="2111.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,269 samples, 0.57%)</title><rect x="99.3465%" y="2085" width="0.5743%" height="15" fill="rgb(232,43,0)" fg:x="219516" fg:w="1269"/><text x="99.5965%" y="2095.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,269 samples, 0.57%)</title><rect x="99.3465%" y="2069" width="0.5743%" height="15" fill="rgb(222,68,43)" fg:x="219516" fg:w="1269"/><text x="99.5965%" y="2079.50"></text></g><g><title>rustsecp256k1_v0_6_1_ecmult (57 samples, 0.03%)</title><rect x="99.9362%" y="1861" width="0.0258%" height="15" fill="rgb(217,24,23)" fg:x="220819" fg:w="57"/><text x="100.1862%" y="1871.50"></text></g><g><title>rustsecp256k1_v0_6_1_ecmult_strauss_wnaf (57 samples, 0.03%)</title><rect x="99.9362%" y="1845" width="0.0258%" height="15" fill="rgb(229,209,14)" fg:x="220819" fg:w="57"/><text x="100.1862%" y="1855.50"></text></g><g><title>rustsecp256k1_v0_6_1_gej_double_var (42 samples, 0.02%)</title><rect x="99.9430%" y="1829" width="0.0190%" height="15" fill="rgb(250,149,48)" fg:x="220834" fg:w="42"/><text x="100.1930%" y="1839.50"></text></g><g><title>rustsecp256k1_v0_6_1_gej_double (42 samples, 0.02%)</title><rect x="99.9430%" y="1813" width="0.0190%" height="15" fill="rgb(210,120,37)" fg:x="220834" fg:w="42"/><text x="100.1930%" y="1823.50"></text></g><g><title>rustsecp256k1_v0_6_1_fe_sqr (23 samples, 0.01%)</title><rect x="99.9516%" y="1797" width="0.0104%" height="15" fill="rgb(210,21,8)" fg:x="220853" fg:w="23"/><text x="100.2016%" y="1807.50"></text></g><g><title>rustsecp256k1_v0_6_1_fe_sqr_inner (23 samples, 0.01%)</title><rect x="99.9516%" y="1781" width="0.0104%" height="15" fill="rgb(243,145,7)" fg:x="220853" fg:w="23"/><text x="100.2016%" y="1791.50"></text></g><g><title>miniscript::descriptor::key::DefiniteDescriptorKey::derive_public_key (64 samples, 0.03%)</title><rect x="99.9344%" y="1973" width="0.0290%" height="15" fill="rgb(238,178,32)" fg:x="220815" fg:w="64"/><text x="100.1844%" y="1983.50"></text></g><g><title>bitcoin::util::bip32::ExtendedPubKey::derive_pub (64 samples, 0.03%)</title><rect x="99.9344%" y="1957" width="0.0290%" height="15" fill="rgb(222,4,10)" fg:x="220815" fg:w="64"/><text x="100.1844%" y="1967.50"></text></g><g><title>bitcoin::util::bip32::ExtendedPubKey::ckd_pub (64 samples, 0.03%)</title><rect x="99.9344%" y="1941" width="0.0290%" height="15" fill="rgb(239,7,37)" fg:x="220815" fg:w="64"/><text x="100.1844%" y="1951.50"></text></g><g><title>secp256k1::key::PublicKey::add_exp_tweak (60 samples, 0.03%)</title><rect x="99.9362%" y="1925" width="0.0272%" height="15" fill="rgb(215,31,37)" fg:x="220819" fg:w="60"/><text x="100.1862%" y="1935.50"></text></g><g><title>rustsecp256k1_v0_6_1_ec_pubkey_tweak_add (60 samples, 0.03%)</title><rect x="99.9362%" y="1909" width="0.0272%" height="15" fill="rgb(224,83,33)" fg:x="220819" fg:w="60"/><text x="100.1862%" y="1919.50"></text></g><g><title>rustsecp256k1_v0_6_1_ec_pubkey_tweak_add_helper (60 samples, 0.03%)</title><rect x="99.9362%" y="1893" width="0.0272%" height="15" fill="rgb(239,55,3)" fg:x="220819" fg:w="60"/><text x="100.1862%" y="1903.50"></text></g><g><title>rustsecp256k1_v0_6_1_eckey_pubkey_tweak_add (60 samples, 0.03%)</title><rect x="99.9362%" y="1877" width="0.0272%" height="15" fill="rgb(247,92,11)" fg:x="220819" fg:w="60"/><text x="100.1862%" y="1887.50"></text></g><g><title>&lt;miniscript::descriptor::key::DefiniteDescriptorKey as miniscript::ToPublicKey&gt;::to_public_key (93 samples, 0.04%)</title><rect x="99.9344%" y="1989" width="0.0421%" height="15" fill="rgb(239,200,7)" fg:x="220815" fg:w="93"/><text x="100.1844%" y="1999.50"></text></g><g><title>secp256k1::context::alloc_only::&lt;impl secp256k1::Secp256k1&lt;secp256k1::context::alloc_only::VerifyOnly&gt;&gt;::verification_only (29 samples, 0.01%)</title><rect x="99.9633%" y="1973" width="0.0131%" height="15" fill="rgb(227,115,8)" fg:x="220879" fg:w="29"/><text x="100.2133%" y="1983.50"></text></g><g><title>secp256k1::context::alloc_only::&lt;impl secp256k1::Secp256k1&lt;C&gt;&gt;::gen_new (29 samples, 0.01%)</title><rect x="99.9633%" y="1957" width="0.0131%" height="15" fill="rgb(215,189,27)" fg:x="220879" fg:w="29"/><text x="100.2133%" y="1967.50"></text></g><g><title>rustsecp256k1_v0_6_1_context_preallocated_create (29 samples, 0.01%)</title><rect x="99.9633%" y="1941" width="0.0131%" height="15" fill="rgb(251,216,39)" fg:x="220879" fg:w="29"/><text x="100.2133%" y="1951.50"></text></g><g><title>rustsecp256k1_v0_6_1_ecmult_gen_context_build (29 samples, 0.01%)</title><rect x="99.9633%" y="1925" width="0.0131%" height="15" fill="rgb(207,29,47)" fg:x="220879" fg:w="29"/><text x="100.2133%" y="1935.50"></text></g><g><title>rustsecp256k1_v0_6_1_ecmult_gen_blind (29 samples, 0.01%)</title><rect x="99.9633%" y="1909" width="0.0131%" height="15" fill="rgb(210,71,34)" fg:x="220879" fg:w="29"/><text x="100.2133%" y="1919.50"></text></g><g><title>miniscript::descriptor::Descriptor&lt;Pk&gt;::address (94 samples, 0.04%)</title><rect x="99.9344%" y="2021" width="0.0425%" height="15" fill="rgb(253,217,51)" fg:x="220815" fg:w="94"/><text x="100.1844%" y="2031.50"></text></g><g><title>miniscript::descriptor::segwitv0::Wpkh&lt;Pk&gt;::address (94 samples, 0.04%)</title><rect x="99.9344%" y="2005" width="0.0425%" height="15" fill="rgb(222,117,46)" fg:x="220815" fg:w="94"/><text x="100.1844%" y="2015.50"></text></g><g><title>kv::bucket::Bucket&lt;K,V&gt;::set (27 samples, 0.01%)</title><rect x="99.9823%" y="1989" width="0.0122%" height="15" fill="rgb(226,132,6)" fg:x="220921" fg:w="27"/><text x="100.2323%" y="1999.50"></text></g><g><title>sled::tree::Tree::insert (27 samples, 0.01%)</title><rect x="99.9823%" y="1973" width="0.0122%" height="15" fill="rgb(254,145,51)" fg:x="220921" fg:w="27"/><text x="100.2323%" y="1983.50"></text></g><g><title>sled::tree::Tree::insert_inner (26 samples, 0.01%)</title><rect x="99.9828%" y="1957" width="0.0118%" height="15" fill="rgb(231,199,27)" fg:x="220922" fg:w="26"/><text x="100.2328%" y="1967.50"></text></g><g><title>utreexo_wallet::derive_addresses (136 samples, 0.06%)</title><rect x="99.9339%" y="2037" width="0.0615%" height="15" fill="rgb(245,158,14)" fg:x="220814" fg:w="136"/><text x="100.1839%" y="2047.50"></text></g><g><title>utreexo_wallet::address_cache::AddressCache&lt;D&gt;::cache_address (40 samples, 0.02%)</title><rect x="99.9774%" y="2021" width="0.0181%" height="15" fill="rgb(240,113,14)" fg:x="220910" fg:w="40"/><text x="100.2274%" y="2031.50"></text></g><g><title>&lt;utreexo_wallet::address_cache::kv_database::KvDatabase as utreexo_wallet::address_cache::AddressCacheDatabase&gt;::save (39 samples, 0.02%)</title><rect x="99.9778%" y="2005" width="0.0177%" height="15" fill="rgb(210,20,13)" fg:x="220911" fg:w="39"/><text x="100.2278%" y="2015.50"></text></g><g><title>utreexo_wallet::setup_wallet (137 samples, 0.06%)</title><rect x="99.9339%" y="2053" width="0.0620%" height="15" fill="rgb(241,144,13)" fg:x="220814" fg:w="137"/><text x="100.1839%" y="2063.50"></text></g><g><title>std::panic::catch_unwind (166 samples, 0.08%)</title><rect x="99.9213%" y="2181" width="0.0751%" height="15" fill="rgb(235,43,34)" fg:x="220786" fg:w="166"/><text x="100.1713%" y="2191.50"></text></g><g><title>std::panicking::try (166 samples, 0.08%)</title><rect x="99.9213%" y="2165" width="0.0751%" height="15" fill="rgb(208,36,20)" fg:x="220786" fg:w="166"/><text x="100.1713%" y="2175.50"></text></g><g><title>std::panicking::try::do_call (166 samples, 0.08%)</title><rect x="99.9213%" y="2149" width="0.0751%" height="15" fill="rgb(239,204,10)" fg:x="220786" fg:w="166"/><text x="100.1713%" y="2159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (166 samples, 0.08%)</title><rect x="99.9213%" y="2133" width="0.0751%" height="15" fill="rgb(217,84,43)" fg:x="220786" fg:w="166"/><text x="100.1713%" y="2143.50"></text></g><g><title>std::rt::lang_start::{{closure}} (166 samples, 0.08%)</title><rect x="99.9213%" y="2117" width="0.0751%" height="15" fill="rgb(241,170,50)" fg:x="220786" fg:w="166"/><text x="100.1713%" y="2127.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (166 samples, 0.08%)</title><rect x="99.9213%" y="2101" width="0.0751%" height="15" fill="rgb(226,205,29)" fg:x="220786" fg:w="166"/><text x="100.1713%" y="2111.50"></text></g><g><title>core::ops::function::FnOnce::call_once (166 samples, 0.08%)</title><rect x="99.9213%" y="2085" width="0.0751%" height="15" fill="rgb(233,113,1)" fg:x="220786" fg:w="166"/><text x="100.1713%" y="2095.50"></text></g><g><title>utreexo_wallet::main (166 samples, 0.08%)</title><rect x="99.9213%" y="2069" width="0.0751%" height="15" fill="rgb(253,98,13)" fg:x="220786" fg:w="166"/><text x="100.1713%" y="2079.50"></text></g><g><title>[libc.so.6] (167 samples, 0.08%)</title><rect x="99.9213%" y="2293" width="0.0756%" height="15" fill="rgb(211,115,12)" fg:x="220786" fg:w="167"/><text x="100.1713%" y="2303.50"></text></g><g><title>main (167 samples, 0.08%)</title><rect x="99.9213%" y="2277" width="0.0756%" height="15" fill="rgb(208,12,16)" fg:x="220786" fg:w="167"/><text x="100.1713%" y="2287.50"></text></g><g><title>std::rt::lang_start_internal (167 samples, 0.08%)</title><rect x="99.9213%" y="2261" width="0.0756%" height="15" fill="rgb(237,193,54)" fg:x="220786" fg:w="167"/><text x="100.1713%" y="2271.50"></text></g><g><title>std::panic::catch_unwind (167 samples, 0.08%)</title><rect x="99.9213%" y="2245" width="0.0756%" height="15" fill="rgb(243,22,42)" fg:x="220786" fg:w="167"/><text x="100.1713%" y="2255.50"></text></g><g><title>std::panicking::try (167 samples, 0.08%)</title><rect x="99.9213%" y="2229" width="0.0756%" height="15" fill="rgb(233,151,36)" fg:x="220786" fg:w="167"/><text x="100.1713%" y="2239.50"></text></g><g><title>std::panicking::try::do_call (167 samples, 0.08%)</title><rect x="99.9213%" y="2213" width="0.0756%" height="15" fill="rgb(237,57,45)" fg:x="220786" fg:w="167"/><text x="100.1713%" y="2223.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (167 samples, 0.08%)</title><rect x="99.9213%" y="2197" width="0.0756%" height="15" fill="rgb(221,88,17)" fg:x="220786" fg:w="167"/><text x="100.1713%" y="2207.50"></text></g><g><title>all (220,960 samples, 100%)</title><rect x="0.0000%" y="2357" width="100.0000%" height="15" fill="rgb(230,79,15)" fg:x="0" fg:w="220960"/><text x="0.2500%" y="2367.50"></text></g><g><title>utreexo-wallet (2,250 samples, 1.02%)</title><rect x="98.9817%" y="2341" width="1.0183%" height="15" fill="rgb(213,57,13)" fg:x="218710" fg:w="2250"/><text x="99.2317%" y="2351.50"></text></g><g><title>_start (174 samples, 0.08%)</title><rect x="99.9213%" y="2325" width="0.0787%" height="15" fill="rgb(222,116,39)" fg:x="220786" fg:w="174"/><text x="100.1713%" y="2335.50"></text></g><g><title>__libc_start_main (174 samples, 0.08%)</title><rect x="99.9213%" y="2309" width="0.0787%" height="15" fill="rgb(245,107,2)" fg:x="220786" fg:w="174"/><text x="100.1713%" y="2319.50"></text></g></svg></svg>